template: true
valuesFilePath: ../values.yml

# Template Variables
{{ $IS_CRITICAL_BRANCH := ternary true false (or ( hasPrefix "master" "{{gitBranch}}" ) ( hasPrefix "release" "{{gitBranch}}" ) ( hasPrefix "milestone" "{{gitBranch}}" )) }}
{{ $IS_RELEASE_BRANCH := ternary true false (or ( hasPrefix "preRelease" "{{gitBranch}}" ) ( hasPrefix "release" "{{gitBranch}}" ) ( hasPrefix "milestone" "{{gitBranch}}" )) }}
{{ $XRAY_SCAN_ENABLED  := ternary true false $IS_CRITICAL_BRANCH }}
{{ $IS_PRERELEASE_BRANCHES  := ternary true false (or (hasPrefix "preRelease" "{{gitBranch}}") (hasPrefix "milestone" "{{gitBranch}}")) }}

pipelines:
  {{ if $IS_PRERELEASE_BRANCHES }}
  - name: buildplane_changes_notification
    configuration:
      integrations:
        - name: pipelines_build_status_slack
    steps:
      - name: send_notification
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          inputResources:
            - name: buildplanePreReleaseGit
        execution:
          onExecute:
            - source ${res_buildplanePreReleaseGit_resourcePath}/build/ci/pipelines_build.sh
            - prerelease_notification_BP
  {{ end }}

  - name: buildplane2
    configuration:
      jfrogCliVersion: 2
      environmentVariables:
        readOnly:
          reqKickTarget: "pipelines-artifacts/reqKick"
          reqExecTarget: "pipelines-artifacts/reqExec"
          nodeInitTarget: "pipelines-artifacts/nodeInit"
          extensionsTarget: "pipelines-artifacts/extensions"
          reportsTarget: "pipelines-artifacts/reports"
          pipeTarget: "pipelines-artifacts/pipe"
          buildPlaneTarget: "pipelines-artifacts/buildPlane"
          version: "{{gitBranch}}"
          awsEUC1Region: "eu-central-1"
          awsAPS1Region: "ap-south-1"
          macAmiRegion: "us-east-1"
          awsAmiVPCID: "vpc-54a9003c"
          awsAmiSubnetID: "subnet-1ebe8654"
          awsAmiSecurityGroupID: "sg-06401f04539a972c2"
          azureSubscriptionId: "f27d81be-eea4-479e-a745-11088b8cc1b0"
          azureVirtualNetworkName: "pipelines_virtual_net"
          azureVirtualNetworkSubnetName: "pipelines_virtual_subnet"
          rtRegistry: "pipelines-docker"
          gcpProjectId: "pipelines-cloud-stg"
          gcpMachineType: "n1-standard-1"
          gcpRegion: "us-west1"
          gcpZone: "us-west1-b"
          gcpSshUsername: "root"
          AWS_MAX_ATTEMPTS: 300
          AWS_POLL_DELAY_SECONDS: 20
          JFROG_CLI_BUILD_URL: "https://entplus.jfrog.io"
          XRAY_FILE_TARGET: "pipelines-artifacts/xray"
          ssh_username: "pipelines"
          ssh_private_key_file: "pipelines-access.pem"
          ssh_bastion_private_key_file: "pipelines-access.pem"
          ssh_bastion_host: "packerpipelinesjump.westus.cloudapp.azure.com"
          ssh_bastion_username: "pipelines"
          JFROG_CLI_VERSION: 1.54.1
          JFROG_CLI_2_VERSION: 2.31.0
          MAC_REQEXEC_VERSION: 1.0.0
          XRAY_ENABLED: "{{ $XRAY_SCAN_ENABLED }}"
          XRAY_FAIL_PIPELINES: "true"
          npmRegistry: "https://entplus.jfrog.io/artifactory/api/npm/npm-virtual"
          FUNCTIONAL_TESTS_DEBUG_LOGS: "false"
          pipeBranch: "{{gitBranch}}"
      integrations:
        - name: pipelines_buildplane_notifications
        - name: security_xray_access_token
        - name: jira_jfrog
      {{ if eq "master" "{{gitBranch}}" }}
      inputResources:
        - name: nightlyBuild
      outputResources:
        - name: buildStatusUpdate
      {{ end }}
    steps:
      - name: trigger_buildplane_builds
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
        execution:
          onStart:
            - echo "kicking off all component builds"
            {{ if eq "master" "{{gitBranch}}" }}
            - write_output "buildStatusUpdate" "runId=${run_id}"
            {{ end }}

      - name: functional_tests_bash
        type: Bash
        configuration:
          integrations:
            - name: entplus_deployer
          inputSteps:
            - name: trigger_buildplane_builds
          inputResources:
            - name: controlplane_1
              trigger: false
        execution:
          onStart:
            - node --version
            - ln -s $(which node) /usr/bin/node
            # Pull the image used by all functional tests to avoid timeout during test.
            - docker pull releases-docker.jfrog.io/jfrog/pipelines-u18go:1.19
            - npm config set registry "https://entplus.jfrog.io/artifactory/api/npm/npm-virtual"
            - curl -u"${int_entplus_deployer_user}":"${int_entplus_deployer_apikey}" "https://entplus.jfrog.io/api/npm/auth" >> ~/.npmrc
            - npm config fix
            - npm config list
            - pushd $res_controlplane_1_resourcePath
            - npm config set progress false && npm ci -ddd
            - npm run build:packages
            - popd
            - pushd $res_controlplane_1_resourcePath/packages/types
            - npm link
            - popd
            - pushd $res_controlplane_1_resourcePath/tools/ms-testing-library
            - npm run build
            - npm link
            - popd
            - pushd $res_controlplane_1_resourcePath/packages/core
            - npm link
            - popd
            - pushd $res_controlplane_1_resourcePath/buildplane/reqKick
            - npm link @jfrog-pipelines/types @jfrog-pipelines/ms-testing-library @jfrog-pipelines/core
            - popd
            - | # TODO: remove this after images with node18 are published and the task is updated
              if [ -n "$(which node18)" ]; then
                ln -s "$(which node18)" /usr/local/bin/node16
              elif [ -n "$(which node16)" ]; then
                ln -s "$(which node16)" /usr/local/bin/node18
              fi
            - task: jfrog/setup-go@latest
              input:
                version: "{{ .Values.goBuildVersion }}"
            - pushd $res_controlplane_1_resourcePath/buildplane/reports
            - go build
            - popd
          onExecute:
            - pushd $res_controlplane_1_resourcePath/buildplane/reqKick
            - npm test

      - name: setup_functional_tests_powershell
        type: PowerShell
        configuration:
          runtime:
            type: host
          affinityGroup: functional_tests_powershell
          nodePool: pipelines_w19
          inputSteps:
            - name: trigger_buildplane_builds
        execution:
          onExecute:
            - (Get-ItemProperty "HKLM:System\CurrentControlSet\Control\FileSystem").LongPathsEnabled
            - REG ADD "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem" /v LongPathsEnabled /t REG_DWORD /d 1 /f
            - (Get-ItemProperty "HKLM:System\CurrentControlSet\Control\FileSystem").LongPathsEnabled
            - Remove-Item -Recurse -Force $PIPELINE_WORKSPACE_DIR\*
            - git config --system core.longpaths true

      - name: functional_tests_powershell
        type: PowerShell
        configuration:
          condition: 'SKIP_POWERSHELL_TESTS == "false"'
          environmentVariables:
            http_proxy: ''
            https_proxy: ''
            HTTPS_PROXY: ''
            HTTP_PROXY: ''
          runtime:
            type: host
          affinityGroup: functional_tests_powershell
          nodePool: pipelines_w19
          integrations:
            - name: entplus_deployer
          inputResources:
            - name: controlplane_1
              trigger: false
          inputSteps:
            - name: setup_functional_tests_powershell
        execution:
          onStart:
            - docker pull releases-docker.jfrog.io/jfrog/pipelines-w19go:1.19
            - npm config set registry "https://entplus.jfrog.io/artifactory/api/npm/npm-virtual"
            - $env:user = (Get-Variable 'int_entplus_deployer_user').Value
            - $env:password = (Get-Variable 'int_entplus_deployer_apikey').Value
            - $env:pair = "$($env:user):$($env:password)"
            - $env:encodedCreds = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($env:pair))
            - $env:basicAuthValue = "Basic $env:encodedCreds"
            - Add-Content  $(npm config get userconfig) (Invoke-WebRequest -Uri 'https://entplus.jfrog.io/api/npm/auth' -Headers @{Authorization = $env:basicAuthValue} -UseBasicParsing).Content
            - Push-Location $res_controlplane_1_resourcePath
            - npm install --no-audit --no-fund --ignore-scripts
            - npm run build:packages
            - Pop-Location
            - Push-Location $res_controlplane_1_resourcePath/packages/types
            - npm link
            - Pop-Location
            - Push-Location $res_controlplane_1_resourcePath/tools/ms-testing-library
            - npm run build
            - npm link
            - Pop-Location
            - Push-Location $res_controlplane_1_resourcePath/packages/core
            - npm link
            - Pop-Location
            - Push-Location $res_controlplane_1_resourcePath/buildplane/reqKick
            - $env:REQKICK_DIR = (Get-Location).Path
            - npm link @jfrog-pipelines/types @jfrog-pipelines/ms-testing-library @jfrog-pipelines/core
            - $env:ProgressPreference = "SilentlyContinue"
            - Install-Module ps2exe -AllowClobber -Force
            - ps2exe .\__tests__\mockCLIs\mockJfrog.ps1
            - Pop-Location
          onExecute:
            - Push-Location $res_controlplane_1_resourcePath/buildplane/reqKick
            - npm run test:win
            - Pop-Location

      - name: build_OotbExtensions
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-extensions"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: extensionsGit_1
            - name: extensionsJsonFS_1
          outputResources:
            - name: ootbExtensionsFS_1
          inputSteps:
            - name: trigger_buildplane_builds
        execution:
          onExecute:
            - pushd $res_extensionsGit_1_resourcePath/buildplane
            - export RELEASE_VERSION=$(./normalizeReleaseVersion.sh ${version} )
            - popd
            - pushd $res_extensionsGit_1_resourcePath/buildplane/build/extensions
            - TAR_FILENAME="extensions-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./tar/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $extensionsTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id} || true
            - popd
            - source "${res_extensionsGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_nodeInit
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-nodeInit"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: nodeInitGit_1
          outputResources:
            - name: nodeInitFS_1
          inputSteps:
            - name: trigger_buildplane_builds
        execution:
          onExecute:
            - pushd $res_nodeInitGit_1_resourcePath/buildplane/nodeInit
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="nodeInit-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $nodeInitTarget/$TAR_FILENAME --build-name ${BUILD_NAME} --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_nodeInitGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_dind
        type: DockerBuild
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            JFROG_CLI_BUILD_NAME: "pipelines-dind"
          affinityGroup: dind
          dockerFileLocation: buildplane/images/dind
          dockerFileName: Dockerfile
          dockerImageName: jfpip.jfrog.io/jfrog/pipelines-dind
          dockerImageTag: ${RELEASE_VERSION}
          integrations:
            - name: entplus_deployer
            - name: dockerDotJfrog
          inputSteps:
            - name: trigger_buildplane_builds
          inputResources:
            - name: dindGit_1
        execution:
          onStart:
            - pushd $res_dindGit_1_resourcePath/buildplane
            - add_run_variables RELEASE_VERSION=$( ./normalizeReleaseVersion.sh ${version} )
            - export JFROG_CLI_BUILD_NUMBER="${RELEASE_VERSION}-${run_number}"
            - popd

      - name: publish_dind
        type: DockerPush
        configuration:
          nodePool: pipelines_u20_t3small
          affinityGroup: dind
          targetRepository: pipelines-docker-dev-local
          autoPublishBuildInfo: true
          integrations:
            - name: entplus_deployer
          inputSteps:
            - name: build_dind
          outputResources:
            - name: dindImageBI_1
          inputResources:
            - name: buildCI
              trigger: false

      - name: build_reqKick_image
        type: DockerBuild
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            JFROG_CLI_BUILD_NAME: "pipelines-reqkick"
          affinityGroup: reqKick_image
          dockerFileLocation: buildplane/images/reqkick
          dockerFileName: Dockerfile
          dockerImageName: jfpip.jfrog.io/jfrog/pipelines-reqkick
          dockerImageTag: ${RELEASE_VERSION}
          dockerOptions: --build-arg REQKICK_BUILD_IMAGE=$res_reqkickBuildImage_1_imageName:$res_reqkickBuildImage_1_imageTag --build-arg REQKICK_RUN_IMAGE=$res_reqkickRunImage_1_imageName:$res_reqkickRunImage_1_imageTag
          integrations:
            - name: entplus_deployer
            - name: dockerDotJfrog
          inputResources:
            - name: reqKickGit_1
            - name: buildPlaneRpmFS_x8664_C7_1
            - name: reqkickBuildImage_1
            - name: reqkickRunImage_1
          inputSteps:
            - name: functional_tests_bash
        execution:
          onStart:
            - pushd $res_reqKickGit_1_resourcePath/buildplane
            - cp -vr $res_buildPlaneRpmFS_x8664_C7_1_resourcePath/buildPlane/* images/reqkick/
            - add_run_variables RELEASE_VERSION=$( ./normalizeReleaseVersion.sh ${version} )
            - export JFROG_CLI_BUILD_NUMBER="${RELEASE_VERSION}-${run_number}"
            - popd

      - name: publish_reqKick
        type: DockerPush
        configuration:
          nodePool: pipelines_u20_t3small
          affinityGroup: reqKick_image
          targetRepository: pipelines-docker-dev-local
          autoPublishBuildInfo: true
          integrations:
            - name: entplus_deployer
          inputSteps:
            - name: build_reqKick_image
          inputResources:
            - name: buildCI
              trigger: false
          outputResources:
            - name: reqkickImageBI_1

      - name: reqkick_scan
        type: XrayScan
        configuration:
          nodePool: pipelines_u20_t3small
          failOnScan: false
          inputResources:
            - name: reqkickImageBI_1

      - name: build_U18_reqKick
        type: Bash
        configuration:
          environmentVariables:
            BUILD_NAME: "pipelines-u18-reqKick"
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - 16
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reqKickGit_1
              trigger: false
            - name: pipelinesCoreVersion
          outputResources:
            - name: reqKickFS_x8664_U18_1
          inputSteps:
            - name: functional_tests_bash
        execution:
          onExecute:
            - pushd $res_reqKickGit_1_resourcePath/buildplane/reqKick
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reqKick-x86_64-Ubuntu_18.04-$RELEASE_VERSION.tar.gz"
            - echo $PIPELINES_CORE_VERSION
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/x86_64/Ubuntu_18.04/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reqKickTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reqKickGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_U18_reports
        type: Bash
        configuration:
          environmentVariables:
            BUILD_NAME: "pipelines-u18-reports"
          runtime:
            type: image
            image:
              auto:
                language: go
                versions:
                  - "{{ .Values.goBuildVersion }}"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reportsGit_1
          outputResources:
            - name: reportsFS_x8664_U18_1
          inputSteps:
            - name: trigger_buildplane_builds
        execution:
          onStart:
            - | # TODO: remove this after images with node18 are published and the task is updated
              if [ -n "$(which node18)" ]; then
                ln -s "$(which node18)" /usr/local/bin/node16
              elif [ -n "$(which node16)" ]; then
                ln -s "$(which node16)" /usr/local/bin/node18
              fi
            - task: jfrog/setup-go@latest
              input:
                version: {{ .Values.goBuildVersion }}
          onExecute:
            - pushd $res_reportsGit_1_resourcePath/buildplane/reports
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reports-x86_64-Ubuntu_18.04-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/x86_64/Ubuntu_18.04/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reportsTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reportsGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_U18_buildPlane_deb
        type: Bash
        configuration:
          environmentVariables:
            BUILD_NAME: "pipelines-u18-deb"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: nodeInitFS_1
            - name: ootbExtensionsFS_1
            - name: reqKickFS_x8664_U18_1
            - name: reportsFS_x8664_U18_1
            - name: pipeFS_amd64_linux_1
            - name: buildGit_1
          outputResources:
            - name: buildPlaneDebFS_x8664_U18_1
        execution:
          onExecute:
            - pushd $res_buildGit_1_resourcePath/buildplane
            - RELEASE_VERSION=$(./normalizeReleaseVersion.sh ${version})
            - popd
            - pushd $res_buildGit_1_resourcePath/buildplane/build/deb/x86_64/Ubuntu_18.04
            - PKG_NAME="buildPlane-x86_64-Ubuntu_18.04-$RELEASE_VERSION"
            - mkdir -p bin
            - cp -r $res_reportsFS_x8664_U18_1_resourcePath/reports/reports-x86_64-Ubuntu_18.04-$RELEASE_VERSION.tar.gz bin/reports.tar.gz
            - cp -r $res_reqKickFS_x8664_U18_1_resourcePath/reqKick/reqKick-x86_64-Ubuntu_18.04-$RELEASE_VERSION.tar.gz bin/reqKick.tar.gz
            - cp -r $res_nodeInitFS_1_resourcePath/nodeInit/nodeInit-$RELEASE_VERSION.tar.gz bin/nodeInit.tar.gz
            - cp -r $res_ootbExtensionsFS_1_resourcePath/extensions/extensions-$RELEASE_VERSION.tar.gz bin/extensions.tar.gz
            - mkdir -p bin/pipe
            - cp -r ${res_pipeFS_amd64_linux_1_resourcePath}/pipe-$RELEASE_VERSION-linux-amd64 bin/pipe/pipe
            - chmod +x bin/pipe/pipe
            - mkdir -p bin/jfrog
            - mkdir -p bin/jfrog2
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v1/${JFROG_CLI_VERSION}/jfrog-cli-linux-amd64/jfrog -L -O bin/jfrog/jfrog
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/${JFROG_CLI_2_VERSION}/jfrog-cli-linux-amd64/jf -L -O bin/jfrog2/jf
            - chmod +x bin/jfrog/jfrog
            - chmod +x bin/jfrog2/jf
            - ln -s jf bin/jfrog2/jfrog
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build.sh $PKG_NAME $RELEASE_VERSION
            - jfrog rt upload $res_buildGit_1_resourcePath/buildplane/bin/$PKG_NAME.deb $buildPlaneTarget/$PKG_NAME.deb --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_buildGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_U20_reqKick
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-u20-reqKick"
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - 16
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reqKickGit_1
              trigger: false
            - name: pipelinesCoreVersion
          outputResources:
            - name: reqKickFS_x8664_U20_1
          inputSteps:
            - name: functional_tests_bash
        execution:
          onExecute:
            - pushd $res_reqKickGit_1_resourcePath/buildplane/reqKick
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reqKick-x86_64-Ubuntu_20.04-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/x86_64/Ubuntu_20.04/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reqKickTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reqKickGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_U20_reports
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-u20-reports"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reportsGit_1
          outputResources:
            - name: reportsFS_x8664_U20_1
          inputSteps:
            - name: trigger_buildplane_builds
        execution:
          onStart:
            - | # TODO: remove this after images with node18 are published and the task is updated
              if [ -n "$(which node18)" ]; then
                ln -s "$(which node18)" /usr/local/bin/node16
              elif [ -n "$(which node16)" ]; then
                ln -s "$(which node16)" /usr/local/bin/node18
              fi
            - task: jfrog/setup-go@latest
              input:
                version: {{ .Values.goBuildVersion }}
          onExecute:
            - pushd $res_reportsGit_1_resourcePath/buildplane/reports
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reports-x86_64-Ubuntu_20.04-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/x86_64/Ubuntu_20.04/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reportsTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reportsGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_U20_buildPlane_deb
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-u20-deb"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: nodeInitFS_1
            - name: ootbExtensionsFS_1
            - name: reqKickFS_x8664_U20_1
            - name: reportsFS_x8664_U20_1
            - name: pipeFS_amd64_linux_1
            - name: buildGit_1
          outputResources:
            - name: buildPlaneDebFS_x8664_U20_1
        execution:
          onExecute:
            - pushd $res_buildGit_1_resourcePath/buildplane
            - RELEASE_VERSION=$(./normalizeReleaseVersion.sh ${version})
            - popd
            - pushd $res_buildGit_1_resourcePath/buildplane/build/deb/x86_64/Ubuntu_20.04
            - PKG_NAME="buildPlane-x86_64-Ubuntu_20.04-$RELEASE_VERSION"
            - mkdir -p bin
            - cp -r $res_reportsFS_x8664_U20_1_resourcePath/reports/reports-x86_64-Ubuntu_20.04-$RELEASE_VERSION.tar.gz bin/reports.tar.gz
            - cp -r $res_reqKickFS_x8664_U20_1_resourcePath/reqKick/reqKick-x86_64-Ubuntu_20.04-$RELEASE_VERSION.tar.gz bin/reqKick.tar.gz
            - cp -r $res_nodeInitFS_1_resourcePath/nodeInit/nodeInit-$RELEASE_VERSION.tar.gz bin/nodeInit.tar.gz
            - cp -r $res_ootbExtensionsFS_1_resourcePath/extensions/extensions-$RELEASE_VERSION.tar.gz bin/extensions.tar.gz
            - mkdir -p bin/pipe
            - cp -r ${res_pipeFS_amd64_linux_1_resourcePath}/pipe-$RELEASE_VERSION-linux-amd64 bin/pipe/pipe
            - chmod +x bin/pipe/pipe
            - mkdir -p bin/jfrog
            - mkdir -p bin/jfrog2
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v1/${JFROG_CLI_VERSION}/jfrog-cli-linux-amd64/jfrog -L -O bin/jfrog/jfrog
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/${JFROG_CLI_2_VERSION}/jfrog-cli-linux-amd64/jf -L -O bin/jfrog2/jf
            - chmod +x bin/jfrog/jfrog
            - chmod +x bin/jfrog2/jf
            - ln -s jf bin/jfrog2/jfrog
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build.sh $PKG_NAME $RELEASE_VERSION
            - jfrog rt upload $res_buildGit_1_resourcePath/buildplane/bin/$PKG_NAME.deb $buildPlaneTarget/$PKG_NAME.deb --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_buildGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"
    {{- range $build := $.Values.build }}
      {{- range $build.arch }}
      - name: build_{{ .name }}_{{ $build.alias }}_reqKick
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-{{ .name }}_{{ $build.alias }}-reqKick"
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - 16
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reqKickGit_1
              trigger: false
            - name: pipelinesCoreVersion
          outputResources:
            - name: reqKickFS_{{ .name }}_{{ $build.alias }}
          inputSteps:
            - name: functional_tests_bash
        execution:
          onExecute:
            - pushd $res_reqKickGit_1_resourcePath/buildplane/reqKick
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reqKick-{{ .name }}-{{ $build.os }}-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/{{ .name }}/{{ $build.os }}/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reqKickTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reqKickGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"


      - name: build_{{ .name }}_{{ $build.alias }}_reports
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-{{ .name }}_{{ $build.alias }}-reports"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reportsGit_1
          outputResources:
            - name: reportsFS_{{ .name }}_{{ $build.alias }}
          inputSteps:
            - name: trigger_buildplane_builds
        execution:
          onStart:
            - | # TODO: remove this after images with node18 are published and the task is updated
              if [ -n "$(which node18)" ]; then
                ln -s "$(which node18)" /usr/local/bin/node16
              elif [ -n "$(which node16)" ]; then
                ln -s "$(which node16)" /usr/local/bin/node18
              fi
            - task: jfrog/setup-go@latest
              input:
                version: {{ $.Values.goBuildVersion }}
          onExecute:
            - pushd $res_reportsGit_1_resourcePath/buildplane/reports
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reports-{{ .name }}-{{ $build.os }}-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/{{ .name }}/{{ $build.os }}/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reportsTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reportsGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_{{ .name }}_{{ $build.alias }}_buildPlane_deb
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-{{ .name }}_{{ $build.alias }}-deb"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: nodeInitFS_1
            - name: ootbExtensionsFS_1
            - name: reqKickFS_{{ .name }}_{{ $build.alias }}
            - name: reportsFS_{{ .name }}_{{ $build.alias }}
            - name: pipeFS_amd64_linux_1
            - name: pipeFS_arm64_linux_1
            - name: buildGit_1
          outputResources:
            - name: buildPlaneDebFS_{{ .name }}_{{ $build.alias }}
        execution:
          onExecute:
            - pushd $res_buildGit_1_resourcePath/buildplane
            - RELEASE_VERSION=$(./normalizeReleaseVersion.sh ${version})
            - popd
            - pushd $res_buildGit_1_resourcePath/buildplane/build/deb/{{ .name }}/{{ $build.os }}
            - PKG_NAME="buildPlane-{{ .name }}-{{ $build.os }}-$RELEASE_VERSION"
            - mkdir -p bin
            - cp -r $res_reportsFS_{{ .name }}_{{ $build.alias }}_resourcePath/reports/reports-{{ .name }}-{{ $build.os }}-$RELEASE_VERSION.tar.gz bin/reports.tar.gz
            - cp -r $res_reqKickFS_{{ .name }}_{{ $build.alias }}_resourcePath/reqKick/reqKick-{{ .name }}-{{ $build.os }}-$RELEASE_VERSION.tar.gz bin/reqKick.tar.gz
            - cp -r $res_nodeInitFS_1_resourcePath/nodeInit/nodeInit-$RELEASE_VERSION.tar.gz bin/nodeInit.tar.gz
            - cp -r $res_ootbExtensionsFS_1_resourcePath/extensions/extensions-$RELEASE_VERSION.tar.gz bin/extensions.tar.gz
            - mkdir -p bin/pipe
            - |
              if [[ {{ .name }} == "x86_64" ]]; then
                export jf_arch="amd64";
                cp -r ${res_pipeFS_amd64_linux_1_resourcePath}/pipe-$RELEASE_VERSION-linux-amd64 bin/pipe/pipe
              else
                export jf_arch="arm64";
                cp -r ${res_pipeFS_arm64_linux_1_resourcePath}/pipe-$RELEASE_VERSION-linux-arm64 bin/pipe/pipe
              fi
            - chmod +x bin/pipe/pipe
            - mkdir -p bin/jfrog
            - mkdir -p bin/jfrog2
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v1/${JFROG_CLI_VERSION}/jfrog-cli-linux-$jf_arch/jfrog -L -O bin/jfrog/jfrog
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/${JFROG_CLI_2_VERSION}/jfrog-cli-linux-$jf_arch/jf -L -O bin/jfrog2/jf
            - chmod +x bin/jfrog/jfrog
            - chmod +x bin/jfrog2/jf
            - ln -s jf bin/jfrog2/jfrog
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build.sh $PKG_NAME $RELEASE_VERSION
            - jfrog rt upload $res_buildGit_1_resourcePath/buildplane/bin/$PKG_NAME.deb $buildPlaneTarget/$PKG_NAME.deb --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_buildGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"
      {{- end}}

    {{- end}}

      - name: build_custom_ami
        type: Bash
        configuration:
          timeoutSeconds: 14400
          environmentVariables:
            u20SourceAmiID: "ami-0932440befd74cdba"
            os: "Ubuntu_20.04"
            arch: "x86_64"
          integrations:
            - name: entplus_deployer
            - name: awsBits
          inputResources:
            - name: customAMIGit_1
            - name: buildPlaneDebFS_x8664_U20_1
              {{ if or (hasPrefix "feature" "{{gitBranch}}") (hasPrefix "bugfix" "{{gitBranch}}") }}
              trigger: false
              {{ end }}
        execution:
          onExecute:
            - pushd $res_customAMIGit_1_resourcePath/buildplane
            - RELEASE_VERSION=$(./normalizeReleaseVersion.sh ${version})
            - popd
            - pushd $res_customAMIGit_1_resourcePath/buildplane/images/aws/${architecture}/TestCustom_u20
            - cp -vr $res_buildPlaneDebFS_x8664_U20_1_resourcePath/buildPlane/buildPlane-${arch}-${os}-$RELEASE_VERSION.deb buildPlane-${arch}-${os}.deb
            - ./basePack.sh $awsEUC1Region $awsAmiVPCID $awsAmiSubnetID $awsAmiSecurityGroupID $u20SourceAmiID $RELEASE_VERSION $int_awsBits_accessKeyId $int_awsBits_secretAccessKey
            - AMI_ID=$(cat ami.txt)
            - echo $AMI_ID
            - popd

      - name: build_ARM64_U20_reqKick
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-arm64-u20-reqKick"
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - 16
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reqKickGit_1
              trigger: false
            - name: pipelinesCoreVersion
          outputResources:
            - name: reqKickFS_arm64_U20_1
          inputSteps:
            - name: functional_tests_bash
        execution:
          onExecute:
            - pushd $res_reqKickGit_1_resourcePath/buildplane/reqKick
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reqKick-ARM64-Ubuntu_20.04-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/ARM64/Ubuntu_20.04/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reqKickTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reqKickGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_ARM64_U20_reports
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-arm64-u20-reports"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reportsGit_1
          outputResources:
            - name: reportsFS_arm64_U20_1
          inputSteps:
            - name: trigger_buildplane_builds
        execution:
          onStart:
            - | # TODO: remove this after images with node18 are published and the task is updated
              if [ -n "$(which node18)" ]; then
                ln -s "$(which node18)" /usr/local/bin/node16
              elif [ -n "$(which node16)" ]; then
                ln -s "$(which node16)" /usr/local/bin/node18
              fi
            - task: jfrog/setup-go@latest
              input:
                version: {{ .Values.goBuildVersion }}
          onExecute:
            - pushd $res_reportsGit_1_resourcePath/buildplane/reports
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reports-ARM64-Ubuntu_20.04-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/ARM64/Ubuntu_20.04/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reportsTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reportsGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_ARM64_U20_buildPlane_deb
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-arm64-u20-deb"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: nodeInitFS_1
            - name: ootbExtensionsFS_1
            - name: reqKickFS_arm64_U20_1
            - name: reportsFS_arm64_U20_1
            - name: buildGit_1
          outputResources:
            - name: buildPlaneDebFS_arm64_U20_1
        execution:
          onExecute:
            - pushd $res_buildGit_1_resourcePath/buildplane
            - RELEASE_VERSION=$(./normalizeReleaseVersion.sh ${version})
            - popd
            - pushd $res_buildGit_1_resourcePath/buildplane/build/deb/ARM64/Ubuntu_20.04
            - PKG_NAME="buildPlane-ARM64-Ubuntu_20.04-$RELEASE_VERSION"
            - mkdir -p bin
            - cp -r $res_reportsFS_arm64_U20_1_resourcePath/reports/reports-ARM64-Ubuntu_20.04-$RELEASE_VERSION.tar.gz bin/reports.tar.gz
            - cp -r $res_reqKickFS_arm64_U20_1_resourcePath/reqKick/reqKick-ARM64-Ubuntu_20.04-$RELEASE_VERSION.tar.gz bin/reqKick.tar.gz
            - cp -r $res_nodeInitFS_1_resourcePath/nodeInit/nodeInit-$RELEASE_VERSION.tar.gz bin/nodeInit.tar.gz
            - cp -r $res_ootbExtensionsFS_1_resourcePath/extensions/extensions-$RELEASE_VERSION.tar.gz bin/extensions.tar.gz
            - mkdir -p bin/jfrog
            - mkdir -p bin/jfrog2
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v1/${JFROG_CLI_VERSION}/jfrog-cli-linux-arm64/jfrog -L -O bin/jfrog/jfrog
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/${JFROG_CLI_2_VERSION}/jfrog-cli-linux-arm64/jf -L -O bin/jfrog2/jf
            - chmod +x bin/jfrog/jfrog
            - chmod +x bin/jfrog2/jf
            - ln -s jf bin/jfrog2/jfrog
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build.sh $PKG_NAME $RELEASE_VERSION
            - jfrog rt upload $res_buildGit_1_resourcePath/buildplane/bin/$PKG_NAME.deb $buildPlaneTarget/$PKG_NAME.deb --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_buildGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_C7_reports
        type: Bash
        configuration:
          environmentVariables:
            BUILD_NAME: "pipelines-c7-reports"
          nodePool: pipelines_c7_t3small
          runtime:
            type: image
            image:
              auto:
                language: go
                versions:
                  - "{{ .Values.goBuildVersion }}"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reportsGit_1
          outputResources:
            - name: reportsFS_x8664_C7_1
          inputSteps:
            - name: trigger_buildplane_builds
        execution:
          onExecute:
            - pushd $res_reportsGit_1_resourcePath/buildplane/reports
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reports-x86_64-CentOS_7-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/x86_64/CentOS_7/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reportsTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reportsGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_C7_reqKick
        type: Bash
        configuration:
          environmentVariables:
            BUILD_NAME: "pipelines-c7-reqKick"
          nodePool: pipelines_c7_t3small
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reqKickGit_1
              trigger: false
            - name: pipelinesCoreVersion
          outputResources:
            - name: reqKickFS_x8664_C7_1
          inputSteps:
            - name: functional_tests_bash
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - 16
        execution:
          onExecute:
            - pushd $res_reqKickGit_1_resourcePath/buildplane/reqKick
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reqKick-x86_64-CentOS_7-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/x86_64/CentOS_7/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reqKickTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reqKickGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_C7_buildPlane_rpm
        type: Bash
        configuration:
          environmentVariables:
            BUILD_NAME: "pipelines-c7-rpm"
          nodePool: pipelines_c7_t3small
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: nodeInitFS_1
            - name: reqKickFS_x8664_C7_1
            - name: reportsFS_x8664_C7_1
            - name: pipeFS_amd64_linux_1
            - name: ootbExtensionsFS_1
            - name: buildGit_1
          outputResources:
            - name: buildPlaneRpmFS_x8664_C7_1
        execution:
          onExecute:
            - pushd $res_buildGit_1_resourcePath/buildplane
            - RELEASE_VERSION=$(./normalizeReleaseVersion.sh ${version})
            - popd
            - pushd $res_buildGit_1_resourcePath/buildplane/build/rpm/x86_64/CentOS_7
            - mkdir -p bin
            - PKG_NAME="buildPlane-x86_64-CentOS_7-$RELEASE_VERSION"
            - cp -r $res_reportsFS_x8664_C7_1_resourcePath/reports/reports-x86_64-CentOS_7-$RELEASE_VERSION.tar.gz bin/reports.tar.gz
            - cp -r $res_reqKickFS_x8664_C7_1_resourcePath/reqKick/reqKick-x86_64-CentOS_7-$RELEASE_VERSION.tar.gz bin/reqKick.tar.gz
            - cp -r $res_nodeInitFS_1_resourcePath/nodeInit/nodeInit-$RELEASE_VERSION.tar.gz bin/nodeInit.tar.gz
            - cp -r $res_ootbExtensionsFS_1_resourcePath/extensions/extensions-$RELEASE_VERSION.tar.gz bin/extensions.tar.gz
            - mkdir -p bin/pipe
            - cp -r ${res_pipeFS_amd64_linux_1_resourcePath}/pipe-$RELEASE_VERSION-linux-amd64 bin/pipe/pipe
            - chmod +x bin/pipe/pipe
            - mkdir -p bin/jfrog
            - mkdir -p bin/jfrog2
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v1/${JFROG_CLI_VERSION}/jfrog-cli-linux-amd64/jfrog -L -O bin/jfrog/jfrog
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/${JFROG_CLI_2_VERSION}/jfrog-cli-linux-amd64/jf -L -O bin/jfrog2/jf
            - chmod +x bin/jfrog/jfrog
            - chmod +x bin/jfrog2/jf
            - ln -s jf bin/jfrog2/jfrog
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build.sh $PKG_NAME $RELEASE_VERSION
            - jfrog rt upload $res_buildGit_1_resourcePath/buildplane/bin/$PKG_NAME.rpm $buildPlaneTarget/$PKG_NAME.rpm --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_buildGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_RHEL7_reports
        type: Bash
        configuration:
          environmentVariables:
            BUILD_NAME: "pipelines-rhel7-reports"
          nodePool: pipelines_c7_t3small
          runtime:
            type: image
            image:
              auto:
                language: go
                versions:
                  - "{{ .Values.goBuildVersion }}"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reportsGit_1
          outputResources:
            - name: reportsFS_x8664_RHEL7_1
          inputSteps:
            - name: trigger_buildplane_builds
        execution:
          onExecute:
            - pushd $res_reportsGit_1_resourcePath/buildplane/reports
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reports-x86_64-RHEL_7-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/x86_64/RHEL_7/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reportsTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reportsGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_RHEL7_reqKick
        type: Bash
        configuration:
          environmentVariables:
            BUILD_NAME: "pipelines-rhel7-reports"
          nodePool: pipelines_c7_t3small
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reqKickGit_1
              trigger: false
            - name: pipelinesCoreVersion
          outputResources:
            - name: reqKickFS_x8664_RHEL7_1
          inputSteps:
            - name: functional_tests_bash
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - 16
        execution:
          onExecute:
            - pushd $res_reqKickGit_1_resourcePath/buildplane/reqKick
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reqKick-x86_64-RHEL_7-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/x86_64/RHEL_7/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reqKickTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reqKickGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_RHEL7_buildPlane_rpm
        type: Bash
        configuration:
          environmentVariables:
            BUILD_NAME: "pipelines-rhel7-rpm"
          nodePool: pipelines_c7_t3small
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: nodeInitFS_1
            - name: reqKickFS_x8664_RHEL7_1
            - name: reportsFS_x8664_RHEL7_1
            - name: pipeFS_amd64_linux_1
            - name: ootbExtensionsFS_1
            - name: buildGit_1
          outputResources:
            - name: buildPlaneRpmFS_x8664_RHEL7_1
        execution:
          onExecute:
            - pushd $res_buildGit_1_resourcePath/buildplane
            - RELEASE_VERSION=$(./normalizeReleaseVersion.sh ${version})
            - popd
            - pushd $res_buildGit_1_resourcePath/buildplane/build/rpm/x86_64/RHEL_7
            - mkdir -p bin
            - PKG_NAME="buildPlane-x86_64-RHEL_7-$RELEASE_VERSION"
            - cp -r $res_reportsFS_x8664_RHEL7_1_resourcePath/reports/reports-x86_64-RHEL_7-$RELEASE_VERSION.tar.gz bin/reports.tar.gz
            - cp -r $res_reqKickFS_x8664_RHEL7_1_resourcePath/reqKick/reqKick-x86_64-RHEL_7-$RELEASE_VERSION.tar.gz bin/reqKick.tar.gz
            - cp -r $res_nodeInitFS_1_resourcePath/nodeInit/nodeInit-$RELEASE_VERSION.tar.gz bin/nodeInit.tar.gz
            - cp -r $res_ootbExtensionsFS_1_resourcePath/extensions/extensions-$RELEASE_VERSION.tar.gz bin/extensions.tar.gz
            - mkdir -p bin/pipe
            - cp -r ${res_pipeFS_amd64_linux_1_resourcePath}/pipe-$RELEASE_VERSION-linux-amd64 bin/pipe/pipe
            - chmod +x bin/pipe/pipe
            - mkdir -p bin/jfrog
            - mkdir -p bin/jfrog2
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v1/${JFROG_CLI_VERSION}/jfrog-cli-linux-amd64/jfrog -L -O bin/jfrog/jfrog
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/${JFROG_CLI_2_VERSION}/jfrog-cli-linux-amd64/jf -L -O bin/jfrog2/jf
            - chmod +x bin/jfrog/jfrog
            - chmod +x bin/jfrog2/jf
            - ln -s jf bin/jfrog2/jfrog
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build.sh $PKG_NAME $RELEASE_VERSION
            - jfrog rt upload $res_buildGit_1_resourcePath/buildplane/bin/$PKG_NAME.rpm $buildPlaneTarget/$PKG_NAME.rpm --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_buildGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_RHEL8_reports
        type: Bash
        configuration:
          environmentVariables:
            BUILD_NAME: "pipelines-rhel8-reports"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reportsGit_1
          outputResources:
            - name: reportsFS_x8664_RHEL8_1
          inputSteps:
            - name: trigger_buildplane_builds
        execution:
          onStart:
            - | # TODO: remove this after images with node18 are published and the task is updated
              if [ -n "$(which node18)" ]; then
                ln -s "$(which node18)" /usr/local/bin/node16
              elif [ -n "$(which node16)" ]; then
                ln -s "$(which node16)" /usr/local/bin/node18
              fi
            - task: jfrog/setup-go@latest
              input:
                version: {{ .Values.goBuildVersion }}
          onExecute:
            - pushd $res_reportsGit_1_resourcePath/buildplane/reports
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reports-x86_64-RHEL_8-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/x86_64/RHEL_8/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reportsTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reportsGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_RHEL8_reqKick
        type: Bash
        configuration:
          nodePool: pipelines_c7_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-rhel8-reqkick"
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - 16
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reqKickGit_1
              trigger: false
            - name: pipelinesCoreVersion
          outputResources:
            - name: reqKickFS_x8664_RHEL8_1
        execution:
          onExecute:
            - pushd $res_reqKickGit_1_resourcePath/buildplane/reqKick
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reqKick-x86_64-RHEL_8-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/x86_64/RHEL_8/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reqKickTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reqKickGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_RHEL8_buildPlane_rpm
        type: Bash
        configuration:
          nodePool: pipelines_c7_t3small
          runtime:
            type: image
            image:
              custom:
                name: entplus.jfrog.io/pipelines-docker-dev-local/pipelines-cs8
                tag: "latest"
                registry: entplus_deployer
                sourceRepository: jfrog-docker
          environmentVariables:
            BUILD_NAME: "pipelines-rhel8-rpm"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: nodeInitFS_1
            - name: reqKickFS_x8664_RHEL8_1
            - name: reportsFS_x8664_RHEL8_1
            - name: pipeFS_amd64_linux_1
            - name: ootbExtensionsFS_1
            - name: buildGit_1
          outputResources:
            - name: buildPlaneRpmFS_x8664_RHEL8_1
        execution:
          onExecute:
            - pushd $res_buildGit_1_resourcePath/buildplane
            - RELEASE_VERSION=$(./normalizeReleaseVersion.sh ${version})
            - popd
            - pushd $res_buildGit_1_resourcePath/buildplane/build/rpm/x86_64/RHEL_8
            - mkdir -p bin
            - PKG_NAME="buildPlane-x86_64-RHEL_8-$RELEASE_VERSION"
            - cp -r $res_reportsFS_x8664_RHEL8_1_resourcePath/reports/reports-x86_64-RHEL_8-$RELEASE_VERSION.tar.gz bin/reports.tar.gz
            - cp -r $res_reqKickFS_x8664_RHEL8_1_resourcePath/reqKick/reqKick-x86_64-RHEL_8-$RELEASE_VERSION.tar.gz bin/reqKick.tar.gz
            - cp -r $res_nodeInitFS_1_resourcePath/nodeInit/nodeInit-$RELEASE_VERSION.tar.gz bin/nodeInit.tar.gz
            - cp -r $res_ootbExtensionsFS_1_resourcePath/extensions/extensions-$RELEASE_VERSION.tar.gz bin/extensions.tar.gz
            - mkdir -p bin/pipe
            - cp -r ${res_pipeFS_amd64_linux_1_resourcePath}/pipe-$RELEASE_VERSION-linux-amd64 bin/pipe/pipe
            - chmod +x bin/pipe/pipe
            - mkdir -p bin/jfrog
            - mkdir -p bin/jfrog2
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v1/${JFROG_CLI_VERSION}/jfrog-cli-linux-amd64/jfrog -L -O bin/jfrog/jfrog
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/${JFROG_CLI_2_VERSION}/jfrog-cli-linux-amd64/jf -L -O bin/jfrog2/jf
            - chmod +x bin/jfrog/jfrog
            - chmod +x bin/jfrog2/jf
            - ln -s jf bin/jfrog2/jfrog
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build.sh $PKG_NAME $RELEASE_VERSION
            - jfrog rt upload $res_buildGit_1_resourcePath/buildplane/bin/$PKG_NAME.rpm $buildPlaneTarget/$PKG_NAME.rpm --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_buildGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_AmazonLinux2_reports
        type: Bash
        configuration:
          environmentVariables:
            BUILD_NAME: "pipelines-AmazonLinux2-reports"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reportsGit_1
          outputResources:
            - name: reportsFS_x86_64_AmazonLinux2_1
          inputSteps:
            - name: trigger_buildplane_builds
        execution:
          onStart:
            - | # TODO: remove this after images with node18 are published and the task is updated
              if [ -n "$(which node18)" ]; then
                ln -s "$(which node18)" /usr/local/bin/node16
              elif [ -n "$(which node16)" ]; then
                ln -s "$(which node16)" /usr/local/bin/node18
              fi
            - task: jfrog/setup-go@latest
              input:
                version: {{ .Values.goBuildVersion }}
          onExecute:
            - pushd $res_reportsGit_1_resourcePath/buildplane/reports
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reports-x86_64-AmazonLinux_2-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/x86_64/AmazonLinux_2/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reportsTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reportsGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"
          onFailure:
            - source ${res_reportsGit_1_resourcePath}/build/ci/pipelines_build.sh
            - build_status_notification

      - name: build_AmazonLinux2_reqKick
        type: Bash
        configuration:
          nodePool: pipelines_c7_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-AmazonLinux2-reqkick"
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - 16
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reqKickGit_1
              trigger: false
            - name: pipelinesCoreVersion
          outputResources:
            - name: reqKickFS_x86_64_AmazonLinux2_1
        execution:
          onExecute:
            - pushd $res_reqKickGit_1_resourcePath/buildplane/reqKick
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reqKick-x86_64-AmazonLinux_2-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/x86_64/AmazonLinux_2/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reqKickTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reqKickGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"
          onFailure:
            - source ${res_reqKickGit_1_resourcePath}/build/ci/pipelines_build.sh
            - build_status_notification

      - name: build_AmazonLinux2_buildPlane_rpm
        type: Bash
        configuration:
          nodePool: pipelines_c7_t3small
          runtime:
            type: image
            image:
              custom:
                name: entplus.jfrog.io/pipelines-docker-dev-local/pipelines-cs8
                tag: "latest"
                registry: entplus_deployer
                sourceRepository: jfrog-docker
          environmentVariables:
            BUILD_NAME: "pipelines-AmazonLinux2-rpm"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: nodeInitFS_1
            - name: reqKickFS_x86_64_AmazonLinux2_1
            - name: reportsFS_x86_64_AmazonLinux2_1
            - name: pipeFS_amd64_linux_1
            - name: ootbExtensionsFS_1
            - name: buildGit_1
          outputResources:
            - name: buildPlaneRpmFS_x86_64_AmazonLinux2_1
        execution:
          onExecute:
            - pushd $res_buildGit_1_resourcePath/buildplane
            - RELEASE_VERSION=$(./normalizeReleaseVersion.sh ${version})
            - popd
            - pushd $res_buildGit_1_resourcePath/buildplane/build/rpm/x86_64/AmazonLinux_2
            - mkdir -p bin
            - PKG_NAME="buildPlane-x86_64-AmazonLinux_2-$RELEASE_VERSION"
            - cp -r $res_reportsFS_x86_64_AmazonLinux2_1_resourcePath/reports/reports-x86_64-AmazonLinux_2-$RELEASE_VERSION.tar.gz bin/reports.tar.gz
            - cp -r $res_reqKickFS_x86_64_AmazonLinux2_1_resourcePath/reqKick/reqKick-x86_64-AmazonLinux_2-$RELEASE_VERSION.tar.gz bin/reqKick.tar.gz
            - cp -r $res_nodeInitFS_1_resourcePath/nodeInit/nodeInit-$RELEASE_VERSION.tar.gz bin/nodeInit.tar.gz
            - cp -r $res_ootbExtensionsFS_1_resourcePath/extensions/extensions-$RELEASE_VERSION.tar.gz bin/extensions.tar.gz
            - mkdir -p bin/pipe
            - cp -r ${res_pipeFS_amd64_linux_1_resourcePath}/pipe-$RELEASE_VERSION-linux-amd64 bin/pipe/pipe
            - chmod +x bin/pipe/pipe
            - mkdir -p bin/jfrog
            - mkdir -p bin/jfrog2
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v1/${JFROG_CLI_VERSION}/jfrog-cli-linux-amd64/jfrog -L -O bin/jfrog/jfrog
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/${JFROG_CLI_2_VERSION}/jfrog-cli-linux-amd64/jf -L -O bin/jfrog2/jf
            - chmod +x bin/jfrog/jfrog
            - chmod +x bin/jfrog2/jf
            - ln -s jf bin/jfrog2/jfrog
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build.sh $PKG_NAME $RELEASE_VERSION
            - jfrog rt upload $res_buildGit_1_resourcePath/buildplane/bin/$PKG_NAME.rpm $buildPlaneTarget/$PKG_NAME.rpm --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_buildGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"
          onFailure:
            - source ${res_buildGit_1_resourcePath}/build/ci/pipelines_build.sh
            - build_status_notification

      - name: build_W19_reports
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-w19-reports"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reportsGit_1
          outputResources:
            - name: reportsFS_x8664_W19_1
          inputSteps:
            - name: trigger_buildplane_builds
        execution:
          onStart:
            - | # TODO: remove this after images with node18 are published and the task is updated
              if [ -n "$(which node18)" ]; then
                ln -s "$(which node18)" /usr/local/bin/node16
              elif [ -n "$(which node16)" ]; then
                ln -s "$(which node16)" /usr/local/bin/node18
              fi
            - task: jfrog/setup-go@latest
              input:
                version: {{ .Values.goBuildVersion }}
          onExecute:
            - pushd $res_reportsGit_1_resourcePath/buildplane/reports
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reports-x86_64-WindowsServer_2019-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/x86_64/WindowsServer_2019/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reportsTarget/$TAR_FILENAME --build-name ${BUILD_NAME} --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reportsGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_W19_reqKick
        type: PowerShell
        configuration:
          environmentVariables:
            BUILD_NAME: "pipelines-w19-reqKick"
            http_proxy: ''
            https_proxy: ''
            HTTPS_PROXY: ''
            HTTP_PROXY: ''
          nodePool: pipelines_w19
          affinityGroup: functional_tests_powershell
          runtime:
            type: host
          integrations:
            - name: entplus_deployer
          inputResources:
            - name: reqKickGit_1
              trigger: false
            - name: pipelinesCoreVersion
          outputResources:
            - name: reqKickFS_x8664_W19_1
          inputSteps:
            - name: functional_tests_powershell
              status:
                - success
                - skipped
        execution:
          onExecute:
            - Push-Location ${res_reqKickGit_1_resourcePath}/buildplane/reqKick
            - $global:RELEASE_VERSION = (../normalizeReleaseVersion.ps1 ${version} )
            - $global:TAR_FILENAME = "reqKick-x86_64-WindowsServer_2019-${RELEASE_VERSION}.tar.gz"
            - ./build/tar/x86_64/WindowsServer_2019/build.ps1 $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME ${reqKickTarget}/${TAR_FILENAME} --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - Pop-Location

      - name: build_W19_buildPlane_tar
        type: PowerShell
        configuration:
          environmentVariables:
            BUILD_NAME: "pipelines-w19-tar"
          nodePool: pipelines_w19
          integrations:
            - name: entplus_deployer
          inputResources:
            - name: buildGit_1
            - name: nodeInitFS_1
            - name: ootbExtensionsFS_1
            - name: reqKickFS_x8664_W19_1
            - name: reportsFS_x8664_W19_1
            - name: pipeFS_amd64_windows_1
          outputResources:
            - name: buildPlaneTarFS_x8664_W19_1
        execution:
          onExecute:
            - Push-Location ${res_buildGit_1_resourcePath}/buildplane
            - $global:RELEASE_VERSION = (.\normalizeReleaseVersion.ps1 ${version})
            - Pop-Location
            - Push-Location ${res_buildGit_1_resourcePath}/buildplane/build/tar/x86_64/WindowsServer_2019
            - $global:PKG_NAME = "buildPlane-x86_64-WindowsServer_2019-${RELEASE_VERSION}.tar.gz"
            - New-Item -Path "bin" -ItemType Directory -Force
            - New-Item -Path "bin/reqKick" -ItemType Directory -Force
            - New-Item -Path "bin/nodeInit" -ItemType Directory -Force
            - New-Item -Path "bin/reports" -ItemType Directory -Force
            - New-Item -Path "bin/pipe" -ItemType Directory -Force
            - New-Item -Path "bin/extensions" -ItemType Directory -Force
            - New-Item -Path "bin/jfrog" -ItemType Directory -Force
            - New-Item -Path "bin/jfrog2" -ItemType Directory -Force
            - tar -xf ${res_reportsFS_x8664_W19_1_resourcePath}/reports/reports-x86_64-WindowsServer_2019-${RELEASE_VERSION}.tar.gz -C bin/reports
            - tar -xf ${res_reqKickFS_x8664_W19_1_resourcePath}/reqKick/reqKick-x86_64-WindowsServer_2019-${RELEASE_VERSION}.tar.gz -C bin/reqKick
            - tar -xf ${res_nodeInitFS_1_resourcePath}/nodeInit/nodeInit-${RELEASE_VERSION}.tar.gz -C bin/nodeInit
            - tar -xf ${res_ootbExtensionsFS_1_resourcePath}/extensions/extensions-$RELEASE_VERSION.tar.gz -C bin/extensions
            - copy-item ${res_pipeFS_amd64_windows_1_resourcePath}/pipe-$RELEASE_VERSION-windows-amd64 bin/pipe/pipe.exe
            - Invoke-WebRequest https://releases.jfrog.io/artifactory/jfrog-cli/v1/${JFROG_CLI_VERSION}/jfrog-cli-windows-amd64/jfrog.exe -Method Get -TimeoutSec 60 -OutFile .\bin\jfrog\jfrog.exe -UseBasicParsing
            - Invoke-WebRequest https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/${JFROG_CLI_2_VERSION}/jfrog-cli-windows-amd64/jf.exe -Method Get -TimeoutSec 60 -OutFile .\bin\jfrog2\jf.exe -UseBasicParsing
            - cmd.exe /c "mklink /h `"${res_buildGit_1_resourcePath}/buildplane\build\tar\x86_64\WindowsServer_2019\bin\jfrog2\jfrog.exe`" `"${res_buildGit_1_resourcePath}/buildplane\build\tar\x86_64\WindowsServer_2019\bin\jfrog2\jf.exe`""
            - ./build.ps1 $PKG_NAME $RELEASE_VERSION
            - jfrog rt upload ${res_buildGit_1_resourcePath}/buildplane/bin/${PKG_NAME} ${buildPlaneTarget}/${PKG_NAME} --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"     
            - Pop-Location

      - name: build_MacOS13_reports
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-MacOS13-reports"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reportsGit_1
          outputResources:
            - name: reportsFS_x8664_MacOS13_1
          inputSteps:
            - name: trigger_buildplane_builds
        execution:
          onStart:
            - | # TODO: remove this after images with node18 are published and the task is updated
              if [ -n "$(which node18)" ]; then
                ln -s "$(which node18)" /usr/local/bin/node16
              elif [ -n "$(which node16)" ]; then
                ln -s "$(which node16)" /usr/local/bin/node18
              fi
            - task: jfrog/setup-go@latest
              input:
                version: {{ .Values.goBuildVersion }}
          onExecute:
            - pushd $res_reportsGit_1_resourcePath/buildplane/reports
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reports-x86_64-MacOS_13.5-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/x86_64/MacOS_13.5/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reportsTarget/$TAR_FILENAME --build-name ${BUILD_NAME} --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reportsGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_MacOS13_reqKick
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-MacOS13-reqKick"
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - 16
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reqKickGit_1
              trigger: false
            - name: pipelinesCoreVersion
          outputResources:
            - name: reqKickFS_x8664_MacOS13_1
          inputSteps:
            - name: functional_tests_bash
        execution:
          onExecute:
            - pushd $res_reqKickGit_1_resourcePath/buildplane/reqKick
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reqKick-x86_64-MacOS_13.5-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/x86_64/MacOS_13.5/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reqKickTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reqKickGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_MacOS13_buildPlane_tar
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-MacOS13-tar"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: buildGit_1
            - name: nodeInitFS_1
            - name: ootbExtensionsFS_1
            - name: reqKickFS_x8664_MacOS13_1
            - name: reportsFS_x8664_MacOS13_1
            - name: pipeFS_amd64_darwin_1
          outputResources:
            - name: buildPlaneTarFS_x8664_MacOS13_1
        execution:
          onExecute:
            - pushd ${res_buildGit_1_resourcePath}/buildplane
            - RELEASE_VERSION=$(./normalizeReleaseVersion.sh ${version})
            - popd
            - pushd ${res_buildGit_1_resourcePath}/buildplane/build/tar/x86_64/MacOS_13.5
            - PKG_NAME="buildPlane-x86_64-MacOS_13.5-${RELEASE_VERSION}.tar.gz"
            - mkdir -p "bin/reqExec"
            - mkdir -p "bin/reqKick"
            - mkdir -p "bin/nodeInit"
            - mkdir -p "bin/reports"
            - mkdir -p "bin/pipe"
            - mkdir -p "bin/extensions"
            - mkdir -p "bin/jfrog"
            - mkdir -p "bin/jfrog2"
            - tar -xf ${res_reportsFS_x8664_MacOS13_1_resourcePath}/reports/reports-x86_64-MacOS_13.5-${RELEASE_VERSION}.tar.gz -C bin/reports
            - tar -xf ${res_reqKickFS_x8664_MacOS13_1_resourcePath}/reqKick/reqKick-x86_64-MacOS_13.5-${RELEASE_VERSION}.tar.gz -C bin/reqKick
            - tar -xf ${res_nodeInitFS_1_resourcePath}/nodeInit/nodeInit-${RELEASE_VERSION}.tar.gz -C bin/nodeInit
            - tar -xf ${res_ootbExtensionsFS_1_resourcePath}/extensions/extensions-$RELEASE_VERSION.tar.gz -C bin/extensions
            - cp ${res_pipeFS_amd64_darwin_1_resourcePath}/pipe-$RELEASE_VERSION-darwin-amd64 bin/pipe/pipe
            - chmod +x bin/pipe/pipe
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v1/${JFROG_CLI_VERSION}/jfrog-cli-mac-386/jfrog -L -O bin/jfrog/jfrog
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/${JFROG_CLI_2_VERSION}/jfrog-cli-mac-386/jf -L -O bin/jfrog2/jf
            - chmod +x bin/jfrog/jfrog
            - chmod +x bin/jfrog2/jf
            - ln -s jf bin/jfrog2/jfrog
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build.sh $PKG_NAME $RELEASE_VERSION
            - jfrog rt upload ${res_buildGit_1_resourcePath}/buildplane/bin/${PKG_NAME} ${buildPlaneTarget}/${PKG_NAME} --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_buildGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_MacOS12_reports
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-macOS12-reports"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reportsGit_1
          outputResources:
            - name: reportsFS_arm64_MacOS12_1
          inputSteps:
            - name: trigger_buildplane_builds
        execution:
          onStart:
            - | # TODO: remove this after images with node18 are published and the task is updated
              if [ -n "$(which node18)" ]; then
                ln -s "$(which node18)" /usr/local/bin/node16
              elif [ -n "$(which node16)" ]; then
                ln -s "$(which node16)" /usr/local/bin/node18
              fi
            - task: jfrog/setup-go@latest
              input:
                version: {{ .Values.goBuildVersion }}
          onExecute:
            - pushd $res_reportsGit_1_resourcePath/buildplane/reports
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reports-ARM64-MacOS_12-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/ARM64/MacOS_12/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reportsTarget/$TAR_FILENAME --build-name ${BUILD_NAME} --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reportsGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_MacOS12_reqKick
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-macOS12-reqKick"
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - 16
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: reqKickGit_1
              trigger: false
            - name: pipelinesCoreVersion
          outputResources:
            - name: reqKickFS_arm64_MacOS12_1
          inputSteps:
            - name: functional_tests_bash
        execution:
          onExecute:
            - pushd $res_reqKickGit_1_resourcePath/buildplane/reqKick
            - RELEASE_VERSION=$( ../normalizeReleaseVersion.sh ${version} )
            - TAR_FILENAME="reqKick-ARM64-MacOS_12-$RELEASE_VERSION.tar.gz"
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build/tar/ARM64/MacOS_12/build.sh $TAR_FILENAME
            - jfrog rt upload bin/$TAR_FILENAME $reqKickTarget/$TAR_FILENAME --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_reqKickGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_MacOS12_buildPlane_tar
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-macOS12-tar"
          integrations:
            - name: entplus_deployer
            - name: entplus_jfrog_io_docker
          inputResources:
            - name: buildGit_1
            - name: nodeInitFS_1
            - name: ootbExtensionsFS_1
            - name: reqKickFS_arm64_MacOS12_1
            - name: reportsFS_arm64_MacOS12_1
            - name: pipeFS_arm64_darwin_1
          outputResources:
            - name: buildPlaneTarFS_arm64_MacOS12_1
        execution:
          onExecute:
            - pushd ${res_buildGit_1_resourcePath}/buildplane
            - RELEASE_VERSION=$(./normalizeReleaseVersion.sh ${version})
            - popd
            - pushd ${res_buildGit_1_resourcePath}/buildplane/build/tar/ARM64/MacOS_12
            - PKG_NAME="buildPlane-ARM64-MacOS_12-${RELEASE_VERSION}.tar.gz"
            - mkdir -p "bin/reqExec"
            - mkdir -p "bin/reqKick"
            - mkdir -p "bin/nodeInit"
            - mkdir -p "bin/reports"
            - mkdir -p "bin/pipe"
            - mkdir -p "bin/extensions"
            - mkdir -p "bin/jfrog"
            - mkdir -p "bin/jfrog2"
            - tar -xf ${res_reportsFS_arm64_MacOS12_1_resourcePath}/reports/reports-ARM64-MacOS_12-${RELEASE_VERSION}.tar.gz -C bin/reports
            - tar -xf ${res_reqKickFS_arm64_MacOS12_1_resourcePath}/reqKick/reqKick-ARM64-MacOS_12-${RELEASE_VERSION}.tar.gz -C bin/reqKick
            - tar -xf ${res_nodeInitFS_1_resourcePath}/nodeInit/nodeInit-${RELEASE_VERSION}.tar.gz -C bin/nodeInit
            - tar -xf ${res_ootbExtensionsFS_1_resourcePath}/extensions/extensions-$RELEASE_VERSION.tar.gz -C bin/extensions
            - cp ${res_pipeFS_arm64_darwin_1_resourcePath}/pipe-$RELEASE_VERSION-darwin-arm64 bin/pipe/pipe
            - chmod +x bin/pipe/pipe
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v1/${JFROG_CLI_VERSION}/jfrog-cli-mac-arm64/jfrog -L -O bin/jfrog/jfrog
            - wget -nv https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/${JFROG_CLI_2_VERSION}/jfrog-cli-mac-arm64/jf -L -O bin/jfrog2/jf
            - chmod +x bin/jfrog/jfrog
            - chmod +x bin/jfrog2/jf
            - ln -s jf bin/jfrog2/jfrog
            - export PIPELINES_CORE_VERSION="$PIPELINES_CORE_VERSION" && ./build.sh $PKG_NAME $RELEASE_VERSION
            - jfrog rt upload ${res_buildGit_1_resourcePath}/buildplane/bin/${PKG_NAME} ${buildPlaneTarget}/${PKG_NAME} --build-name ${BUILD_NAME}  --build-number ${run_id} --target-props "vcs.branch=${version}"
            - jfrog rt build-collect-env ${BUILD_NAME} ${run_id}
            - jfrog rt build-add-git ${BUILD_NAME} ${run_id}
            - jfrog rt build-publish ${BUILD_NAME} ${run_id}
            - popd
            - source "${res_buildGit_1_resourcePath}/build/ci/xray_violation_handler.sh"
            - run_xray_security_scan || echo "failed to run xray scan"

      - name: build_pipe
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            BUILD_NAME: "pipelines-pipe"
          affinityGroup: pipe
          integrations:
            - name: entplus_deployer
          inputResources:
            - name: pipeGit_1
          inputSteps:
            - name: trigger_buildplane_builds
          outputResources:
            - name: pipeFS_arm64_darwin_1
            - name: pipeFS_amd64_darwin_1
            - name: pipeFS_amd64_linux_1
            - name: pipeFS_arm64_linux_1
            - name: pipeFS_amd64_windows_1
        execution:
          onStart:
            - | # TODO: remove this after images with node18 are published and the task is updated
              if [ -n "$(which node18)" ]; then
                ln -s "$(which node18)" /usr/local/bin/node16
              elif [ -n "$(which node16)" ]; then
                ln -s "$(which node16)" /usr/local/bin/node18
              fi
            - task: jfrog/setup-go@latest
              input:
                version: {{ .Values.goBuildVersion }}
          onExecute:
            - pushd $res_pipeGit_1_resourcePath/buildplane
            - add_run_variables RELEASE_VERSION=$( ./normalizeReleaseVersion.sh {{gitBranch}} )
            - pushd pipe
            - go version
            - echo "Release version is ${RELEASE_VERSION}"
            - golangci-lint run || true
            - make ARGS="-ldflags \"-X main.Version='$RELEASE_VERSION'\"" do-all
            - jfrog rt upload "bin/pipe-${RELEASE_VERSION}-(*)" $pipeTarget/ --flat --build-name ${BUILD_NAME} --build-number ${run_id} --target-props "vcs.branch={{gitBranch}}"
            - jfrog rt build-collect-env
            - jfrog rt build-add-git
            - jfrog rt build-publish
            - |
              if [ $XRAY_ENABLED = "true" ]; then  jfrog rt build-scan --project=pipe --fail=${XRAY_FAIL_PIPELINES} ; 
              fi
            - popd

      - name: test_pipe_powershell
        type: PowerShell
        configuration:
          affinityGroup: functional_tests_powershell
          nodePool: pipelines_w19
          integrations:
            - name: entplus_deployer
          inputResources:
            - name: pipeGit_1
          inputSteps:
            - name: build_pipe
            - name: setup_functional_tests_powershell
        execution:
          onStart:
            - task: jfrog/setup-go@latest
              input:
                version: {{ .Values.goBuildVersion }}
            - restore_run_files controlplane_1 ./controlplane_1
          onExecute:
            - Push-Location ${res_pipeGit_1_resourcePath}/buildplane/pipe
            - go version
            - go test -v --cover ./...
            - Pop-Location

      - name: build_core
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          affinityGroup: core
          integrations:
            - name: entplus_deployer
          inputSteps:
            - name: trigger_buildplane_builds
          inputResources:
            - name: coreGit_1
        execution:
          onStart:
            - pushd $res_coreGit_1_resourcePath
            - npm config set registry ${npmRegistry}
            - curl -u"${int_entplus_deployer_user}":"${int_entplus_deployer_apikey}" "${int_entplus_deployer_url}/api/npm/auth" >> ~/.npmrc
            - npm config fix
            - npm config list
            - npm config set progress false && npm ci -ddd --no-audit --no-fund --ignore-scripts
            - npm run build:packages # we should using nx to identify changes and use https://nx.dev/ci/monorepo-ci-gitlab
            - popd

      - name: test_core
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          affinityGroup: core
          integrations:
            - name: entplus_deployer
          inputResources:
            - name: coreGit_1
          inputSteps:
            - name: build_core
        execution:
          onStart:
            - pushd $res_coreGit_1_resourcePath
            - npm config set registry "https://entplus.jfrog.io/artifactory/api/npm/npm-virtual"
            - curl -u"${int_entplus_deployer_user}":"${int_entplus_deployer_apikey}" "https://entplus.jfrog.io/api/npm/auth" >> ~/.npmrc
            - npm config fix
            - npm config set progress false && npm ci -ddd
            - npm run build:packages
            - popd
            - pushd $res_coreGit_1_resourcePath/packages/core
            - npm run test
            - popd

      - name: publish_core
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          affinityGroup: core
          integrations:
            - name: entplus_deployer
          inputResources:
            - name: coreGit_1
          inputSteps:
            - name: test_core
          outputResources:
            - name: pipelinesCoreVersion
        execution:
          onStart:
            - pushd $res_coreGit_1_resourcePath
            - npm config set registry "https://entplus.jfrog.io/artifactory/api/npm/npm-virtual"
            - curl -u"${int_entplus_deployer_user}":"${int_entplus_deployer_apikey}" "https://entplus.jfrog.io/api/npm/auth" >> ~/.npmrc
            - npm config fix
            - popd
            - pushd $res_coreGit_1_resourcePath/buildplane/scripts
            - add_run_variables PIPELINES_CORE_VERSION=$(./getPipelinesCorePublishVersion.sh ${version})
            - popd
            - pushd $res_coreGit_1_resourcePath/packages/core
            - echo "publishing pipelines-core version $PIPELINES_CORE_VERSION"
            - npm version $PIPELINES_CORE_VERSION
            - jfrog npm-config --repo-deploy npm-virtual
            - jfrog npm publish
{{ if eq "master" "{{gitBranch}}" }}
            - npm version 0.0.0
            - jfrog npm publish
{{ end }}
            - popd
          onSuccess:
            - write_output pipelinesCoreVersion "PIPELINES_CORE_VERSION=$PIPELINES_CORE_VERSION"

      {{ if hasPrefix "release" "{{gitBranch}}" }}
      - name: promote_images
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          environmentVariables:
            expectedImageCount: 18
          integrations:
            - name: entplus_deployer
          inputResources:
            - name: dindGit_1
              trigger: false
          inputSteps:
            - name: reqkick_scan
        execution:
          onStart:
            - pushd $res_dindGit_1_resourcePath/buildplane

      - name: promote_dind
        type: PromoteBuild
        configuration:
          nodePool: pipelines_u20_t3small
          targetRepository: pipelines-docker-release-local
          status: promoted
          copy: false
          inputSteps:
            - name: promote_images
          inputResources:
            - name: dindImageBI_1
              trigger: false
          outputResources:
            - name: dindPromotedImageBI_1
        execution:
          onStart:
            - add_run_variables build_version=${res_dindImageBI_1_buildNumber}

      - name: promote_reqkick
        type: PromoteBuild
        configuration:
          nodePool: pipelines_u20_t3small
          targetRepository: pipelines-docker-release-local
          status: promoted
          copy: false
          inputSteps:
            - name: promote_images
          inputResources:
            - name: reqkickImageBI_1
              trigger: false
          outputResources:
            - name: reqkickPromotedImageBI_1
        execution:
          onStart:
            - add_run_variables build_version=${res_reqkickImageBI_1_buildNumber}

      - name: create_reqkick_releaseBundle
        type: CreateReleaseBundle
        configuration:
          nodePool: pipelines_u20_t3small
          releaseBundleName: ${res_reqkickRB_1_name}
          releaseBundleVersion: ${build_version}
          dryRun: false
          sign: true
          failOnValidate: false
          description: "Used for distributing pipelines reqkick images"
          inputSteps:
            - name: promote_reqkick
          inputResources:
            - name: reqkickAQL_1
          outputResources:
            - name: reqkickRB_1
        execution:
          onStart:
            - write_output reqkickRB_1 "version=$build_version"

      - name: create_dind_releaseBundle
        type: CreateReleaseBundle
        configuration:
          nodePool: pipelines_u20_t3small
          releaseBundleName: ${res_dindRB_1_name}
          releaseBundleVersion: ${build_version}
          dryRun: false
          sign: true
          failOnValidate: false
          description: "Used for distributing pipelines dind images"
          inputSteps:
            - name: promote_dind
          inputResources:
            - name: dindAQL_1
          outputResources:
            - name: dindRB_1
        execution:
          onStart:
            - write_output dindRB_1 "version=$build_version"

      - name: Add_version_variable
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
          inputResources:
            - name: controlplane_1
          inputSteps:
            - name: promote_images                 
        execution:
          onStart:
            - echo "Adding branch version in to variable"
            - pushd $res_controlplane_1_resourcePath/buildplane
            - VERSION=$(./normalizeReleaseVersion.sh ${version})
            - add_pipeline_variables RELEASE_VERSION="$VERSION"
            - echo $RELEASE_VERSION
            - popd          

      - name: create_artifact_releaseBundle
        type: CreateReleaseBundle
        configuration:
          nodePool: pipelines_u20_t3small
          releaseBundleName: ${res_artifactsRelease_name}
          releaseBundleVersion: ${RELEASE_VERSION}-${run_number}
          dryRun: false
          sign: true
          failOnValidate: false
          description: "Used for distributing pipelines reqkick artifacts"
          inputSteps:
            - name: Add_version_variable
          releaseNotes:
            syntax: markdown
            content: "releasing artifacts"           
          inputResources:
            - name: arifactAQL
          outputResources:
            - name: artifactsRelease
        execution:
          onStart:
            - write_output artifactsRelease "version=${run_number}"           

      - name: dind_releaseBundle
        type: DistributeReleaseBundle
        configuration:
          nodePool: pipelines_u20_t3small
          dryRun: false
          inputResources:
            - name: dindRB_1
            - name: releasesDR_1

      - name: reqkick_releaseBundle
        type: DistributeReleaseBundle
        configuration:
          dryRun: false
          inputResources:
            - name: reqkickRB_1
            - name: releasesDR_1

      - name: artifacts_releaseBundle
        type: DistributeReleaseBundle
        configuration:
          dryRun: false
          inputResources:
            - name: artifactsRelease
            - name: releasesDR_1

  - name: buildplane_saas_infra_image2
    configuration:
      environmentVariables:
        readOnly:
          version: "{{gitBranch}}"
          rtRegistry: "pipelines-docker"
          buildPlaneImageName: "docker.jfrog.io/jfrog/pipelines-buildplane"
          buildInfoName: "pipelines-build-plane-milestone"
    steps:
      - name: buildplane_img_build
        type: Bash
        configuration:
          integrations:
            - name: entplus_deployer
            - name: dockerDotJfrog
          inputResources:
            - name: infraGit_1
        execution:
          onStart:
            - pushd $res_infraGit_1_resourcePath/buildplane
            - RELEASE_VERSION=$( ./normalizeReleaseVersion.sh ${version} )
            - add_run_variables RELEASE_VERSION=${RELEASE_VERSION}
            - echo "Release version is ${RELEASE_VERSION}"
            - docker build --build-arg REPO_USER=$int_entplus_deployer_user --build-arg REPO_PASS=$int_entplus_deployer_apikey -t=$buildPlaneImageName:$RELEASE_VERSION -f=build/docker/x86_64/Ubuntu_18.04/Dockerfile .
            - jfrog rt docker-push $buildPlaneImageName:$RELEASE_VERSION $rtRegistry --build-name=${buildInfoName} --build-number=${run_id}
            - jfrog rt build-collect-env ${buildInfoName} ${run_id}
            - |
              if [[ -n $will_publish_bi ]]; then jfrog rt build-publish ${buildInfoName} ${run_id} ; 
              fi
            - add_run_files /tmp/jfrog/. jfrog
    {{- end}}

  - name: build_status_notification
    configuration:
      dependencyMode:
        waitOnParentComplete: true
      inputResources:
        - name: buildStatusUpdate
        - name: controlplane_1
          trigger: false
      integrations:
        - name: pipelines_build_status_slack
        - name: entplus_pipelines
    steps:
      - name: BP_status_slack_notification
        type: Bash
        configuration:
          nodePool: pipelines_u20_t3small
        execution:
          onExecute:
            - |
              statusCode=$(curl --location --request GET "https://entplus.jfrog.io/pipelines/api/v1/runs/${res_buildStatusUpdate_runId}" --header "Content-Type:application/json" --header "Authorization:Bearer ${int_entplus_pipelines_admin_token}" | jq -r '.statusCode')
            - echo "statusCode - $statusCode"
            - |
              if [ $statusCode != 4002 ]
                then
                  exit 1
              fi
          onFailure:
            - source ${res_controlplane_1_resourcePath}/build/ci/pipelines_build.sh
            - build_status_notification_BP
