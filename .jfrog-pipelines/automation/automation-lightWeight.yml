template: true
valuesFilePath: ../values.yml

pipelines:

  - name: iTest
    configuration:
      chronological: true
      nodePool: pipelines_testing
      inputResources:
        - name: ubuntu_18_static_vm
          trigger: false
        - name: ubuntu_20_static_vm
          trigger: false
        - name: redhat_7_static_vm
          trigger: false
        - name: centos_7_static_vm
          trigger: false
        - name: itestNonScm
        - name: cpGit
          trigger: false
      environmentVariables:
        readOnly:
          #set this env to true to delete the Conf.json file
          removeConfFile: "false"
          confFileName: conf.json
          SKIP_NPM_INSTALL:
            description: "Skip npm install for faster setup"
            default: "false"
            allowCustom: true
          exitCode: "1"
          LOG_LEVEL: "debug"
          JPD_URL: "$res_itestNonScm_URL"
          JFROG_ARTIFACTORY_USER: "admin"
          JFROG_ADMIN_ARTIFACTORY_PASSWORD: "$res_itestNonScm_JPD_PASSWORD"
          JFROG_ARTIFACTORY_APIKEY: "$res_itestNonScm_JPD_PASSWORD"
          GITHUB_TOKEN: "${int_s_gitHub_token}"
          GITHUB_URL: "${int_test_automation_token_GITHUB_URL}"
          JFROG_JOIN_KEY: "$res_itestNonScm_JPD_JOIN_KEY"
          DEFAULT_NODE_POOL_NAME:
            allowCustom: true
            default: u18dynamic
            description: "Default nodePool"
          #by default this is set to node pool with name `u16dynamic`
          gitUser: "PIPA"
          PREP_BUILDNODES: "true"
          DEFAULT_UBUNTU_NODEPOOL_OS:
            allowCustom: true
            default: "Ubuntu_18.04"
            description: "Default operating system for node pool tests"
          DEFAULT_NODEPOOL_NUMBEROFNODES:
            allowCustom: true
            default: 100
            description: "Default number of nodes for node pool tests"
          DEFAULT_NODEPOOL_REGION:
            allowCustom: true
            default: "ap-south-1"
            description: "Default region for node pool tests"
          DEFAULT_AZURE_NODEPOOL_REGION:
            allowCustom: true
            default: "westus"
            description: "Default region for azure node pool tests"
          DEFAULT_GCP_NODEPOOL_REGION:
            allowCustom: true
            default: "us-west1"
            description: "Default region for gcp node pool tests"
          DEFAULT_NODEPOOL_ARCHITECTURE:
            allowCustom: true
            default: "x86_64"
            description: "Default architecture for node pool tests"
          DEFAULT_NODEPOOL_NODEIDLEINTERVAL:
            allowCustom: true
            default: 1
            description: "Default node interval(in min) for node pool tests"
          DEFAULT_NODEPOOL_DISKSIZE:
            allowCustom: true
            default: 90
            description: "Default disk size for node pool tests"
          DEFAULT_NODEPOOL_TIMEOUT:
            allowCustom: true
            default: 30000
            description: "Default timeout(in sec) for node pool tests"
          DEFAULT_WINDOWS_NODEPOOL_OS:
            allowCustom: true
            default: "WindowsServer_2019"
          AWS_NODEPOOL_KEYPAIRNAME:
            description: "AWS key-pair"
            default: "dev2cloud-pp-aps1-nodepool"
            allowCustom: true
          AWS_NODEPOOL_SECOND_KEYPAIRNAME:
            description: "AWS second key-pair"
            default: "pipetesting003-eu-central-1"
            allowCustom: true
          AWS_NODEPOOL_SUBNETID:
            description: "Default AWS subnet-id"
            default: "subnet-0cdfebd1890e2967a"
            allowCustom: true
          AWS_NODEPOOL_SECOND_SUBNETID:
            description: "second AWS subnet-id"
            default: "subnet-050a07ea2f5cbee1c"
            allowCustom: true
          AWS_NODEPOOL_INSTANCESIZE:
            description: "Default AWS instance-size"
            default: "t3a.medium"
            allowCustom: true
          AWS_NODEPOOL_WIN_19_INSTANCESIZE:
            description: "Default AWS instance-size"
            default: "t3a.medium"
            allowCustom: true
          AWS_NODEPOOL_SECURITYGROUPID:
            description: " Default AWS security group-id"
            default: "sg-04d78bcf2e81c95a0"
            allowCustom: true
          AWS_NODEPOOL_SECOND_SECURITYGROUPID:
            description: " second AWS security group-id"
            default: "sg-0ea095851df05843e"
            allowCustom: true
          AWS_PROJECT_INTEGRATION_ACCESSKEYID:
            description: "Default AWS access key-id"
            default: "${int_test_automation_token_AWS_DEV2CLOUD_ACCESSKEYID}"
            values:
              - "${int_test_automation_token_AWS_DEV2CLOUD_ACCESSKEYID}"
              - "${int_test_automation_token_AWS_PROJECT_INTEGRATION_ACCESSKEYID}"
            allowCustom: true
          AWS_PROJECT_INTEGRATION_SECRETACCESSKEY:
            description: "Default AWS ecret access-key"
            default: "${int_test_automation_token_AWS_DEV2CLOUD_SECRETACCESSKEY}"
            values:
              - "${int_test_automation_token_AWS_DEV2CLOUD_SECRETACCESSKEY}"
              - "${int_test_automation_token_AWS_PROJECT_INTEGRATION_SECRETACCESSKEY}"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_APPID:
            description: "Default Azure app-id"
            default: "192757c5-73a6-4257-84ec-1fe4c30f98fb"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_PASSWORD:
            description: "Default Azure password"
            default: "${int_az_jfrog_new_password}"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_TENANT:
            description: "Default Azure tenant key"
            default: "ad8b5a8c-9862-4c41-a341-aa838fc564df"
            allowCustom: true
          AZURE_NODEPOOL_SUBSCRIPTIONID:
            allowCustom: true
            default: "f27d81be-eea4-479e-a745-11088b8cc1b0"
            description: "Default Azure subscription-id"
          AZURE_NODEPOOL_RESOURCEGROUPNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure resource group name"
          AZURE_NODEPOOL_VNETNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure vnetname"
          AZURE_NODEPOOL_SUBNETNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure subnet name"
          AZURE_NODEPOOL_PUBLICSSHKEY:
            allowCustom: true
            default: "\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCA0GPIdWfyEn21jkMhS8/JvoJ4viuPmnBhuazjwUbilM3zO38hQc8nr8eW0zJS/zpf2V9QewpJ1t9x5tw4bdTRMN99aaIbqr6ZSz/1ofFL1PkpC9Y7HWi+dmpxlIqRkX6JGPaUNb2ql71vVPY0tLg2G4MgcX/ZFQCVO3z/o20HURgrcxYEu5A3+dOkyiE3JQBi+s66cgDm7p3IIND2eEHcZiIsaW6vg2T85oF8WkXcpHFLLXt5gzND6f/8TwW657QXe2P5mijWwTtCOaopfSK0vXC1dFzPPpwKGPTv7KrsTSPL3c/QP6YqEYratKpNTenmvGPGqYNFgj8oMIbVN2SP\""
            description: "Default Azure public ssh-key"
          AZURE_NODEPOOL_INSTANCESIZE:
            allowCustom: true
            default: "Standard_F2s"
            description: "Default Azure instance size"
          GCP_NODEPOOL_INSTANCESIZE:
            allowCustom: true
            default: "n1-standard-2"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_SUBNET:
            allowCustom: true
            default: "jfrog-usw1-dynamicnodes"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_NETWORK_TAGS:
            allowCustom: true
            default: "behind-nat,jenkins,pipelines,xray-app,xray-apps"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_ZONE:
            allowCustom: true
            default: "us-west1-b"
            description: "This variable is used to set default instance size for azure node pool"
          D_GOOGLECLOUD_PROJECT_INTEGRATION_JSONKEY:
            allowCustom: true
            default: "${int_test_automation_gcp_jsonKey}"
            description: "This variable is used to set default instance size for azure node pool"
          KUBERNETES_NODEPOOL_STORAGECLASS:
            allowCustom: true
            default: "standard"
            description: "This variable is used to set default storage class for kubernetes node pool"
          KUBERNETES_NODEPOOL_NAMESPACE:
            allowCustom: true
            default: "pipe-master-pool"
            description: "This variable is used to set default namespace for kubernetes node pool"
          KUBERNETES_PROJECT_INTEGRATION_KUBECONFIG:
            allowCustom: true
            default: "${int_KubeFile_automation_kubeconfig}"
            description: "This variable is used to set default kubeconfig for kubernetes node pool"
          KUBERNETES_PROJECT_INTEGRATION_KUBECONFIG_PATH:
            allowCustom: true
            default: "${step_workspace_dir}/KubeFile_automation/config"
            description: "This variable is used to set default kubeconfig for kubernetes node pool"
          DONT_DELETE_PS:
            description: "When run status reaches error status, pipeline source doesn't get deleted "
            default: "true"
            allowCustom: true
          GREP:
            description: "Only run tests matching this string"
            default: "FLAKY"
            allowCustom: true
          INVERT:
            description: "Skip all the tests matching the grep string. Accepts only true or false"
            default: "true"
            allowCustom: true
          PREP_FOR_HELM_TESTS:
            description: "Upload helm test files to artifactory for running helm test cases"
            default: "true"
            allowCustom: true
          U18_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_ubuntu_18_static_vm_ip_address}"
            description: "Ubuntu 18 static vm ip address"
          U20_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_ubuntu_20_static_vm_ip_address}"
            description: "Ubuntu 20 static vm ip address"
          RHEL7_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_redhat_7_static_vm_ip_address}"
            description: "Redhat 7 static vm ip address"
          CENT7_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_centos_7_static_vm_ip_address}"
            description: "CentOS 7 static vm ip address"
          SSH_USER:
            allowCustom: false
            default:  "automation"
            description: "SSH user name in automation"
          SSH_PRIVATE_KEY:
            allowCustom: false
            default:  "${int_automation_ssh_privateKey}"
            description: "SSH private key value in automation"
          AWS_NODEPOOL_CUSTOMTAG_KEYS:
            description: "keys for custom tag to identify testing instances"
            default: "pipelines-internal,Group"
            allowCustom: true
          AWS_NODEPOOL_CUSTOMTAG_VALUES:
            description: "values for custom tag to identify testing instances"
            default: "testing,PIPELINES"
            allowCustom: true
          BITBUCKET_SERVER_PASSWORD:
            description: "BBS password"
            default: "${int_test_automation_bbs_new_password}"
            allowCustom: true
          BITBUCKET_SERVER_URL:
            description: "BBS url"
            default: "${int_test_automation_bbs_new_url}"
            allowCustom: true
          BITBUCKET_SERVER_USERNAME:
            description: "BBS username"
            default: "${int_test_automation_bbs_new_username}"
            allowCustom: true
          GITHUB_REPOSITORY_BRANCH: "master"
          GITHUB_REPOSITORY_FULLPATH_BASH: "jfrog/Org_test_Automation_bash"
          GITHUB_REPOSITORY_FULLPATH_POWERSHELL: "jfrog/Org_test_Automation_PowerShell"
          MULTIBRANCH_REPOSITORY_FULL_NAME: "PIPA/org_test_automation_MultiBranch"
          GITHUB_REPOSITORY_FULLPATH_BASH_BRANCH: "master"
          EMPTY_REPOSITORY_FULL_NAME : "PIPA/Org_test_Automation_empty"
          EXTENSIONS_REPOSITORY_FULL_NAME : "PIPA/extensions"
          TEMPLATES_REPOSITORY_FULL_NAME : "PIPA/templates"
          GITHUB_REPOSITORY_FULLPATH: "jfrog/Org_test_Automation"
          GITHUB_MULTIBRANCH_REPOSITORY_FULL_NAME: "jfrog/org_test_automation_MultiBranch"
      integrations:
        - name: test_automation
        - name: test_automation_token
        - name: KubeFile_automation
        - name: lightweight_automation_generic
        - name: automation_ssh
        - name: itest_github
        - name: entplus_deployer
        - name: pipelines_itest_slack
        - name: pipelines_mqtest_slack
        - name: test_automation_bbs_new
        - name: s_gitHub
    steps:
      - name: setup_PreMatrix
        type: PreMatrix
        configuration:
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - "16"
          integrations:
            - name: entArt
            - name: az_jfrog_new
            - name: test_automation_gcp
          inputResources:
            - name: auto_gitRepo
              trigger: false
            - name: Org_test_Automation_BBS
              trigger: false
            - name: Org_test_Automation_bash_BBS
              trigger: false
            - name: Org_test_Automation_PowerShell_BBS
              trigger: false
            - name: automation_templateFS
              trigger: false
            - name: triggerLightWeightAutomation
              trigger: false
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            listOfTests: "core/api/systemCodes.js"
        execution:
          onStart:
            - echo ${int_test_automation_bbs_new_url}
            - echo ${BITBUCKET_SERVER_URL}
            - node -v
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - cp -r $res_auto_gitRepo_resourcePath/automation/tests .
            - pushd tests
            - cp -r $res_Org_test_Automation_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_bash_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_PowerShell_BBS_resourcePath .
            - ls -la
            - cp -r $res_automation_templateFS_resourcePath .
            - restore_pipeline_files jsonfile $confFileName
            - if [[ -f "$confFileName" ]]; then jsonfile=true && cat $confFileName; fi
            - if ( $jsonfile && $removeConfFile ); then echo "removing confFileName" && rm -rf $confFileName; fi
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            # - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            # - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - sudo chmod 0777 $TEMPLATE_BINARY_PATH
            - export testCases=$listOfTests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - ./test.sh
            - popd
            - rm -rf $res_auto_gitRepo_resourcePath
            - rm -rf $res_Org_test_Automation_BBS_resourcePath
            - rm -rf $res_Org_test_Automation_bash_BBS_resourcePath
            - rm -rf $res_Org_test_Automation_PowerShell_BBS_resourcePath

      - name: bash_tests_1
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/Bash/BashIntegrations/BashArtifactoryIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashAWSIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashDockerIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashGenericIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashGitHubIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashGoogleCloudIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashPagerDutyIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashSlackIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashJFrogPlatformIntegration.js"
            - listOfTests: "core/steps/Bash/BashResources/BashAql.js"
            - listOfTests: "core/steps/Bash/BashResources/BashBuildInfo.js"
            - listOfTests: "core/steps/Bash/BashResources/BashFileSpec.js"
            - listOfTests: "core/steps/Bash/BashResources/BashGitRepo.js"
            - listOfTests: "core/steps/Bash/BashResources/BashImage.js"
            - listOfTests: "core/steps/Bash/BashResources/BashPropertyBag.js"
            - listOfTests: "core/steps/Bash/BashResources/BashResources.js"
            - listOfTests: "core/steps/Bash/BashNative/Jenkins.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_bash"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            # - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            # - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: bash_tests_2
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/Bash/BashGeneric/approvalGates.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashMac.js"
            - listOfTests: "core/steps/Bash/BashGeneric/buildInfoUrl.js"
            - listOfTests: "core/steps/Bash/BashGeneric/consoleLogStreaming.js"
            - listOfTests: "core/steps/Bash/BashGeneric/environmentVariables.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashGenericSync.js"
            - listOfTests: "core/steps/Bash/BashGeneric/heartbeat.js"
            - listOfTests: "core/steps/Bash/BashGeneric/Tasks.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_bash"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            # - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            # - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: bash_tests_3
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsEndStep.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsFindConfiguration.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsGitRepo.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsJFrogCLI.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsRunDescription.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsRunVariables.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsSaveArtifactInfo.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsSendNotification.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsState.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsTestReports.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsTriggerPayload.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsWriteOutput.js"
            - listOfTests: "core/steps/Bash/BashNative/Matrix1.js"
            - listOfTests: "core/steps/Bash/BashNative/Matrix2.js"
            - listOfTests: "core/steps/Bash/BashNative/Matrix3.js"
            - listOfTests: "core/steps/Bash/BashNative/Matrix4.js"
            - listOfTests: "core/steps/Bash/BashNative/Matrix5.js"
            - listOfTests: "core/steps/Bash/BashNative/MatrixSync.js"
            - listOfTests: "core/steps/Matrix/*.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashGeneric.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashGenericExecutionScripts.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashGenericRuntimeImage.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashGenericRunTrigger.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashGenericStepletStatus.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashGenericTestElements.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashGeneric13.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashGenericKubernetes.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_bash"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            # - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            # - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: step_sync_tests
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/Sync/HelmBlueGreenCleanup.js"
            - listOfTests: "core/steps/Sync/HelmBlueGreenDeploy.js"
            - listOfTests: "core/steps/Sync/HelmBlueGreenRoleSwitch.js"
            - listOfTests: "core/steps/Sync/UploadArtifact.js"
            - listOfTests: "core/steps/Sync/TriggerPipeline.js"
            - listOfTests: "core/steps/Sync/Tasks.js"

        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            # - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            # - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: ps_tests_1
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/consoleLogStreaming.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Sync/PowerShellGeneric.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/PowerShellGeneric.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/PowerShellGenericArtifactInfo.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/PowerShellGenericEnvironmentVariables.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/PowerShellGenericExecutionScripts.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/PowerShellGenericRuntime.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/PowerShellGenericRunTrigger.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/PowerShellGenericStepletStatus.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/Tasks.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellAirbrakeIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellArtifactoryIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellAWSIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellAzureKeysIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellBitbucketIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellBitBucketServerIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellDigitalOceanIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellDistributionIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellDockerIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellFileServerIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellGenericIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellJFrogPlatformIntegration.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_PowerShell"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            # - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            # - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: ps_tests_2
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellSSHKeyIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellGitHubEnterpriseIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellGitHubIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellGitLabIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellGoogleCloudIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellIncomingWebhookIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellJenkinsIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellJiraIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellKubernetesIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellNewRelicIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellOutgoingWebhookIntegration.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_PowerShell"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            # - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            # - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: ps_tests_3
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSPipeStateUntilityFunctions.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSRunStateUtilityFunction.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSAffinityGroupStateUtilityFunction.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSRunVariables.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctions.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsBumpSemver.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsCheckXray.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsEndStep.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsFindConfiguration.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsGitRepo.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsReplicateResource.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsSaveTests.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsSendNotification.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsUpdateRunDescription.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsWriteOutput.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellPagerDutyIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellPemKeyIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellSlackIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellSMTPIntegration.js"

        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_PowerShell"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            # - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            # - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: nodepools_tests
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests:  "core/nodePools/AWSDynamicNodes/c7Dynamicnode.js"
            - listOfTests:  "core/nodePools/AWSDynamicNodes/u18DynamicNode.js"
            - listOfTests:  "core/nodePools/AWSDynamicNodes/u20DynamicNode.js"
            - listOfTests:  "core/nodePools/AWSDynamicNodes/w19DynamicNodes1.js"
            - listOfTests:  "core/nodePools/AWSDynamicNodes/w19DynamicNodes2.js"
            - listOfTests:  "core/nodePools/AZDynamicNodes/c7DynamicNode.js"
            - listOfTests:  "core/nodePools/AZDynamicNodes/u18DynamicNode.js"
            - listOfTests:  "core/nodePools/AZDynamicNodes/u20DynamicNode.js"
            - listOfTests:  "core/nodePools/AZDynamicNodes/w19DynamicNodes.js"
            - listOfTests:  "core/nodePools/GCPDynamicNodes/c7DynamicNode.js"
            - listOfTests:  "core/nodePools/GCPDynamicNodes/u18DynamicNode.js"
            - listOfTests:  "core/nodePools/GCPDynamicNodes/u20DynamicNode.js"
            # - listOfTests:  "core/nodePools/K8sDynamicNodes/c7DynamicNode.js"
            # - listOfTests:  "core/nodePools/K8sDynamicNodes/k8sGenericNode.js"
            # - listOfTests:  "core/nodePools/K8sDynamicNodes/u18DynamicNode.js"
            # - listOfTests:  "core/nodePools/K8sDynamicNodes/u20DynamicNode.js"
            - listOfTests:  "core/nodePools/K8sDynamicNodes/k8sDynamicNodePool1.js"
            - listOfTests:  "core/nodePools/AWSDynamicNodePools.js"
            # - listOfTests:  "core/nodePools/AzureDynamicNodePools.js"
            - listOfTests:  "core/nodePools/dynamicAWSnode.js"
            # - listOfTests:  "core/nodePools/dynamicGCPNodePools.js"
            # - listOfTests:  "core/nodePools/dynamicKubernetesNodePools.js"
            - listOfTests:  "core/nodePools/GenericNodePools.js"
            - listOfTests:  "core/nodePools/staticNodes/u18static.js"
            - listOfTests:  "core/nodePools/staticNodes/u20static.js"
            - listOfTests:  "core/nodePools/staticNodes/cent7static.js"
            - listOfTests:  "core/nodePools/staticNodes/rhel7static.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            # - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            # - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: workflow_tests
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/workFlow/pipeline/sync/pipelineWorkFlowSync.js"
            - listOfTests: "core/workFlow/pipeline/trigger/pipelineWorkFlow5.js"
            - listOfTests: "core/workFlow/pipeline/trigger/pipelineWorkFlow6.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            # - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            # - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: workflow_tests_1
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/workFlow/step/conditionalWorkflow.js"
            - listOfTests: "core/workFlow/step/conditionalWorkflow1.js"
            - listOfTests: "core/workFlow/step/conditionalWorkflow2.js"
            - listOfTests: "core/workFlow/step/nodeCleanup.js"
            - listOfTests: "core/workFlow/step/signedPipelines.js"
            - listOfTests: "core/workFlow/step/stepWorkflow1.js"
            - listOfTests: "core/workFlow/step/stepWorkflow2.js"
            - listOfTests: "core/workFlow/step/stepWorkflow12.js"
            - listOfTests: "core/workFlow/step/stepWorkflow13.js"
            - listOfTests: "core/workFlow/step/stepWorkflow14.js"
            - listOfTests: "core/workFlow/step/stepWorkflow23.js"
            - listOfTests: "core/workFlow/step/stepWorkflow24.js"
            - listOfTests: "core/workFlow/step/stepWorkflow25.js"
            - listOfTests: "core/workFlow/step/stepWorkflow26.js"
            - listOfTests: "core/workFlow/step/stepWorkflow27.js"
            - listOfTests: "core/workFlow/step/stepWorkflow29.js"
            - listOfTests: "core/workFlow/step/triggerPipelineWorkflow.js"
            - listOfTests: "core/workFlow/environments/environmentWorkflow.js"
            - listOfTests: "core/workFlow/environments/globalAndProjectEnvironmentVariables.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            # - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            # - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: resource_tests
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/resources/Aql.js"
            - listOfTests: "core/resources/BuildInfo.js"
            - listOfTests: "core/resources/FileSpec.js"
            - listOfTests: "core/resources/GitRepo.js"
            - listOfTests: "core/resources/HelmChart.js"
            - listOfTests: "core/resources/Image.js"
            - listOfTests: "core/resources/PropertyBag.js"
            - listOfTests: "core/resources/ReleaseBundle.js"
            - listOfTests: "core/resources/RemoteFile.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            # - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            # - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: projectIntegration_tests
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/projectIntegrations/Airbrake.js"
            - listOfTests: "core/projectIntegrations/Artifactory.js"
            - listOfTests: "core/projectIntegrations/AWS.js"
            - listOfTests: "core/projectIntegrations/AzureKeys.js"
            - listOfTests: "core/projectIntegrations/Bitbucket.js"
            - listOfTests: "core/projectIntegrations/BitBucketServer.js"
            - listOfTests: "core/projectIntegrations/DigitalOcean.js"
            - listOfTests: "core/projectIntegrations/Distribute.js"
            - listOfTests: "core/projectIntegrations/DockerRegistry.js"
            - listOfTests: "core/projectIntegrations/dynamicAWS.js"
            - listOfTests: "core/projectIntegrations/DynamicAzure.js"
            - listOfTests: "core/projectIntegrations/dynamicGoogleCloud.js"
            - listOfTests: "core/projectIntegrations/dynamicKubernetes.js"
            - listOfTests: "core/projectIntegrations/FileServer.js"
            - listOfTests: "core/projectIntegrations/Generic.js"
            - listOfTests: "core/projectIntegrations/Generictests.js"
            - listOfTests: "core/projectIntegrations/GitHub.js"
            - listOfTests: "core/projectIntegrations/GitHubEnterprise.js"
            - listOfTests: "core/projectIntegrations/GitLab.js"
            - listOfTests: "core/projectIntegrations/GoogleCloud.js"
            - listOfTests: "core/projectIntegrations/IncomingWebhook.js"
            - listOfTests: "core/projectIntegrations/Jenkins.js"
            - listOfTests: "core/projectIntegrations/Jira.js"
            - listOfTests: "core/projectIntegrations/Kubernetes.js"
            - listOfTests: "core/projectIntegrations/NewRelic.js"
            - listOfTests: "core/projectIntegrations/OutgoingWebhook.js"
            - listOfTests: "core/projectIntegrations/PagerDutyEvents.js"
            - listOfTests: "core/projectIntegrations/PemKey.js"
            - listOfTests: "core/projectIntegrations/Slack.js"
            - listOfTests: "core/projectIntegrations/SMTP.js"
            - listOfTests: "core/projectIntegrations/SSHkey.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            # - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            # - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: tearDown_tests_PostMatrix
        type: PostMatrix
        configuration:
          runtime:
            type: host
          integrations:
            - name: entArt
          inputResources:
            - name: auto_gitRepo
              trigger: false
          outputResources:
            - name: iTestReleaseApprovalBag
          inputSteps:
            - name: bash_tests_1
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: bash_tests_2
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: bash_tests_3
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: step_sync_tests
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: ps_tests_1
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: ps_tests_2
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: nodepools_tests
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: workflow_tests
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: workflow_tests_1
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: ps_tests_3
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: resource_tests
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: projectIntegration_tests
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
        execution:
          onComplete:
            - write_output iTestReleaseApprovalBag APPROVAL_STATUS='REQUESTING_APPROVAL_FOR_RELEASE_PIPELINES'
            - mkdir result-${run_id}
            - save_tests ./bash_tests_1/testResults/mocha-junit-reporter
            - mv ./bash_tests_1/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./bash_tests_2/testResults/mocha-junit-reporter
            - mv ./bash_tests_2/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./bash_tests_3/testResults/mocha-junit-reporter
            - mv ./bash_tests_3/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./step_sync_tests/testResults/mocha-junit-reporter
            - mv ./step_sync_tests/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./ps_tests_1/testResults/mocha-junit-reporter
            - mv ./ps_tests_1/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./ps_tests_2/testResults/mocha-junit-reporter
            - mv ./ps_tests_2/testResults/mochawesome/*.json result-${run_id}/
            # - save_tests ./basic_tests/testResults/mocha-junit-reporter
            - save_tests ./nodepools_tests/testResults/mocha-junit-reporter
            - mv ./nodepools_tests/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./workflow_tests/testResults/mocha-junit-reporter
            - mv ./workflow_tests/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./workflow_tests_1/testResults/mocha-junit-reporter
            - mv ./workflow_tests_1/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./ps_tests_3/testResults/mocha-junit-reporter
            - mv ./ps_tests_3/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./resource_tests/testResults/mocha-junit-reporter
            - mv ./resource_tests/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./projectIntegration_tests/testResults/mocha-junit-reporter
            - mv ./projectIntegration_tests/testResults/mochawesome/*.json result-${run_id}/
            - add_pipeline_files result-${run_id} result-${run_id}
            - pushd $res_auto_gitRepo_resourcePath/automation/tests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - ./test.sh
            - restore_pipeline_files result-${run_id} result_itest
            - ls -la
            - npm run merge-json-reports && npm run merge-html-reports
            - source pipelines_common.sh
            - uploadResult="$(on_complete_itest_nonSCM)"
            - reportPath=${uploadResult%%:*}
            - reportLink="https://entplus.jfrog.io/artifactory/pipe-itest-reports/itest-non-SCM-reports/$reportPath"
            - echo "${reportLink}"
            - testResult="success"
            - |
              if [ "$step_bash_tests_1_statusName" != "success" ] || [ "$step_bash_tests_2_statusName" != "success" ] ||
              if [ "$step_bash_tests_3_statusName" != "success" ] || [ "$step_step_sync_tests_statusName" != "success" ] ||
              if [ "$step_ps_tests_1_statusName" != "success" ] || [ "$step_ps_tests_2_statusName" != "success" ] ||
              if [ "$step_ps_tests_3_statusName" != "success" ] || [ "$step_nodepools_tests_statusName" != "success" ] ||
              if [ "$step_workflow_tests_statusName" != "success" ] || [ "$step_workflow_tests_1_statusName" != "success" ] ||
              if [ "$step_resource_tests_statusName" != "success" ] || [ "$step_projectIntegration_tests_statusName" != "success" ]
                then
                  testResult="failure"
              fi
            - colorBar="#00FF00"
            - |
              if [ "$testResult" == "failure" ]
                then
                  colorBar="#FF0000"
              fi
            {{ if hasSuffix "full" "{{gitBranch}}" }}
            - send_notification pipelines_mqtest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}" --color "$colorBar"
            {{ end }}
            {{ if eq "master" "{{gitBranch}}" }}
            - send_notification pipelines_itest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}" --color "$colorBar"
            {{ end }}


{{ if or (eq "master" "{{gitBranch}}") (hasPrefix "preRelease" "{{gitBranch}}") (hasPrefix "milestone" "{{gitBranch}}") (hasSuffix "full" "{{gitBranch}}") }}
  - name: scm_itest
    configuration:
      chronological: true
      nodePool: pipelines_testing
      inputResources:
        - name: itestScm
        - name: cpGit
          trigger: false
      environmentVariables:
        readOnly:
          #set this env to true to delete the Conf.json file
          removeConfFile: "false"
          confFileName: conf.json
          SKIP_NPM_INSTALL:
            description: "Skip npm install for faster setup"
            default: "false"
            allowCustom: true
          exitCode: "1"
          LOG_LEVEL: "debug"
          JPD_URL: "$res_itestScm_URL"
          JFROG_ARTIFACTORY_USER: "admin"
          JFROG_ADMIN_ARTIFACTORY_PASSWORD: "$res_itestScm_JPD_PASSWORD"
          JFROG_ARTIFACTORY_APIKEY: "$res_itestScm_JPD_PASSWORD"
          GITHUB_TOKEN: "${int_s_gitHub_token}"
          GITHUB_URL: "${int_test_automation_token_GITHUB_URL}"
          JFROG_JOIN_KEY: "$res_itestScm_JPD_JOIN_KEY"
          DEFAULT_NODE_POOL_NAME:
            allowCustom: true
            default: u18dynamic
            description: "Default nodePool"
          #by default this is set to node pool with name `u16dynamic`
          gitUser: "PIPA"
          PREP_BUILDNODES: "true"
          DEFAULT_UBUNTU_NODEPOOL_OS:
            allowCustom: true
            default: "Ubuntu_18.04"
            description: "Default operating system for node pool tests"
          DEFAULT_NODEPOOL_NUMBEROFNODES:
            allowCustom: true
            default: 100
            description: "Default number of nodes for node pool tests"
          DEFAULT_NODEPOOL_REGION:
            allowCustom: true
            default: "ap-south-1"
            description: "Default region for node pool tests"
          DEFAULT_AZURE_NODEPOOL_REGION:
            allowCustom: true
            default: "westus"
            description: "Default region for azure node pool tests"
          DEFAULT_GCP_NODEPOOL_REGION:
            allowCustom: true
            default: "us-west1"
            description: "Default region for gcp node pool tests"
          DEFAULT_NODEPOOL_ARCHITECTURE:
            allowCustom: true
            default: "x86_64"
            description: "Default architecture for node pool tests"
          DEFAULT_NODEPOOL_NODEIDLEINTERVAL:
            allowCustom: true
            default: 1
            description: "Default node interval(in min) for node pool tests"
          DEFAULT_NODEPOOL_DISKSIZE:
            allowCustom: true
            default: 90
            description: "Default disk size for node pool tests"
          DEFAULT_NODEPOOL_TIMEOUT:
            allowCustom: true
            default: 30000
            description: "Default timeout(in sec) for node pool tests"
          DEFAULT_WINDOWS_NODEPOOL_OS:
            allowCustom: true
            default: "WindowsServer_2019"
          AWS_NODEPOOL_KEYPAIRNAME:
            description: "AWS key-pair"
            default: "dev2cloud-pp-aps1-nodepool"
            allowCustom: true
          AWS_NODEPOOL_SECOND_KEYPAIRNAME:
            description: "AWS second key-pair"
            default: "pipetesting003-eu-central-1"
            allowCustom: true
          AWS_NODEPOOL_SUBNETID:
            description: "Default AWS subnet-id"
            default: "subnet-0cdfebd1890e2967a"
            allowCustom: true
          AWS_NODEPOOL_SECOND_SUBNETID:
            description: "second AWS subnet-id"
            default: "subnet-050a07ea2f5cbee1c"
            allowCustom: true
          AWS_NODEPOOL_INSTANCESIZE:
            description: "Default AWS instance-size"
            default: "t3a.medium"
            allowCustom: true
          AWS_NODEPOOL_WIN_19_INSTANCESIZE:
            description: "Default AWS instance-size"
            default: "t3a.medium"
            allowCustom: true
          AWS_NODEPOOL_SECURITYGROUPID:
            description: " Default AWS security group-id"
            default: "sg-04d78bcf2e81c95a0"
            allowCustom: true
          AWS_NODEPOOL_SECOND_SECURITYGROUPID:
            description: " second AWS security group-id"
            default: "sg-0ea095851df05843e"
            allowCustom: true
          AWS_PROJECT_INTEGRATION_ACCESSKEYID:
            description: "Default AWS access key-id"
            default: "${int_test_automation_token_AWS_DEV2CLOUD_ACCESSKEYID}"
            values:
              - "${int_test_automation_token_AWS_DEV2CLOUD_ACCESSKEYID}"
              - "${int_test_automation_token_AWS_PROJECT_INTEGRATION_ACCESSKEYID}"
            allowCustom: true
          AWS_PROJECT_INTEGRATION_SECRETACCESSKEY:
            description: "Default AWS ecret access-key"
            default: "${int_test_automation_token_AWS_DEV2CLOUD_SECRETACCESSKEY}"
            values:
              - "${int_test_automation_token_AWS_DEV2CLOUD_SECRETACCESSKEY}"
              - "${int_test_automation_token_AWS_PROJECT_INTEGRATION_SECRETACCESSKEY}"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_APPID:
            description: "Default Azure app-id"
            default: "192757c5-73a6-4257-84ec-1fe4c30f98fb"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_PASSWORD:
            description: "Default Azure password"
            default: "${int_az_jfrog_new_password}"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_TENANT:
            description: "Default Azure tenant key"
            default: "ad8b5a8c-9862-4c41-a341-aa838fc564df"
            allowCustom: true
          AZURE_NODEPOOL_SUBSCRIPTIONID:
            allowCustom: true
            default: "f27d81be-eea4-479e-a745-11088b8cc1b0"
            description: "Default Azure subscription-id"
          AZURE_NODEPOOL_RESOURCEGROUPNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure resource group name"
          AZURE_NODEPOOL_VNETNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure vnetname"
          AZURE_NODEPOOL_SUBNETNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure subnet name"
          AZURE_NODEPOOL_PUBLICSSHKEY:
            allowCustom: true
            default: "\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCA0GPIdWfyEn21jkMhS8/JvoJ4viuPmnBhuazjwUbilM3zO38hQc8nr8eW0zJS/zpf2V9QewpJ1t9x5tw4bdTRMN99aaIbqr6ZSz/1ofFL1PkpC9Y7HWi+dmpxlIqRkX6JGPaUNb2ql71vVPY0tLg2G4MgcX/ZFQCVO3z/o20HURgrcxYEu5A3+dOkyiE3JQBi+s66cgDm7p3IIND2eEHcZiIsaW6vg2T85oF8WkXcpHFLLXt5gzND6f/8TwW657QXe2P5mijWwTtCOaopfSK0vXC1dFzPPpwKGPTv7KrsTSPL3c/QP6YqEYratKpNTenmvGPGqYNFgj8oMIbVN2SP\""
            description: "Default Azure public ssh-key"
          AZURE_NODEPOOL_INSTANCESIZE:
            allowCustom: true
            default: "Standard_F2s"
            description: "Default Azure instance size"
          GCP_NODEPOOL_INSTANCESIZE:
            allowCustom: true
            default: "n1-standard-2"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_SUBNET:
            allowCustom: true
            default: "jfrog-usw1-dynamicnodes"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_NETWORK_TAGS:
            allowCustom: true
            default: "behind-nat,jenkins,pipelines,xray-app,xray-apps"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_ZONE:
            allowCustom: true
            default: "us-west1-b"
            description: "This variable is used to set default instance size for azure node pool"
          D_GOOGLECLOUD_PROJECT_INTEGRATION_JSONKEY:
            allowCustom: true
            default: "${int_test_automation_gcp_jsonKey}"
            description: "This variable is used to set default instance size for azure node pool"
          KUBERNETES_NODEPOOL_STORAGECLASS:
            allowCustom: true
            default: "standard"
            description: "This variable is used to set default storage class for kubernetes node pool"
          KUBERNETES_NODEPOOL_NAMESPACE:
            allowCustom: true
            default: "pipe-master-pool"
            description: "This variable is used to set default namespace for kubernetes node pool"
          KUBERNETES_PROJECT_INTEGRATION_KUBECONFIG:
            allowCustom: true
            default: "${int_KubeFile_automation_kubeconfig}"
            description: "This variable is used to set default kubeconfig for kubernetes node pool"
          KUBERNETES_PROJECT_INTEGRATION_KUBECONFIG_PATH:
            allowCustom: true
            default: "${step_workspace_dir}/KubeFile_automation/config"
            description: "This variable is used to set default kubeconfig for kubernetes node pool"
          DONT_DELETE_PS:
            description: "When run status reaches error status, pipeline source doesn't get deleted "
            default: "true"
            allowCustom: true
          GREP:
            description: "Only run tests matching this string"
            default: "FLAKY"
            allowCustom: true
          INVERT:
            description: "Skip all the tests matching the grep string. Accepts only true or false"
            default: "true"
            allowCustom: true
          PREP_FOR_HELM_TESTS:
            description: "Upload helm test files to artifactory for running helm test cases"
            default: "true"
            allowCustom: true
          U18_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_ubuntu_18_static_vm_ip_address}"
            description: "Ubuntu 18 static vm ip address"
          U20_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_ubuntu_20_static_vm_ip_address}"
            description: "Ubuntu 20 static vm ip address"
          RHEL7_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_redhat_7_static_vm_ip_address}"
            description: "Redhat 7 static vm ip address"
          CENT7_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_centos_7_static_vm_ip_address}"
            description: "CentOS 7 static vm ip address"
          SSH_USER:
            allowCustom: false
            default:  "automation"
            description: "SSH user name in automation"
          SSH_PRIVATE_KEY:
            allowCustom: false
            default:  "${int_automation_ssh_privateKey}"
            description: "SSH private key value in automation"
          GITHUB_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "PIPA/Org_test_Automation_Webhooks"
            description: "GitHub webhook test repository"
          BITBUCKET_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "jfbeta/org_test_automation_webhooks"
            description: "Bitbucket webhook test repository"
          BITBUCKETSERVERBASIC_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "PIP/tests"
            description: "BitbucketServerBasic webhook test repository"
          GITLAB_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "jfbeta/webhooks"
            description: "GitLab webhook test repository"
          PIPELINES_SERVICE_USER_TOKEN:
            allowCustom: true
            default: "Testing1234"
            description: Service User Token
          DEPLOY_KEYS_REPOSITORY_FULL_NAME:
            allowCustom: true
            default: "PIPA/org_test_automation_deploy_keys"
            description: 'deploy keys automation github repository'
          AWS_NODEPOOL_CUSTOMTAG_KEYS:
            description: "keys for custom tag to identify testing instances"
            default: "pipelines-internal,Group"
            allowCustom: true
          AWS_NODEPOOL_CUSTOMTAG_VALUES:
            description: "values for custom tag to identify testing instances"
            default: "testing,PIPELINES"
            allowCustom: true
          BITBUCKET_SERVER_PASSWORD:
            description: "BBS password"
            default: "${int_test_automation_bbs_new_password}"
            allowCustom: true
          BITBUCKET_SERVER_URL:
            description: "BBS url"
            default: "${int_test_automation_bbs_new_url}"
            allowCustom: true
          BITBUCKET_SERVER_TOKEN:
            description: "BBS token"
            default: "${int_automation_bbs_aps_BITBUCKET_SERVER_TOKEN}"
            allowCustom: true
          BITBUCKET_SERVER_USERNAME:
            description: "BBS username"
            default: "${int_test_automation_bbs_new_username}"
            allowCustom: true
          GITHUB_REPOSITORY_BRANCH: "master"
          GITHUB_REPOSITORY_FULLPATH_BASH: "jfrog/Org_test_Automation_bash"
          GITHUB_REPOSITORY_FULLPATH_POWERSHELL: "jfrog/Org_test_Automation_PowerShell"
          MULTIBRANCH_REPOSITORY_FULL_NAME: "PIPA/org_test_automation_MultiBranch"
          GITHUB_REPOSITORY_FULLPATH_BASH_BRANCH: "master"
          EMPTY_REPOSITORY_FULL_NAME : "PIPA/Org_test_Automation_empty"
          EXTENSIONS_REPOSITORY_FULL_NAME : "PIPA/extensions"
          TEMPLATES_REPOSITORY_FULL_NAME : "PIPA/templates"
          GITHUB_REPOSITORY_FULLPATH: "jfrog/Org_test_Automation"
          GITHUB_MULTIBRANCH_REPOSITORY_FULL_NAME: "jfrog/org_test_automation_MultiBranch"
          REPOSITORY_SANITY_PIPELINE_FULL_NAME: "PIPA/sanity_pipeline"
          FIRSTPROJECTNAME: "firstProject"
          FIRSTPROJECTKEY: "first"
          SECONDPROJECTNAME: "secondProject"
          SECONDPROJECTKEY: "second"
      integrations:
        - name: test_automation
        - name: test_automation_token
        - name: KubeFile_automation
        - name: lightweight_automation_generic
        - name: automation_ssh
        - name: test_automation_bbs_new
        - name: itest_github
        - name: entplus_deployer
        - name: pipelines_itest_slack
        - name: pipelines_mqtest_slack
        - name: entArt
        - name: automation_bbs_aps
        - name: s_gitHub
    steps:
      - name: setup_PreMatrix
        type: PreMatrix
        configuration:
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - "16"
          integrations:
            - name: entArt
            - name: az_jfrog_new
            - name: test_automation_gcp
          inputResources:
            - name: auto_gitRepo
              trigger: false
            - name: Org_test_Automation_BBS
              trigger: false
            - name: Org_test_Automation_bash_BBS
              trigger: false
            - name: Org_test_Automation_PowerShell_BBS
              trigger: false
            - name: automation_templateFS
              trigger: false
            - name: triggerLightWeightAutomation
              trigger: false
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            listOfTests: "core/api/systemCodes.js"
        execution:
          onStart:
            - node -v
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - cp -r $res_auto_gitRepo_resourcePath/automation/tests .
            - pushd tests
            - cp -r $res_Org_test_Automation_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_bash_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_PowerShell_BBS_resourcePath .
            - ls -la
            - cp -r $res_automation_templateFS_resourcePath .
            - restore_pipeline_files jsonfile $confFileName
            - if [[ -f "$confFileName" ]]; then jsonfile=true && cat $confFileName; fi
            - if ( $jsonfile && $removeConfFile ); then echo "removing confFileName" && rm -rf $confFileName; fi
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - sudo chmod 0777 $TEMPLATE_BINARY_PATH
            - export testCases=$listOfTests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - ./test.sh
            - popd
            - rm -rf $res_auto_gitRepo_resourcePath
            - rm -rf $res_Org_test_Automation_BBS_resourcePath
            - rm -rf $res_Org_test_Automation_bash_BBS_resourcePath
            - rm -rf $res_Org_test_Automation_PowerShell_BBS_resourcePath
  {{- range $scmTestFiles := .Values.automation.scmTestFiles }}
      - name: {{ $scmTestFiles.name }}ScmTest
        type: Matrix
        configuration:
          affinityGroup: itestscm
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            listOfTests: "{{ $scmTestFiles.file }}"
          nodePool: pipelines_testing
          inputSteps:
            - name: setup_PreMatrix
              status:
                - failure
                - success
          outputResources:
            - name: list_grep_resource
          integrations:
            - name: entArt
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter
      {{- end }}
      - name: ScmTestBash
        type: Matrix
        configuration:
          affinityGroup: itestscm
          runtime:
            type: host
          nodePool: pipelines_testing
          inputSteps:
            - name: setup_PreMatrix
              status:
                - failure
                - success
          outputResources:
            - name: list_grep_resource
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/apiHeader.js,\
                            core/api/auth.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_bash"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter
      - name: tearDown_tests_PostMatrix
        type: PostMatrix
        configuration:
          runtime:
            type: host
          integrations:
            - name: entArt
          inputResources:
            - name: auto_gitRepo
              trigger: false
          outputResources:
            - name: scmReleaseApprovalBag
          inputSteps:
            {{- range $scmTestFiles := .Values.automation.scmTestFiles }}
            - name: {{ $scmTestFiles.name }}ScmTest
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            {{- end }}
            - name: ScmTestBash
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
        execution:
            onComplete:
            - write_output scmReleaseApprovalBag APPROVAL_STATUS='REQUESTING_APPROVAL_FOR_RELEASE_PIPELINES'
            - mkdir result-${run_id}
            {{- range $scmTestFiles := .Values.automation.scmTestFiles }}
            - save_tests ./{{ $scmTestFiles.name }}/testResults/mocha-junit-reporter
            - mv ./{{ $scmTestFiles.name }}/testResults/mochawesome/*.json result-${run_id}/
            {{- end }}
            {{- range $scmTestFilesBash := .Values.automation.scmTestFilesBash }}
              - save_tests ./{{ $scmTestFilesBash.name }}/testResults/mocha-junit-reporter
              - mv ./{{ $scmTestFilesBash.name }}/testResults/mochawesome/*.json result-${run_id}/
            {{- end }}
            - add_pipeline_files result-${run_id} result-${run_id}
            - pushd $res_auto_gitRepo_resourcePath/automation/tests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - ./test.sh
            - restore_pipeline_files result-${run_id} result_itest
            - npm run merge-json-reports && npm run merge-html-reports
            - source pipelines_common.sh
            - uploadResult="$(on_complete_itest_SCM)"
            - reportPath=${uploadResult%%:*}
            - reportLink="https://entplus.jfrog.io/artifactory/pipe-itest-reports/itest-SCM-reports/$reportPath"
            - echo "${reportLink}"
            - testResult="success"
            {{- range $scmTestFiles := .Values.automation.scmTestFiles }}
            - save_tests ./{{ $scmTestFiles.name }}/testResults/mocha-junit-reporter
            - |
              if [ "$step_"{{ $scmTestFiles.name }}"_statusName" != "success" ]
                then
                  testResult="failure"
              fi
            {{- end }}
            - colorBar="#00FF00"
            - |
              if [ "$testResult" == "failure" ]
                then
                  colorBar="#FF0000"
              fi
            {{ if hasSuffix "full" "{{gitBranch}}" }}
            - send_notification pipelines_mqtest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}" --color "$colorBar"
            {{ end }}
            {{ if eq "master" "{{gitBranch}}" }}
            - send_notification pipelines_itest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}" --color "$colorBar"
            {{ end }}

  - name: webhooks_itest
    configuration:
      chronological: true
      nodePool: pipelines_testing
      inputResources:
        - name: itestWebhooks
      environmentVariables:
        readOnly:
          #set this env to true to delete the Conf.json file
          removeConfFile: "false"
          confFileName: conf.json
          SKIP_NPM_INSTALL:
            description: "Skip npm install for faster setup"
            default: "false"
            allowCustom: true
          exitCode: "1"
          LOG_LEVEL: "debug"
          JPD_URL: "$res_itestWebhooks_URL"
          JFROG_ARTIFACTORY_USER: "admin"
          JFROG_ADMIN_ARTIFACTORY_PASSWORD: "$res_itestWebhooks_JPD_PASSWORD"
          JFROG_ARTIFACTORY_APIKEY: "$res_itestWebhooks_JPD_PASSWORD"
          GITHUB_TOKEN: "${int_s_gitHub_token}"
          GITHUB_URL: "${int_test_automation_token_GITHUB_URL}"
          JFROG_JOIN_KEY: "$res_itestWebhooks_JPD_JOIN_KEY"
          DEFAULT_NODE_POOL_NAME:
            allowCustom: true
            default: u18dynamic
            description: "Default nodePool"
          #by default this is set to node pool with name `u16dynamic`
          gitUser: "PIPA"
          PREP_BUILDNODES: "false"
          DEFAULT_UBUNTU_NODEPOOL_OS:
            allowCustom: true
            default: "Ubuntu_18.04"
            description: "Default operating system for node pool tests"
          DEFAULT_NODEPOOL_NUMBEROFNODES:
            allowCustom: true
            default: 100
            description: "Default number of nodes for node pool tests"
          DEFAULT_NODEPOOL_REGION:
            allowCustom: true
            default: "eu-central-1"
            description: "Default region for node pool tests"
          DEFAULT_AZURE_NODEPOOL_REGION:
            allowCustom: true
            default: "westus"
            description: "Default region for azure node pool tests"
          DEFAULT_GCP_NODEPOOL_REGION:
            allowCustom: true
            default: "us-west1"
            description: "Default region for gcp node pool tests"
          DEFAULT_NODEPOOL_ARCHITECTURE:
            allowCustom: true
            default: "x86_64"
            description: "Default architecture for node pool tests"
          DEFAULT_NODEPOOL_NODEIDLEINTERVAL:
            allowCustom: true
            default: 1
            description: "Default node interval(in min) for node pool tests"
          DEFAULT_NODEPOOL_DISKSIZE:
            allowCustom: true
            default: 90
            description: "Default disk size for node pool tests"
          DEFAULT_NODEPOOL_TIMEOUT:
            allowCustom: true
            default: 30000
            description: "Default timeout(in sec) for node pool tests"
          DEFAULT_WINDOWS_NODEPOOL_OS:
            allowCustom: true
            default: "WindowsServer_2019"
          AWS_NODEPOOL_KEYPAIRNAME:
            description: "AWS key-pair"
            default: "Repo21KeyPair"
            allowCustom: true
          AWS_NODEPOOL_SECOND_KEYPAIRNAME:
            description: "AWS second key-pair"
            default: "pipetesting003-eu-central-1"
            allowCustom: true
          AWS_NODEPOOL_SUBNETID:
            description: "Default AWS subnet-id"
            default: "subnet-050a07ea2f5cbee1c"
            allowCustom: true
          AWS_NODEPOOL_SECOND_SUBNETID:
            description: "second AWS subnet-id"
            default: "subnet-050a07ea2f5cbee1c"
            allowCustom: true
          AWS_NODEPOOL_INSTANCESIZE:
            description: "Default AWS instance-size"
            default: "t3a.medium"
            allowCustom: true
          AWS_NODEPOOL_WIN_19_INSTANCESIZE:
            description: "Default AWS instance-size"
            default: "t3a.medium"
            allowCustom: true
          AWS_NODEPOOL_SECURITYGROUPID:
            description: " Default AWS security group-id"
            default: "sg-0f8572e8d751775c2"
            allowCustom: true
          AWS_NODEPOOL_SECOND_SECURITYGROUPID:
            description: " second AWS security group-id"
            default: "sg-0ea095851df05843e"
            allowCustom: true
          AWS_PROJECT_INTEGRATION_ACCESSKEYID:
            description: "Default AWS access key-id"
            default: "${int_test_automation_token_AWS_DEV2CLOUD_ACCESSKEYID}"
            values:
              - "${int_test_automation_token_AWS_DEV2CLOUD_ACCESSKEYID}"
              - "${int_test_automation_token_AWS_PROJECT_INTEGRATION_ACCESSKEYID}"
            allowCustom: true
          AWS_PROJECT_INTEGRATION_SECRETACCESSKEY:
            description: "Default AWS ecret access-key"
            default: "${int_test_automation_token_AWS_DEV2CLOUD_SECRETACCESSKEY}"
            values:
              - "${int_test_automation_token_AWS_DEV2CLOUD_SECRETACCESSKEY}"
              - "${int_test_automation_token_AWS_PROJECT_INTEGRATION_SECRETACCESSKEY}"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_APPID:
            description: "Default Azure app-id"
            default: "192757c5-73a6-4257-84ec-1fe4c30f98fb"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_PASSWORD:
            description: "Default Azure password"
            default: "${int_az_jfrog_new_password}"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_TENANT:
            description: "Default Azure tenant key"
            default: "ad8b5a8c-9862-4c41-a341-aa838fc564df"
            allowCustom: true
          AZURE_NODEPOOL_SUBSCRIPTIONID:
            allowCustom: true
            default: "f27d81be-eea4-479e-a745-11088b8cc1b0"
            description: "Default Azure subscription-id"
          AZURE_NODEPOOL_RESOURCEGROUPNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure resource group name"
          AZURE_NODEPOOL_VNETNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure vnetname"
          AZURE_NODEPOOL_SUBNETNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure subnet name"
          AZURE_NODEPOOL_PUBLICSSHKEY:
            allowCustom: true
            default: "\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCA0GPIdWfyEn21jkMhS8/JvoJ4viuPmnBhuazjwUbilM3zO38hQc8nr8eW0zJS/zpf2V9QewpJ1t9x5tw4bdTRMN99aaIbqr6ZSz/1ofFL1PkpC9Y7HWi+dmpxlIqRkX6JGPaUNb2ql71vVPY0tLg2G4MgcX/ZFQCVO3z/o20HURgrcxYEu5A3+dOkyiE3JQBi+s66cgDm7p3IIND2eEHcZiIsaW6vg2T85oF8WkXcpHFLLXt5gzND6f/8TwW657QXe2P5mijWwTtCOaopfSK0vXC1dFzPPpwKGPTv7KrsTSPL3c/QP6YqEYratKpNTenmvGPGqYNFgj8oMIbVN2SP\""
            description: "Default Azure public ssh-key"
          AZURE_NODEPOOL_INSTANCESIZE:
            allowCustom: true
            default: "Standard_F2s"
            description: "Default Azure instance size"
          GCP_NODEPOOL_INSTANCESIZE:
            allowCustom: true
            default: "n1-standard-2"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_SUBNET:
            allowCustom: true
            default: "jfrog-usw1-dynamicnodes"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_NETWORK_TAGS:
            allowCustom: true
            default: "behind-nat,jenkins,pipelines,xray-app,xray-apps"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_ZONE:
            allowCustom: true
            default: "us-west1-b"
            description: "This variable is used to set default instance size for azure node pool"
          D_GOOGLECLOUD_PROJECT_INTEGRATION_JSONKEY:
            allowCustom: true
            default: "${int_test_automation_gcp_jsonKey}"
            description: "This variable is used to set default instance size for azure node pool"
          KUBERNETES_NODEPOOL_STORAGECLASS:
            allowCustom: true
            default: "standard"
            description: "This variable is used to set default storage class for kubernetes node pool"
          KUBERNETES_NODEPOOL_NAMESPACE:
            allowCustom: true
            default: "pipe-master-pool"
            description: "This variable is used to set default namespace for kubernetes node pool"
          KUBERNETES_PROJECT_INTEGRATION_KUBECONFIG:
            allowCustom: true
            default: "${int_KubeFile_automation_kubeconfig}"
            description: "This variable is used to set default kubeconfig for kubernetes node pool"
          KUBERNETES_PROJECT_INTEGRATION_KUBECONFIG_PATH:
            allowCustom: true
            default: "${step_workspace_dir}/KubeFile_automation/config"
            description: "This variable is used to set default kubeconfig for kubernetes node pool"
          DONT_DELETE_PS:
            description: "When run status reaches error status, pipeline source doesn't get deleted "
            default: "true"
            allowCustom: true
          GREP:
            description: "Only run tests matching this string"
            default: "FLAKY"
            allowCustom: true
          INVERT:
            description: "Skip all the tests matching the grep string. Accepts only true or false"
            default: "true"
            allowCustom: true
          PREP_FOR_HELM_TESTS:
            description: "Upload helm test files to artifactory for running helm test cases"
            default: "true"
            allowCustom: true
          U18_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_ubuntu_18_static_vm_ip_address}"
            description: "Ubuntu 18 static vm ip address"
          U20_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_ubuntu_20_static_vm_ip_address}"
            description: "Ubuntu 20 static vm ip address"
          RHEL7_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_redhat_7_static_vm_ip_address}"
            description: "Redhat 7 static vm ip address"
          CENT7_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_centos_7_static_vm_ip_address}"
            description: "CentOS 7 static vm ip address"
          SSH_USER:
            allowCustom: false
            default:  "automation"
            description: "SSH user name in automation"
          SSH_PRIVATE_KEY:
            allowCustom: false
            default:  "${int_automation_ssh_privateKey}"
            description: "SSH private key value in automation"
          GITHUB_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "PIPA/Org_test_Automation_Webhooks"
            description: "GitHub webhook test repository"
          BITBUCKET_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "jfbeta/org_test_automation_webhooks"
            description: "Bitbucket webhook test repository"
          BITBUCKETSERVERBASIC_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "PIP/tests"
            description: "BitbucketServerBasic webhook test repository"
          GITLAB_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "jfbeta/webhooks"
            description: "GitLab webhook test repository"
          PIPELINES_SERVICE_USER_TOKEN:
            allowCustom: true
            default: "Testing1234"
            description: Service User Token
          DEPLOY_KEYS_REPOSITORY_FULL_NAME:
            allowCustom: true
            default: "PIPA/org_test_automation_deploy_keys"
            description: 'deploy keys automation github repository'
          AWS_NODEPOOL_CUSTOMTAG_KEYS:
            description: "keys for custom tag to identify testing instances"
            default: "pipelines-internal,Group"
            allowCustom: true
          AWS_NODEPOOL_CUSTOMTAG_VALUES:
            description: "values for custom tag to identify testing instances"
            default: "testing,PIPELINES"
            allowCustom: true
          BITBUCKET_SERVER_PASSWORD:
            description: "BBS password"
            default: "${int_test_automation_bbs_new_password}"
            allowCustom: true
          BITBUCKET_SERVER_URL:
            description: "BBS url"
            default: "${int_test_automation_bbs_new_url}"
            allowCustom: true
          BITBUCKET_SERVER_USERNAME:
            description: "BBS username"
            default: "${int_test_automation_bbs_new_username}"
            allowCustom: true
          GITHUB_REPOSITORY_BRANCH: "master"
          GITHUB_REPOSITORY_FULLPATH_BASH: "jfrog/Org_test_Automation_bash"
          GITHUB_REPOSITORY_FULLPATH_POWERSHELL: "jfrog/Org_test_Automation_PowerShell"
          MULTIBRANCH_REPOSITORY_FULL_NAME: "PIPA/org_test_automation_MultiBranch"
          GITHUB_REPOSITORY_FULLPATH_BASH_BRANCH: "master"
          EMPTY_REPOSITORY_FULL_NAME : "PIPA/Org_test_Automation_empty"
          EXTENSIONS_REPOSITORY_FULL_NAME : "PIPA/extensions"
          TEMPLATES_REPOSITORY_FULL_NAME : "PIPA/templates"
          GITHUB_REPOSITORY_FULLPATH: "jfrog/Org_test_Automation"
          GITHUB_MULTIBRANCH_REPOSITORY_FULL_NAME: "jfrog/org_test_automation_MultiBranch"
      integrations:
        - name: test_automation
        - name: test_automation_token
        - name: KubeFile_automation
        - name: lightweight_automation_generic
        - name: automation_ssh
        - name: test_automation_bbs_new
        - name: itest_github
        - name: entplus_deployer
        - name: pipelines_itest_slack
        - name: pipelines_mqtest_slack
        - name: s_gitHub
    steps:
      - name: setup_PreMatrix
        type: PreMatrix
        configuration:
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - "14"
          integrations:
            - name: entArt
            - name: az_jfrog_new
            - name: test_automation_gcp
          inputResources:
            - name: auto_gitRepo
              trigger: false
            - name: Org_test_Automation_BBS
              trigger: false
            - name: Org_test_Automation_bash_BBS
              trigger: false
            - name: Org_test_Automation_PowerShell_BBS
              trigger: false
            - name: automation_templateFS
              trigger: false
            - name: triggerLightWeightAutomation
              trigger: false
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            listOfTests: "core/api/systemCodes.js"
        execution:
          onStart:
            - node -v
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - cp -r $res_auto_gitRepo_resourcePath/automation/tests .
            - pushd tests
            - cp -r $res_Org_test_Automation_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_bash_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_PowerShell_BBS_resourcePath .
            - ls -la
            - cp -r $res_automation_templateFS_resourcePath .
            - restore_pipeline_files jsonfile $confFileName
            - if [[ -f "$confFileName" ]]; then jsonfile=true && cat $confFileName; fi
            - if ( $jsonfile && $removeConfFile ); then echo "removing confFileName" && rm -rf $confFileName; fi
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - sudo chmod 0777 $TEMPLATE_BINARY_PATH
            - export testCases=$listOfTests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - ./test.sh
            - popd
            - rm -rf $res_auto_gitRepo_resourcePath
            - rm -rf $res_Org_test_Automation_BBS_resourcePath
            - rm -rf $res_Org_test_Automation_bash_BBS_resourcePath
            - rm -rf $res_Org_test_Automation_PowerShell_BBS_resourcePath
      - name: webhooks_test
        type: Matrix
        configuration:
          affinityGroup: itest
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            listOfTests: "core/webhooks/commit.js,core/webhooks/prClose.js,core/webhooks/prOpen.js,core/webhooks/tags.js"
          nodePool: pipelines_testing
          inputSteps:
            - name: setup_PreMatrix
              status:
                - failure
                - success
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter
      - name: tearDown_tests_PostMatrix
        type: PostMatrix
        configuration:
          runtime:
            type: host
          integrations:
            - name: entArt
          inputResources:
            - name: auto_gitRepo
              trigger: false
          outputResources:
            - name: webhookReleaseApprovalBag
          inputSteps:
            - name: webhooks_test
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
        execution:
          onComplete:
            - write_output webhookReleaseApprovalBag APPROVAL_STATUS='REQUESTING_APPROVAL_FOR_RELEASE_PIPELINES'
            - mkdir result-${run_id}
            - save_tests ./webhooks_test/testResults/mocha-junit-reporter
            - mkdir result-${run_id}/webhooks_test/
            - mv ./webhooks_test/testResults/ result-${run_id}/webhooks_test/
            - add_pipeline_files result-${run_id} result-${run_id}
            - pushd $res_auto_gitRepo_resourcePath/automation/tests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - ./test.sh
            - restore_pipeline_files result-${run_id} result_itest
            - source pipelines_common.sh
            - uploadResult="$(on_complete_itest_webhooks)"
            - reportPath=${uploadResult%%:*}
            - reportLink="https://entplus.jfrog.io/artifactory/pipe-itest-reports/webhooks-itest/$reportPath"
            - echo "${reportLink}"
            - colorBar="#00FF00"
            - |
              if [ "$stepwebhooks_test_statusName" != "success" ]
                then
                  colorBar="#FF0000"
              fi
            {{ if hasSuffix "full" "{{gitBranch}}" }}
            - send_notification pipelines_mqtest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}" --color "$colorBar
            {{ end }}
            {{ if eq "master" "{{gitBranch}}" }}
            - send_notification pipelines_itest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}" --color "$colorBar
            {{ end }}

  - name: iTest
    configuration:
      chronological: true
      nodePool: pipelines_testing
      inputResources:
        - name: ubuntu_18_static_vm
          trigger: false
        - name: ubuntu_20_static_vm
          trigger: false
        - name: redhat_7_static_vm
          trigger: false
        - name: centos_7_static_vm
          trigger: false
        - name: itestNonScm
        - name: cpGit
          trigger: false
      environmentVariables:
        readOnly:
          #set this env to true to delete the Conf.json file
          removeConfFile: "false"
          confFileName: conf.json
          SKIP_NPM_INSTALL:
            description: "Skip npm install for faster setup"
            default: "false"
            allowCustom: true
          exitCode: "1"
          LOG_LEVEL: "debug"
          JPD_URL: 
            allowCustom: true
            default: "$res_itestNonScm_URL"
            description: "JPD url"
          JFROG_ARTIFACTORY_USER: "admin"
          JFROG_ADMIN_ARTIFACTORY_PASSWORD: "$res_itestNonScm_JPD_PASSWORD"
          JFROG_ARTIFACTORY_APIKEY: "$res_itestNonScm_JPD_PASSWORD"
          GITHUB_TOKEN: "${int_s_gitHub_token}"
          GITHUB_URL: "${int_test_automation_token_GITHUB_URL}"
          JFROG_JOIN_KEY:
            allowCustom: true
            default: "$res_itestNonScm_JPD_JOIN_KEY"
            description: "JFROG join key"
          DEFAULT_NODE_POOL_NAME:
            allowCustom: true
            default: u18dynamic
            description: "Default nodePool"
          #by default this is set to node pool with name `u16dynamic`
          gitUser: "PIPA"
          PREP_BUILDNODES: "true"
          DEFAULT_UBUNTU_NODEPOOL_OS:
            allowCustom: true
            default: "Ubuntu_18.04"
            description: "Default operating system for node pool tests"
          DEFAULT_NODEPOOL_NUMBEROFNODES:
            allowCustom: true
            default: 100
            description: "Default number of nodes for node pool tests"
          DEFAULT_NODEPOOL_REGION:
            allowCustom: true
            default: "ap-south-1"
            description: "Default region for node pool tests"
          DEFAULT_AZURE_NODEPOOL_REGION:
            allowCustom: true
            default: "westus"
            description: "Default region for azure node pool tests"
          DEFAULT_GCP_NODEPOOL_REGION:
            allowCustom: true
            default: "us-west1"
            description: "Default region for gcp node pool tests"
          DEFAULT_NODEPOOL_ARCHITECTURE:
            allowCustom: true
            default: "x86_64"
            description: "Default architecture for node pool tests"
          DEFAULT_NODEPOOL_NODEIDLEINTERVAL:
            allowCustom: true
            default: 1
            description: "Default node interval(in min) for node pool tests"
          DEFAULT_NODEPOOL_DISKSIZE:
            allowCustom: true
            default: 90
            description: "Default disk size for node pool tests"
          DEFAULT_NODEPOOL_TIMEOUT:
            allowCustom: true
            default: 30000
            description: "Default timeout(in sec) for node pool tests"
          DEFAULT_WINDOWS_NODEPOOL_OS:
            allowCustom: true
            default: "WindowsServer_2019"
          AWS_NODEPOOL_KEYPAIRNAME:
            description: "AWS key-pair"
            default: "dev2cloud-pp-aps1-nodepool"
            allowCustom: true
          AWS_NODEPOOL_SECOND_KEYPAIRNAME:
            description: "AWS second key-pair"
            default: "pipetesting003-eu-central-1"
            allowCustom: true
          AWS_NODEPOOL_SUBNETID:
            description: "Default AWS subnet-id"
            default: "subnet-0cdfebd1890e2967a"
            allowCustom: true
          AWS_NODEPOOL_SECOND_SUBNETID:
            description: "second AWS subnet-id"
            default: "subnet-050a07ea2f5cbee1c"
            allowCustom: true
          AWS_NODEPOOL_INSTANCESIZE:
            description: "Default AWS instance-size"
            default: "t3a.medium"
            allowCustom: true
          AWS_NODEPOOL_WIN_19_INSTANCESIZE:
            description: "Default AWS instance-size"
            default: "t3a.medium"
            allowCustom: true
          AWS_NODEPOOL_SECURITYGROUPID:
            description: " Default AWS security group-id"
            default: "sg-04d78bcf2e81c95a0"
            allowCustom: true
          AWS_NODEPOOL_SECOND_SECURITYGROUPID:
            description: " second AWS security group-id"
            default: "sg-0ea095851df05843e"
            allowCustom: true
          AWS_PROJECT_INTEGRATION_ACCESSKEYID:
            description: "Default AWS access key-id"
            default: "${int_test_automation_token_AWS_DEV2CLOUD_ACCESSKEYID}"
            values:
              - "${int_test_automation_token_AWS_DEV2CLOUD_ACCESSKEYID}"
              - "${int_test_automation_token_AWS_PROJECT_INTEGRATION_ACCESSKEYID}"
            allowCustom: true
          AWS_PROJECT_INTEGRATION_SECRETACCESSKEY:
            description: "Default AWS ecret access-key"
            default: "${int_test_automation_token_AWS_DEV2CLOUD_SECRETACCESSKEY}"
            values:
              - "${int_test_automation_token_AWS_DEV2CLOUD_SECRETACCESSKEY}"
              - "${int_test_automation_token_AWS_PROJECT_INTEGRATION_SECRETACCESSKEY}"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_APPID:
            description: "Default Azure app-id"
            default: "192757c5-73a6-4257-84ec-1fe4c30f98fb"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_PASSWORD:
            description: "Default Azure password"
            default: "${int_az_jfrog_new_password}"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_TENANT:
            description: "Default Azure tenant key"
            default: "ad8b5a8c-9862-4c41-a341-aa838fc564df"
            allowCustom: true
          AZURE_NODEPOOL_SUBSCRIPTIONID:
            allowCustom: true
            default: "f27d81be-eea4-479e-a745-11088b8cc1b0"
            description: "Default Azure subscription-id"
          AZURE_NODEPOOL_RESOURCEGROUPNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure resource group name"
          AZURE_NODEPOOL_VNETNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure vnetname"
          AZURE_NODEPOOL_SUBNETNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure subnet name"
          AZURE_NODEPOOL_PUBLICSSHKEY:
            allowCustom: true
            default: "\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCA0GPIdWfyEn21jkMhS8/JvoJ4viuPmnBhuazjwUbilM3zO38hQc8nr8eW0zJS/zpf2V9QewpJ1t9x5tw4bdTRMN99aaIbqr6ZSz/1ofFL1PkpC9Y7HWi+dmpxlIqRkX6JGPaUNb2ql71vVPY0tLg2G4MgcX/ZFQCVO3z/o20HURgrcxYEu5A3+dOkyiE3JQBi+s66cgDm7p3IIND2eEHcZiIsaW6vg2T85oF8WkXcpHFLLXt5gzND6f/8TwW657QXe2P5mijWwTtCOaopfSK0vXC1dFzPPpwKGPTv7KrsTSPL3c/QP6YqEYratKpNTenmvGPGqYNFgj8oMIbVN2SP\""
            description: "Default Azure public ssh-key"
          AZURE_NODEPOOL_INSTANCESIZE:
            allowCustom: true
            default: "Standard_F2s"
            description: "Default Azure instance size"
          GCP_NODEPOOL_INSTANCESIZE:
            allowCustom: true
            default: "n1-standard-2"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_SUBNET:
            allowCustom: true
            default: "jfrog-usw1-dynamicnodes"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_NETWORK_TAGS:
            allowCustom: true
            default: "behind-nat,jenkins,pipelines,xray-app,xray-apps"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_ZONE:
            allowCustom: true
            default: "us-west1-b"
            description: "This variable is used to set default instance size for azure node pool"
          D_GOOGLECLOUD_PROJECT_INTEGRATION_JSONKEY:
            allowCustom: true
            default: "${int_test_automation_gcp_jsonKey}"
            description: "This variable is used to set default instance size for azure node pool"
          KUBERNETES_NODEPOOL_STORAGECLASS:
            allowCustom: true
            default: "standard"
            description: "This variable is used to set default storage class for kubernetes node pool"
          KUBERNETES_NODEPOOL_NAMESPACE:
            allowCustom: true
            default: "pipe-master-pool"
            description: "This variable is used to set default namespace for kubernetes node pool"
          KUBERNETES_PROJECT_INTEGRATION_KUBECONFIG:
            allowCustom: true
            default: "${int_KubeFile_automation_kubeconfig}"
            description: "This variable is used to set default kubeconfig for kubernetes node pool"
          KUBERNETES_PROJECT_INTEGRATION_KUBECONFIG_PATH:
            allowCustom: true
            default: "${step_workspace_dir}/KubeFile_automation/config"
            description: "This variable is used to set default kubeconfig for kubernetes node pool"
          DONT_DELETE_PS:
            description: "When run status reaches error status, pipeline source doesn't get deleted "
            default: "true"
            allowCustom: true
          GREP:
            description: "Only run tests matching this string"
            default: "FLAKY"
            allowCustom: true
          INVERT:
            description: "Skip all the tests matching the grep string. Accepts only true or false"
            default: "true"
            allowCustom: true
          PREP_FOR_HELM_TESTS:
            description: "Upload helm test files to artifactory for running helm test cases"
            default: "true"
            allowCustom: true
          U18_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_ubuntu_18_static_vm_ip_address}"
            description: "Ubuntu 18 static vm ip address"
          U20_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_ubuntu_20_static_vm_ip_address}"
            description: "Ubuntu 20 static vm ip address"
          RHEL7_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_redhat_7_static_vm_ip_address}"
            description: "Redhat 7 static vm ip address"
          CENT7_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_centos_7_static_vm_ip_address}"
            description: "CentOS 7 static vm ip address"
          SSH_USER:
            allowCustom: false
            default:  "automation"
            description: "SSH user name in automation"
          SSH_PRIVATE_KEY:
            allowCustom: false
            default:  "${int_automation_ssh_privateKey}"
            description: "SSH private key value in automation"
          AWS_NODEPOOL_CUSTOMTAG_KEYS:
            description: "keys for custom tag to identify testing instances"
            default: "pipelines-internal,Group"
            allowCustom: true
          AWS_NODEPOOL_CUSTOMTAG_VALUES:
            description: "values for custom tag to identify testing instances"
            default: "testing,PIPELINES"
            allowCustom: true
          BITBUCKET_SERVER_PASSWORD:
            description: "BBS password"
            default: "${int_test_automation_bbs_new_password}"
            allowCustom: true
          BITBUCKET_SERVER_URL:
            description: "BBS url"
            default: "${int_test_automation_bbs_new_url}"
            allowCustom: true
          BITBUCKET_SERVER_USERNAME:
            description: "BBS username"
            default: "${int_test_automation_bbs_new_username}"
            allowCustom: true
          JENKINS_URL:
            description: "Jenkins url"
            default: "${int_pipelines_jenkins_auto_JENKINS_URL}"
            allowCustom: true
          JENKINS_USERNAME:
            description: "Jenkins Username"
            default: "${int_pipelines_jenkins_auto_JENKINS_USERNAME}"
            allowCustom: true
          JENKINS_PASSWORD:
            description: "Jenkins password"
            default: "${int_pipelines_jenkins_auto_JENKINS_PASSWORD}"
            allowCustom: true
          JENKINS_SECRET_TEXT:
            description: "Jenkins secret text"
            default: "${int_pipelines_jenkins_auto_JENKINS_SECRET_TEXT}"
            allowCustom: true
          JENKINS_TOKEN:
            description: "Jenkins secret text"
            default: "${int_pipelines_jenkins_auto_JENKINS_TOKEN}"
            allowCustom: true
          JENKINS_BEARER_TOKEN:
            description: "Jenkins secret text"
            default: "${int_pipelines_jenkins_auto_JENKINS_BEARER_TOKEN}"
            allowCustom: true
          GITHUB_REPOSITORY_BRANCH: "master"
          GITHUB_REPOSITORY_FULLPATH_BASH: "jfrog/Org_test_Automation_bash"
          GITHUB_REPOSITORY_FULLPATH_POWERSHELL: "jfrog/Org_test_Automation_PowerShell"
          MULTIBRANCH_REPOSITORY_FULL_NAME: "PIPA/org_test_automation_MultiBranch"
          GITHUB_REPOSITORY_FULLPATH_BASH_BRANCH: "master"
          EMPTY_REPOSITORY_FULL_NAME : "PIPA/Org_test_Automation_empty"
          EXTENSIONS_REPOSITORY_FULL_NAME : "PIPA/extensions"
          TEMPLATES_REPOSITORY_FULL_NAME : "PIPA/templates"
          GITHUB_REPOSITORY_FULLPATH: "jfrog/Org_test_Automation"
          GITHUB_MULTIBRANCH_REPOSITORY_FULL_NAME: "jfrog/org_test_automation_MultiBranch"
      integrations:
        - name: test_automation
        - name: test_automation_token
        - name: pipelines_jenkins_auto
        - name: KubeFile_automation
        - name: lightweight_automation_generic
        - name: automation_ssh
        - name: itest_github
        - name: entplus_deployer
        - name: pipelines_itest_slack
        - name: pipelines_mqtest_slack
        - name: test_automation_bbs_new
        - name: s_gitHub
    steps:
      - name: setup_PreMatrix
        type: PreMatrix
        configuration:
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - "16"
          integrations:
            - name: entArt
            - name: az_jfrog_new
            - name: test_automation_gcp
          inputResources:
            - name: auto_gitRepo
              trigger: false
            - name: cypress_gitRepo
              trigger: false
            - name: Org_test_Automation_BBS
              trigger: false
            - name: Org_test_Automation_bash_BBS
              trigger: false
            - name: Org_test_Automation_PowerShell_BBS
              trigger: false
            - name: automation_templateFS
              trigger: false
            - name: triggerLightWeightAutomation
              trigger: false
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            listOfTests: "core/api/systemCodes.js"
        execution:
          onStart:
            - echo ${int_test_automation_bbs_new_url}
            - echo ${BITBUCKET_SERVER_URL}
            - node -v
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - cp -r $res_auto_gitRepo_resourcePath/automation/tests .
            - pushd tests
            - cp -r $res_Org_test_Automation_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_bash_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_PowerShell_BBS_resourcePath .
            - ls -la
            - cp -r $res_automation_templateFS_resourcePath .
            - restore_pipeline_files jsonfile $confFileName
            - if [[ -f "$confFileName" ]]; then jsonfile=true && cat $confFileName; fi
            - if ( $jsonfile && $removeConfFile ); then echo "removing confFileName" && rm -rf $confFileName; fi
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - sudo chmod 0777 $TEMPLATE_BINARY_PATH
            - export testCases=$listOfTests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - pushd $res_cypress_gitRepo_resourcePath
            - pushd $res_cypress_gitRepo_resourcePath/services/frontend/e2e/uiTests
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - npm i
            - chmod +x ./JenkinsAutomation.sh
            - ./JenkinsAutomation.sh ${JPD_URL} ${JFROG_ADMIN_ARTIFACTORY_PASSWORD} ${JENKINS_URL} ${JENKINS_PASSWORD} ${JENKINS_SECRET_TEXT} ${JENKINS_TOKEN} ${JENKINS_BEARER_TOKEN} ${JENKINS_USERNAME} ${JFROG_ARTIFACTORY_USER}
            - popd
            - popd
            - ./test.sh
            - popd
            - rm -rf $res_auto_gitRepo_resourcePath
            - rm -rf $res_Org_test_Automation_BBS_resourcePath
            - rm -rf $res_Org_test_Automation_bash_BBS_resourcePath
            - rm -rf $res_Org_test_Automation_PowerShell_BBS_resourcePath

      - name: bash_tests_1
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/Bash/BashIntegrations/BashArtifactoryIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashAWSIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashDockerIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashGenericIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashGitHubIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashGoogleCloudIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashPagerDutyIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashSlackIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashJFrogPlatformIntegration.js"
            - listOfTests: "core/steps/Bash/BashResources/BashAql.js"
            - listOfTests: "core/steps/Bash/BashResources/BashBuildInfo.js"
            - listOfTests: "core/steps/Bash/BashResources/BashFileSpec.js"
            - listOfTests: "core/steps/Bash/BashResources/BashGitRepo.js"
            - listOfTests: "core/steps/Bash/BashResources/BashImage.js"
            - listOfTests: "core/steps/Bash/BashResources/BashPropertyBag.js"
            - listOfTests: "core/steps/Bash/BashResources/BashResources.js"
            - listOfTests: "core/steps/Bash/BashNative/Jenkins.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_bash"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: bash_tests_2
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/Bash/BashGeneric/approvalGates.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashMac.js"
            - listOfTests: "core/steps/Bash/BashGeneric/buildInfoUrl.js"
            - listOfTests: "core/steps/Bash/BashGeneric/consoleLogStreaming.js"
            - listOfTests: "core/steps/Bash/BashGeneric/environmentVariables.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashGenericSync.js"
            - listOfTests: "core/steps/Bash/BashGeneric/heartbeat.js"
            - listOfTests: "core/steps/Bash/BashGeneric/Tasks.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_bash"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: bash_tests_3
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsEndStep.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsFindConfiguration.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsGitRepo.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsJFrogCLI.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsRunDescription.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsRunVariables.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsSaveArtifactInfo.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsSendNotification.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsState.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsTestReports.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsTriggerPayload.js"
            - listOfTests: "core/steps/Bash/BashUtilityFunctions/UtilityFunctionsWriteOutput.js"
            - listOfTests: "core/steps/Bash/BashNative/Matrix1.js"
            - listOfTests: "core/steps/Bash/BashNative/Matrix2.js"
            - listOfTests: "core/steps/Bash/BashNative/Matrix3.js"
            - listOfTests: "core/steps/Bash/BashNative/Matrix4.js"
            - listOfTests: "core/steps/Bash/BashNative/Matrix5.js"
            - listOfTests: "core/steps/Bash/BashNative/MatrixSync.js"
            - listOfTests: "core/steps/Matrix/*.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashGeneric.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashGenericExecutionScripts.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashGenericRuntimeImage.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashGenericRunTrigger.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashGenericStepletStatus.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashGenericTestElements.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashGeneric13.js"
            - listOfTests: "core/steps/Bash/BashGeneric/BashGenericKubernetes.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_bash"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: step_sync_tests
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/Sync/HelmBlueGreenCleanup.js"
            - listOfTests: "core/steps/Sync/HelmBlueGreenDeploy.js"
            - listOfTests: "core/steps/Sync/HelmBlueGreenRoleSwitch.js"
            - listOfTests: "core/steps/Sync/UploadArtifact.js"
            - listOfTests: "core/steps/Sync/TriggerPipeline.js"
            - listOfTests: "core/steps/Sync/Tasks.js"

        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: ps_tests_1
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/consoleLogStreaming.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Sync/PowerShellGeneric.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/PowerShellGeneric.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/PowerShellGenericArtifactInfo.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/PowerShellGenericEnvironmentVariables.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/PowerShellGenericExecutionScripts.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/PowerShellGenericRuntime.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/PowerShellGenericRunTrigger.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/PowerShellGenericStepletStatus.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/Tasks.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellAirbrakeIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellArtifactoryIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellAWSIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellAzureKeysIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellBitbucketIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellBitBucketServerIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellDigitalOceanIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellDistributionIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellDockerIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellFileServerIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellGenericIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellJFrogPlatformIntegration.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_PowerShell"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: ps_tests_2
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellSSHKeyIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellGitHubEnterpriseIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellGitHubIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellGitLabIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellGoogleCloudIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellIncomingWebhookIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellJenkinsIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellJiraIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellKubernetesIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellNewRelicIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellOutgoingWebhookIntegration.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_PowerShell"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: ps_tests_3
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSPipeStateUntilityFunctions.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSRunStateUtilityFunction.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSAffinityGroupStateUtilityFunction.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSRunVariables.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctions.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsBumpSemver.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsCheckXray.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsEndStep.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsFindConfiguration.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsGitRepo.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsReplicateResource.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsSaveTests.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsSendNotification.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsUpdateRunDescription.js"
            - listOfTests: "core/steps/PowerShell/PSUtilityfunctions/PSUtilityFunctionsWriteOutput.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellPagerDutyIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellPemKeyIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellSlackIntegration.js"
            - listOfTests: "core/steps/PowerShell/PSIntegration/PowerShellSMTPIntegration.js"

        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_PowerShell"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: nodepools_tests
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests:  "core/nodePools/AWSDynamicNodes/c7Dynamicnode.js"
            - listOfTests:  "core/nodePools/AWSDynamicNodes/u18DynamicNode.js"
            - listOfTests:  "core/nodePools/AWSDynamicNodes/u20DynamicNode.js"
            - listOfTests:  "core/nodePools/AWSDynamicNodes/w19DynamicNodes1.js"
            - listOfTests:  "core/nodePools/AWSDynamicNodes/w19DynamicNodes2.js"
            - listOfTests:  "core/nodePools/AZDynamicNodes/c7DynamicNode.js"
            - listOfTests:  "core/nodePools/AZDynamicNodes/u18DynamicNode.js"
            - listOfTests:  "core/nodePools/AZDynamicNodes/u20DynamicNode.js"
            - listOfTests:  "core/nodePools/AZDynamicNodes/w19DynamicNodes.js"
            - listOfTests:  "core/nodePools/GCPDynamicNodes/c7DynamicNode.js"
            - listOfTests:  "core/nodePools/GCPDynamicNodes/u18DynamicNode.js"
            - listOfTests:  "core/nodePools/GCPDynamicNodes/u20DynamicNode.js"
            # - listOfTests:  "core/nodePools/K8sDynamicNodes/c7DynamicNode.js"
            # - listOfTests:  "core/nodePools/K8sDynamicNodes/k8sGenericNode.js"
            # - listOfTests:  "core/nodePools/K8sDynamicNodes/u18DynamicNode.js"
            # - listOfTests:  "core/nodePools/K8sDynamicNodes/u20DynamicNode.js"
            - listOfTests:  "core/nodePools/K8sDynamicNodes/k8sDynamicNodePool1.js"
            - listOfTests:  "core/nodePools/AWSDynamicNodePools.js"
            # - listOfTests:  "core/nodePools/AzureDynamicNodePools.js"
            - listOfTests:  "core/nodePools/dynamicAWSnode.js"
            # - listOfTests:  "core/nodePools/dynamicGCPNodePools.js"
            # - listOfTests:  "core/nodePools/dynamicKubernetesNodePools.js"
            - listOfTests:  "core/nodePools/GenericNodePools.js"
            - listOfTests:  "core/nodePools/staticNodes/u18static.js"
            - listOfTests:  "core/nodePools/staticNodes/u20static.js"
            - listOfTests:  "core/nodePools/staticNodes/cent7static.js"
            - listOfTests:  "core/nodePools/staticNodes/rhel7static.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: workflow_tests
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/workFlow/pipeline/sync/pipelineWorkFlowSync.js"
            - listOfTests: "core/workFlow/pipeline/trigger/pipelineWorkFlow5.js"
            - listOfTests: "core/workFlow/pipeline/trigger/pipelineWorkFlow6.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: workflow_tests_1
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/workFlow/step/conditionalWorkflow.js"
            - listOfTests: "core/workFlow/step/conditionalWorkflow1.js"
            - listOfTests: "core/workFlow/step/conditionalWorkflow2.js"
            - listOfTests: "core/workFlow/step/nodeCleanup.js"
            - listOfTests: "core/workFlow/step/signedPipelines.js"
            - listOfTests: "core/workFlow/step/stepWorkflow1.js"
            - listOfTests: "core/workFlow/step/stepWorkflow2.js"
            - listOfTests: "core/workFlow/step/stepWorkflow12.js"
            - listOfTests: "core/workFlow/step/stepWorkflow13.js"
            - listOfTests: "core/workFlow/step/stepWorkflow14.js"
            - listOfTests: "core/workFlow/step/stepWorkflow23.js"
            - listOfTests: "core/workFlow/step/stepWorkflow24.js"
            - listOfTests: "core/workFlow/step/stepWorkflow25.js"
            - listOfTests: "core/workFlow/step/stepWorkflow26.js"
            - listOfTests: "core/workFlow/step/stepWorkflow27.js"
            - listOfTests: "core/workFlow/step/stepWorkflow29.js"
            - listOfTests: "core/workFlow/step/triggerPipelineWorkflow.js"
            - listOfTests: "core/workFlow/environments/environmentWorkflow.js"
            - listOfTests: "core/workFlow/environments/globalAndProjectEnvironmentVariables.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: resource_tests
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/resources/Aql.js"
            - listOfTests: "core/resources/BuildInfo.js"
            - listOfTests: "core/resources/FileSpec.js"
            - listOfTests: "core/resources/GitRepo.js"
            - listOfTests: "core/resources/HelmChart.js"
            - listOfTests: "core/resources/Image.js"
            - listOfTests: "core/resources/PropertyBag.js"
            - listOfTests: "core/resources/ReleaseBundle.js"
            - listOfTests: "core/resources/RemoteFile.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: projectIntegration_tests
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/projectIntegrations/Airbrake.js"
            - listOfTests: "core/projectIntegrations/Artifactory.js"
            - listOfTests: "core/projectIntegrations/AWS.js"
            - listOfTests: "core/projectIntegrations/AzureKeys.js"
            - listOfTests: "core/projectIntegrations/Bitbucket.js"
            - listOfTests: "core/projectIntegrations/BitBucketServer.js"
            - listOfTests: "core/projectIntegrations/DigitalOcean.js"
            - listOfTests: "core/projectIntegrations/Distribute.js"
            - listOfTests: "core/projectIntegrations/DockerRegistry.js"
            - listOfTests: "core/projectIntegrations/dynamicAWS.js"
            - listOfTests: "core/projectIntegrations/DynamicAzure.js"
            - listOfTests: "core/projectIntegrations/dynamicGoogleCloud.js"
            - listOfTests: "core/projectIntegrations/dynamicKubernetes.js"
            - listOfTests: "core/projectIntegrations/FileServer.js"
            - listOfTests: "core/projectIntegrations/Generic.js"
            - listOfTests: "core/projectIntegrations/Generictests.js"
            - listOfTests: "core/projectIntegrations/GitHub.js"
            - listOfTests: "core/projectIntegrations/GitHubEnterprise.js"
            - listOfTests: "core/projectIntegrations/GitLab.js"
            - listOfTests: "core/projectIntegrations/GoogleCloud.js"
            - listOfTests: "core/projectIntegrations/IncomingWebhook.js"
            - listOfTests: "core/projectIntegrations/Jenkins.js"
            - listOfTests: "core/projectIntegrations/Jira.js"
            - listOfTests: "core/projectIntegrations/Kubernetes.js"
            - listOfTests: "core/projectIntegrations/NewRelic.js"
            - listOfTests: "core/projectIntegrations/OutgoingWebhook.js"
            - listOfTests: "core/projectIntegrations/PagerDutyEvents.js"
            - listOfTests: "core/projectIntegrations/PemKey.js"
            - listOfTests: "core/projectIntegrations/Slack.js"
            - listOfTests: "core/projectIntegrations/SMTP.js"
            - listOfTests: "core/projectIntegrations/SSHkey.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: tearDown_tests_PostMatrix
        type: PostMatrix
        configuration:
          runtime:
            type: host
          integrations:
            - name: entArt
          inputResources:
            - name: auto_gitRepo
              trigger: false
          outputResources:
            - name: iTestReleaseApprovalBag
          inputSteps:
            - name: bash_tests_1
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: bash_tests_2
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: bash_tests_3
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: step_sync_tests
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: ps_tests_1
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: ps_tests_2
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: nodepools_tests
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: workflow_tests
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: workflow_tests_1
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: ps_tests_3
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: resource_tests
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: projectIntegration_tests
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
        execution:
          onComplete:
            - write_output iTestReleaseApprovalBag APPROVAL_STATUS='REQUESTING_APPROVAL_FOR_RELEASE_PIPELINES'
            - mkdir result-${run_id}
            - save_tests ./bash_tests_1/testResults/mocha-junit-reporter
            - mv ./bash_tests_1/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./bash_tests_2/testResults/mocha-junit-reporter
            - mv ./bash_tests_2/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./bash_tests_3/testResults/mocha-junit-reporter
            - mv ./bash_tests_3/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./step_sync_tests/testResults/mocha-junit-reporter
            - mv ./step_sync_tests/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./ps_tests_1/testResults/mocha-junit-reporter
            - mv ./ps_tests_1/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./ps_tests_2/testResults/mocha-junit-reporter
            - mv ./ps_tests_2/testResults/mochawesome/*.json result-${run_id}/
            # - save_tests ./basic_tests/testResults/mocha-junit-reporter
            - save_tests ./nodepools_tests/testResults/mocha-junit-reporter
            - mv ./nodepools_tests/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./workflow_tests/testResults/mocha-junit-reporter
            - mv ./workflow_tests/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./workflow_tests_1/testResults/mocha-junit-reporter
            - mv ./workflow_tests_1/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./ps_tests_3/testResults/mocha-junit-reporter
            - mv ./ps_tests_3/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./resource_tests/testResults/mocha-junit-reporter
            - mv ./resource_tests/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./projectIntegration_tests/testResults/mocha-junit-reporter
            - mv ./projectIntegration_tests/testResults/mochawesome/*.json result-${run_id}/
            - add_pipeline_files result-${run_id} result-${run_id}
            - pushd $res_auto_gitRepo_resourcePath/automation/tests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - ./test.sh
            - restore_pipeline_files result-${run_id} result_itest
            - ls -la
            - npm run merge-json-reports && npm run merge-html-reports
            - source pipelines_common.sh
            - uploadResult="$(on_complete_itest_nonSCM)"
            - reportPath=${uploadResult%%:*}
            - reportLink="https://entplus.jfrog.io/artifactory/pipe-itest-reports/itest-non-SCM-reports/$reportPath"
            - echo "${reportLink}"
            - testResult="success"
            - |
              if [ "$step_bash_tests_1_statusName" != "success" ] || [ "$step_bash_tests_2_statusName" != "success" ] ||
              if [ "$step_bash_tests_3_statusName" != "success" ] || [ "$step_step_sync_tests_statusName" != "success" ] ||
              if [ "$step_ps_tests_1_statusName" != "success" ] || [ "$step_ps_tests_2_statusName" != "success" ] ||
              if [ "$step_ps_tests_3_statusName" != "success" ] || [ "$step_nodepools_tests_statusName" != "success" ] ||
              if [ "$step_workflow_tests_statusName" != "success" ] || [ "$step_workflow_tests_1_statusName" != "success" ] ||
              if [ "$step_resource_tests_statusName" != "success" ] || [ "$step_projectIntegration_tests_statusName" != "success" ]
                then
                  testResult="failure"
              fi
            - colorBar="#00FF00"
            - |
              if [ "$testResult" == "failure" ]
                then
                  colorBar="#FF0000"
              fi
            {{ if hasSuffix "full" "{{gitBranch}}" }}
            - send_notification pipelines_mqtest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}" --color "$colorBar"
            {{ end }}
            {{ if eq "master" "{{gitBranch}}" }}
            - send_notification pipelines_itest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}" --color "$colorBar"
            {{ end }}

  - name: itest_nativeSteps
    configuration:
      chronological: true
      nodePool: pipelines_testing
      inputResources:
        - name: itestNativeSteps
        - name: cpGit
          trigger: false
      environmentVariables:
        readOnly:
          #set this env to true to delete the Conf.json file
          removeConfFile: "false"
          confFileName: conf.json
          SKIP_NPM_INSTALL:
            description: "Skip npm install for faster setup"
            default: "false"
            allowCustom: true
          exitCode: "1"
          LOG_LEVEL: "debug"
          JPD_URL: "$res_itestNativeSteps_URL"
          JFROG_ARTIFACTORY_USER: "admin"
          JFROG_ADMIN_ARTIFACTORY_PASSWORD: "$res_itestNativeSteps_JPD_PASSWORD"
          JFROG_ARTIFACTORY_APIKEY: "$res_itestNativeSteps_JPD_PASSWORD"
          GITHUB_TOKEN: "${int_s_gitHub_token}"
          GITHUB_URL: "${int_test_automation_token_GITHUB_URL}"
          JFROG_JOIN_KEY: "$res_itestNativeSteps_JPD_JOIN_KEY"
          DEFAULT_NODE_POOL_NAME:
            allowCustom: true
            default: u18dynamic
            description: "Default nodePool"
          #by default this is set to node pool with name `u16dynamic`
          gitUser: "PIPA"
          PREP_BUILDNODES: "true"
          DEFAULT_UBUNTU_NODEPOOL_OS:
            allowCustom: true
            default: "Ubuntu_18.04"
            description: "Default operating system for node pool tests"
          DEFAULT_NODEPOOL_NUMBEROFNODES:
            allowCustom: true
            default: 100
            description: "Default number of nodes for node pool tests"
          DEFAULT_NODEPOOL_REGION:
            allowCustom: true
            default: "ap-south-1"
            description: "Default region for node pool tests"
          DEFAULT_AZURE_NODEPOOL_REGION:
            allowCustom: true
            default: "westus"
            description: "Default region for azure node pool tests"
          DEFAULT_GCP_NODEPOOL_REGION:
            allowCustom: true
            default: "us-west1"
            description: "Default region for gcp node pool tests"
          DEFAULT_NODEPOOL_ARCHITECTURE:
            allowCustom: true
            default: "x86_64"
            description: "Default architecture for node pool tests"
          DEFAULT_NODEPOOL_NODEIDLEINTERVAL:
            allowCustom: true
            default: 1
            description: "Default node interval(in min) for node pool tests"
          DEFAULT_NODEPOOL_DISKSIZE:
            allowCustom: true
            default: 90
            description: "Default disk size for node pool tests"
          DEFAULT_NODEPOOL_TIMEOUT:
            allowCustom: true
            default: 30000
            description: "Default timeout(in sec) for node pool tests"
          DEFAULT_WINDOWS_NODEPOOL_OS:
            allowCustom: true
            default: "WindowsServer_2019"
          AWS_NODEPOOL_KEYPAIRNAME:
            description: "AWS key-pair"
            default: "dev2cloud-pp-aps1-nodepool"
            allowCustom: true
          AWS_NODEPOOL_SECOND_KEYPAIRNAME:
            description: "AWS second key-pair"
            default: "pipetesting003-eu-central-1"
            allowCustom: true
          AWS_NODEPOOL_SUBNETID:
            description: "Default AWS subnet-id"
            default: "subnet-0cdfebd1890e2967a"
            allowCustom: true
          AWS_NODEPOOL_SECOND_SUBNETID:
            description: "second AWS subnet-id"
            default: "subnet-050a07ea2f5cbee1c"
            allowCustom: true
          AWS_NODEPOOL_INSTANCESIZE:
            description: "Default AWS instance-size"
            default: "t3a.medium"
            allowCustom: true
          AWS_NODEPOOL_WIN_19_INSTANCESIZE:
            description: "Default AWS instance-size"
            default: "t3a.medium"
            allowCustom: true
          AWS_NODEPOOL_SECURITYGROUPID:
            description: " Default AWS security group-id"
            default: "sg-04d78bcf2e81c95a0"
            allowCustom: true
          AWS_NODEPOOL_SECOND_SECURITYGROUPID:
            description: " second AWS security group-id"
            default: "sg-0ea095851df05843e"
            allowCustom: true
          AWS_PROJECT_INTEGRATION_ACCESSKEYID:
            description: "Default AWS access key-id"
            default: "${int_test_automation_token_AWS_DEV2CLOUD_ACCESSKEYID}"
            values:
              - "${int_test_automation_token_AWS_DEV2CLOUD_ACCESSKEYID}"
              - "${int_test_automation_token_AWS_PROJECT_INTEGRATION_ACCESSKEYID}"
            allowCustom: true
          AWS_PROJECT_INTEGRATION_SECRETACCESSKEY:
            description: "Default AWS ecret access-key"
            default: "${int_test_automation_token_AWS_DEV2CLOUD_SECRETACCESSKEY}"
            values:
              - "${int_test_automation_token_AWS_DEV2CLOUD_SECRETACCESSKEY}"
              - "${int_test_automation_token_AWS_PROJECT_INTEGRATION_SECRETACCESSKEY}"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_APPID:
            description: "Default Azure app-id"
            default: "192757c5-73a6-4257-84ec-1fe4c30f98fb"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_PASSWORD:
            description: "Default Azure password"
            default: "${int_az_jfrog_new_password}"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_TENANT:
            description: "Default Azure tenant key"
            default: "ad8b5a8c-9862-4c41-a341-aa838fc564df"
            allowCustom: true
          AZURE_NODEPOOL_SUBSCRIPTIONID:
            allowCustom: true
            default: "f27d81be-eea4-479e-a745-11088b8cc1b0"
            description: "Default Azure subscription-id"
          AZURE_NODEPOOL_RESOURCEGROUPNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure resource group name"
          AZURE_NODEPOOL_VNETNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure vnetname"
          AZURE_NODEPOOL_SUBNETNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure subnet name"
          AZURE_NODEPOOL_PUBLICSSHKEY:
            allowCustom: true
            default: "\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCA0GPIdWfyEn21jkMhS8/JvoJ4viuPmnBhuazjwUbilM3zO38hQc8nr8eW0zJS/zpf2V9QewpJ1t9x5tw4bdTRMN99aaIbqr6ZSz/1ofFL1PkpC9Y7HWi+dmpxlIqRkX6JGPaUNb2ql71vVPY0tLg2G4MgcX/ZFQCVO3z/o20HURgrcxYEu5A3+dOkyiE3JQBi+s66cgDm7p3IIND2eEHcZiIsaW6vg2T85oF8WkXcpHFLLXt5gzND6f/8TwW657QXe2P5mijWwTtCOaopfSK0vXC1dFzPPpwKGPTv7KrsTSPL3c/QP6YqEYratKpNTenmvGPGqYNFgj8oMIbVN2SP\""
            description: "Default Azure public ssh-key"
          AZURE_NODEPOOL_INSTANCESIZE:
            allowCustom: true
            default: "Standard_F2s"
            description: "Default Azure instance size"
          GCP_NODEPOOL_INSTANCESIZE:
            allowCustom: true
            default: "n1-standard-2"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_SUBNET:
            allowCustom: true
            default: "jfrog-usw1-dynamicnodes"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_NETWORK_TAGS:
            allowCustom: true
            default: "behind-nat,jenkins,pipelines,xray-app,xray-apps"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_ZONE:
            allowCustom: true
            default: "us-west1-b"
            description: "This variable is used to set default instance size for azure node pool"
          D_GOOGLECLOUD_PROJECT_INTEGRATION_JSONKEY:
            allowCustom: true
            default: "${int_test_automation_gcp_jsonKey}"
            description: "This variable is used to set default instance size for azure node pool"
          KUBERNETES_NODEPOOL_STORAGECLASS:
            allowCustom: true
            default: "standard"
            description: "This variable is used to set default storage class for kubernetes node pool"
          KUBERNETES_NODEPOOL_NAMESPACE:
            allowCustom: true
            default: "pipe-master-pool"
            description: "This variable is used to set default namespace for kubernetes node pool"
          KUBERNETES_PROJECT_INTEGRATION_KUBECONFIG:
            allowCustom: true
            default: "${int_KubeFile_automation_kubeconfig}"
            description: "This variable is used to set default kubeconfig for kubernetes node pool"
          KUBERNETES_PROJECT_INTEGRATION_KUBECONFIG_PATH:
            allowCustom: true
            default: "${step_workspace_dir}/KubeFile_automation/config"
            description: "This variable is used to set default kubeconfig for kubernetes node pool"
          DONT_DELETE_PS:
            description: "When run status reaches error status, pipeline source doesn't get deleted "
            default: "true"
            allowCustom: true
          GREP:
            description: "Only run tests matching this string"
            default: "FLAKY"
            allowCustom: true
          INVERT:
            description: "Skip all the tests matching the grep string. Accepts only true or false"
            default: "true"
            allowCustom: true
          PREP_FOR_HELM_TESTS:
            description: "Upload helm test files to artifactory for running helm test cases"
            default: "true"
            allowCustom: true
          U18_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_ubuntu_18_static_vm_ip_address}"
            description: "Ubuntu 18 static vm ip address"
          U20_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_ubuntu_20_static_vm_ip_address}"
            description: "Ubuntu 20 static vm ip address"
          RHEL7_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_redhat_7_static_vm_ip_address}"
            description: "Redhat 7 static vm ip address"
          CENT7_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_centos_7_static_vm_ip_address}"
            description: "CentOS 7 static vm ip address"
          SSH_USER:
            allowCustom: false
            default:  "automation"
            description: "SSH user name in automation"
          SSH_PRIVATE_KEY:
            allowCustom: false
            default:  "${int_automation_ssh_privateKey}"
            description: "SSH private key value in automation"
          GITHUB_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "PIPA/Org_test_Automation_Webhooks"
            description: "GitHub webhook test repository"
          BITBUCKET_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "jfbeta/org_test_automation_webhooks"
            description: "Bitbucket webhook test repository"
          BITBUCKETSERVERBASIC_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "PIP/tests"
            description: "BitbucketServerBasic webhook test repository"
          GITLAB_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "jfbeta/webhooks"
            description: "GitLab webhook test repository"
          PIPELINES_SERVICE_USER_TOKEN:
            allowCustom: true
            default: "Testing1234"
            description: Service User Token
          DEPLOY_KEYS_REPOSITORY_FULL_NAME:
            allowCustom: true
            default: "PIPA/org_test_automation_deploy_keys"
            description: 'deploy keys automation github repository'
          AWS_NODEPOOL_CUSTOMTAG_KEYS:
            description: "keys for custom tag to identify testing instances"
            default: "pipelines-internal,Group"
            allowCustom: true
          AWS_NODEPOOL_CUSTOMTAG_VALUES:
            description: "values for custom tag to identify testing instances"
            default: "testing,PIPELINES"
            allowCustom: true
          BITBUCKET_SERVER_PASSWORD:
            description: "BBS password"
            default: "${int_test_automation_bbs_new_password}"
            allowCustom: true
          BITBUCKET_SERVER_URL:
            description: "BBS url"
            default: "${int_test_automation_bbs_new_url}"
            allowCustom: true
          BITBUCKET_SERVER_USERNAME:
            description: "BBS username"
            default: "${int_test_automation_bbs_new_username}"
            allowCustom: true
          GITHUB_REPOSITORY_BRANCH: "master"
          GITHUB_REPOSITORY_FULLPATH_BASH: "jfrog/Org_test_Automation_bash"
          GITHUB_REPOSITORY_FULLPATH_POWERSHELL: "jfrog/Org_test_Automation_PowerShell"
          MULTIBRANCH_REPOSITORY_FULL_NAME: "PIPA/org_test_automation_MultiBranch"
          GITHUB_REPOSITORY_FULLPATH_BASH_BRANCH: "master"
          EMPTY_REPOSITORY_FULL_NAME : "PIPA/Org_test_Automation_empty"
          EXTENSIONS_REPOSITORY_FULL_NAME : "PIPA/extensions"
          TEMPLATES_REPOSITORY_FULL_NAME : "PIPA/templates"
          GITHUB_REPOSITORY_FULLPATH: "jfrog/Org_test_Automation"
          GITHUB_MULTIBRANCH_REPOSITORY_FULL_NAME: "jfrog/org_test_automation_MultiBranch"
      integrations:
        - name: test_automation
        - name: test_automation_token
        - name: KubeFile_automation
        - name: lightweight_automation_generic
        - name: automation_ssh
        - name: test_automation_bbs_new
        - name: itest_github
        - name: entplus_deployer
        - name: pipelines_itest_slack
        - name: pipelines_mqtest_slack
        - name: s_gitHub
    steps:
      - name: setup_PreMatrix
        type: PreMatrix
        configuration:
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - "16"
          integrations:
            - name: entArt
            - name: az_jfrog_new
            - name: test_automation_gcp
          inputResources:
            - name: auto_gitRepo
              trigger: false
            - name: Org_test_Automation_BBS
              trigger: false
            - name: Org_test_Automation_bash_BBS
              trigger: false
            - name: Org_test_Automation_PowerShell_BBS
              trigger: false
            - name: automation_templateFS
              trigger: false
            - name: triggerLightWeightAutomation
              trigger: false
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            listOfTests: "core/api/systemCodes.js"
        execution:
          onStart:
            - echo ${int_test_automation_bbs_new_url}
            - echo ${BITBUCKET_SERVER_URL}
            - node -v
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - cp -r $res_auto_gitRepo_resourcePath/automation/tests .
            - pushd tests
            - cp -r $res_Org_test_Automation_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_bash_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_PowerShell_BBS_resourcePath .
            - ls -la
            - cp -r $res_automation_templateFS_resourcePath .
            - restore_pipeline_files jsonfile $confFileName
            - if [[ -f "$confFileName" ]]; then jsonfile=true && cat $confFileName; fi
            - if ( $jsonfile && $removeConfFile ); then echo "removing confFileName" && rm -rf $confFileName; fi
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - sudo chmod 0777 $TEMPLATE_BINARY_PATH
            - export testCases=$listOfTests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - ./test.sh
            - popd
            - rm -rf $res_auto_gitRepo_resourcePath
            - rm -rf $res_Org_test_Automation_BBS_resourcePath
            - rm -rf $res_Org_test_Automation_bash_BBS_resourcePath
            - rm -rf $res_Org_test_Automation_PowerShell_BBS_resourcePath

      - name: bash_nativeSteps_1
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/Bash/BashNative/CreateReleaseBundle.js"
            - listOfTests: "core/steps/Bash/BashNative/DistributeReleaseBundle.js"
            - listOfTests: "core/steps/Bash/BashNative/DockerBuild.js"
            - listOfTests: "core/steps/Bash/BashNative/DockerPush.js"
            - listOfTests: "core/steps/Bash/BashNative/GoBuild.js"
            - listOfTests: "core/steps/Bash/BashNative/GoPublishBinary.js"
            - listOfTests: "core/steps/Bash/BashNative/GoPublishModule.js"
            - listOfTests: "core/steps/Bash/BashNative/GradleBuild.js"
            - listOfTests: "core/steps/Bash/BashNative/HelmBlueGreenCleanup.js"
            - listOfTests: "core/steps/Bash/BashNative/HelmBlueGreenDeploy.js"
            - listOfTests: "core/steps/Bash/BashNative/HelmBlueGreenRoleSwitch.js"
            - listOfTests: "core/steps/Bash/BashNative/HelmDeploy.js"
            - listOfTests: "core/steps/Bash/BashNative/HelmPublish.js"
            - listOfTests: "core/steps/Bash/BashNative/LinuxVMDeploy.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_bash"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: bash_nativeSteps_2
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/Bash/BashNative/MvnBuild.js"
            - listOfTests: "core/steps/Bash/BashNative/NpmBuild.js"
            - listOfTests: "core/steps/Bash/BashNative/NpmPublish.js"
            - listOfTests: "core/steps/Bash/BashNative/PostMatrix.js"
            - listOfTests: "core/steps/Bash/BashNative/PreMatrix.js"
            - listOfTests: "core/steps/Bash/BashNative/PromoteBuild.js"
            - listOfTests: "core/steps/Bash/BashNative/PublishBuildInfo.js"
            - listOfTests: "core/steps/Bash/BashNative/SignReleaseBundle.js"
            - listOfTests: "core/steps/Bash/BashNative/UploadArtifact.js"
            - listOfTests: "core/steps/Bash/BashNative/XrayScan.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_bash"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: powerShell_nativeSteps_1
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/PowerShell/PSNative/CreateReleaseBundle.js"
            - listOfTests: "core/steps/PowerShell/PSNative/DistributeReleaseBundle.js"
            - listOfTests: "core/steps/PowerShell/PSNative/DockerBuild.js"
            - listOfTests: "core/steps/PowerShell/PSNative/DockerPush.js"
            - listOfTests: "core/steps/PowerShell/PSNative/GoBuild.js"
            - listOfTests: "core/steps/PowerShell/PSNative/GoPublishBinary.js"
            - listOfTests: "core/steps/PowerShell/PSNative/GoPublishModule.js"
            - listOfTests: "core/steps/PowerShell/PSNative/GradleBuild.js"
            - listOfTests: "core/steps/PowerShell/PSNative/HelmPublish.js"
            - listOfTests: "core/steps/PowerShell/PSNative/MvnBuild.js"
            - listOfTests: "core/steps/PowerShell/PSNative/NpmPublish.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_PowerShell"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: powerShell_nativeSteps_2
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/PowerShell/PSNative/PowerShellHelmBlueGreenCleanup.js"
            - listOfTests: "core/steps/PowerShell/PSNative/PowerShellHelmBlueGreenDeploy.js"
            - listOfTests: "core/steps/PowerShell/PSNative/PowerShellHelmBlueGreenRoleSwitch.js"
            - listOfTests: "core/steps/PowerShell/PSNative/PowerShellHelmDeploy.js"
            # - listOfTests: "core/steps/PowerShell/PSNative/PowerShellLinuxVMDeploy.js"
            - listOfTests: "core/steps/PowerShell/PSNative/PowerShellUploadArtifact.js"
            - listOfTests: "core/steps/PowerShell/PSNative/PromoteBuild.js"
            - listOfTests: "core/steps/PowerShell/PSNative/PublishBuildInfo.js"
            - listOfTests: "core/steps/PowerShell/PSNative/SignReleaseBundle.js"
            - listOfTests: "core/steps/PowerShell/PSNative/XrayScan.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_PowerShell"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: tearDown_tests_PostMatrix
        type: PostMatrix
        configuration:
          runtime:
            type: host
          integrations:
            - name: entArt
          inputResources:
            - name: auto_gitRepo
              trigger: false
          outputResources:
            - name: iTestNativeReleaseApprovalBag
          inputSteps:
            - name: bash_nativeSteps_1
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: bash_nativeSteps_2
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: powerShell_nativeSteps_1
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: powerShell_nativeSteps_2
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
        execution:
          onComplete:
            - write_output iTestNativeReleaseApprovalBag APPROVAL_STATUS='REQUESTING_APPROVAL_FOR_RELEASE_PIPELINES'
            - mkdir result-${run_id}
            - save_tests ./bash_nativeSteps_1/testResults/mocha-junit-reporter
            - mv ./bash_nativeSteps_1/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./bash_nativeSteps_2/testResults/mocha-junit-reporter
            - mv ./bash_nativeSteps_2/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./powerShell_nativeSteps_1/testResults/mocha-junit-reporter
            - mv ./powerShell_nativeSteps_1/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./powerShell_nativeSteps_2/testResults/mocha-junit-reporter
            - mv ./powerShell_nativeSteps_2/testResults/mochawesome/*.json result-${run_id}/
            - add_pipeline_files result-${run_id} result-${run_id}
            - pushd $res_auto_gitRepo_resourcePath/automation/tests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - ./test.sh
            - restore_pipeline_files result-${run_id} result_itest
            - ls -la
            - npm run merge-json-reports && npm run merge-html-reports
            - source pipelines_common.sh
            - uploadResult="$(on_complete_itest_nonSCM)"
            - reportPath=${uploadResult%%:*}
            - reportLink="https://entplus.jfrog.io/artifactory/pipe-itest-reports/itest-non-SCM-reports/$reportPath"
            - echo "${reportLink}"
            - testResult="success"
            - |
              if [ "$step_bash_nativeSteps_1_statusName" != "success" ] || [ "$step_bash_nativeSteps_2_statusName" != "success" ] ||
              if [ "$step_powerShell_nativeSteps_1_statusName" != "success" ] || [ "$step_powerShell_nativeSteps_2_statusName" != "success" ] 
                then
                  testResult="failure"
              fi
            - colorBar="#00FF00"
            - |
              if [ "$testResult" == "failure" ]
                then
                  colorBar="#FF0000"
              fi
            {{ if hasSuffix "full" "{{gitBranch}}" }}
            - send_notification pipelines_mqtest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}" --color "$colorBar"
            {{ end }}
            {{ if eq "master" "{{gitBranch}}" }}
            - send_notification pipelines_itest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}" --color "$colorBar"
            {{ end }}

  - name: iTestNonDefaultProject
    configuration:
      nodePool: pipelines_testing
      inputResources:
        - name: ubuntu_18_static_vm
          trigger: false
        - name: ubuntu_20_static_vm
          trigger: false
        - name: redhat_7_static_vm
          trigger: false
        - name: centos_7_static_vm
          trigger: false
        - name: itestNonDefault
        - name: cpGit
          trigger: false
      environmentVariables:
        readOnly:
          #set this env to true to delete the Conf.json file
          removeConfFile: "false"
          confFileName: conf.json
          SKIP_NPM_INSTALL:
            description: "Skip npm install for faster setup"
            default: "false"
            allowCustom: true
          exitCode: "1"
          LOG_LEVEL: "debug"
          JPD_URL: "$res_itestNonDefault_URL"
          JFROG_ARTIFACTORY_USER: "admin"
          JFROG_ADMIN_ARTIFACTORY_PASSWORD: "$res_itestNonDefault_JPD_PASSWORD"
          JFROG_ARTIFACTORY_APIKEY: "$res_itestNonDefault_JPD_PASSWORD"
          GITHUB_TOKEN: "${int_s_gitHub_token}"
          GITHUB_URL: "${int_test_automation_token_GITHUB_URL}"
          JFROG_JOIN_KEY: "$res_itestNonDefault_JPD_JOIN_KEY"
          #by default this is set to node pool with name `u16dynamic`
          gitUser: "PIPA"
          AWS_NODEPOOL_KEYPAIRNAME: "dev2cloud-pp-aps1-nodepool"
          AWS_NODEPOOL_SECOND_KEYPAIRNAME:
            description: "AWS second key-pair"
            default: "pipetesting003-eu-central-1"
            allowCustom: true
          AWS_NODEPOOL_SUBNETID: "subnet-0cdfebd1890e2967a"
          AWS_NODEPOOL_SECOND_SUBNETID:
            description: "second AWS subnet-id"
            default: "subnet-050a07ea2f5cbee1c"
            allowCustom: true
          AWS_NODEPOOL_INSTANCESIZE: "t3a.medium"
          AWS_NODEPOOL_WIN_19_INSTANCESIZE:
            description: "Default AWS instance-size"
            default: "t3a.medium"
            allowCustom: true
          AWS_NODEPOOL_SECURITYGROUPID: "sg-04d78bcf2e81c95a0"
          AWS_NODEPOOL_SECOND_SECURITYGROUPID:
            description: " second AWS security group-id"
            default: "sg-0ea095851df05843e"
            allowCustom: true
          AWS_NODEPOOL_REGION: "ap-south-1"
          DEFAULT_NODE_POOL_NAME: "u18dynamic"
          AWS_PROJECT_INTEGRATION_ACCESSKEYID: ${int_lightweight_automation_generic_AWS_PROJECT_INTEGRATION_ACCESSKEYID}
          AWS_PROJECT_INTEGRATION_SECRETACCESSKEY: ${int_lightweight_automation_generic_AWS_PROJECT_INTEGRATION_SECRETACCESSKEY}
          NUMBER_OF_NODES_IN_NODEPOOL:
            description: "Number of nodes that need to present in the node pool"
            default: 200
            allowCustom: true
          # LOCAL_STATE_FILE_PATH: "/tmp/$steplet_number"
          DEFAULT_UBUNTU_NODEPOOL_OS: "Ubuntu_18.04"
          DEFAULT_NODEPOOL_NUMBEROFNODES: 200
          DEFAULT_NODEPOOL_REGION: "ap-south-1"
          DEFAULT_NODEPOOL_ARCHITECTURE: "x86_64"
          DEFAULT_NODEPOOL_NODEIDLEINTERVAL: 20
          DEFAULT_NODEPOOL_DISKSIZE: 90
          DEFAULT_NODEPOOL_TIMEOUT: 30000
          DEFAULT_WINDOWS_NODEPOOL_OS: "WindowsServer_2019"
          PREP_BUILDNODES: "true"
          DONT_DELETE_PS:
            description: "When run status reaches error status, pipeline source doesn't get deleted "
            default: "true"
            allowCustom: true
          GREP:
            description: "Only run tests matching this string"
            default: "FLAKY"
            allowCustom: true
          INVERT:
            description: "Skip all the tests matching the grep string. Accepts only true or false"
            default: "true"
            allowCustom: true
          U18_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_ubuntu_18_static_vm_ip_address}"
            description: "Ubuntu 18 static vm ip address"
          U20_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_ubuntu_20_static_vm_ip_address}"
            description: "Ubuntu 20 static vm ip address"
          RHEL7_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_redhat_7_static_vm_ip_address}"
            description: "Redhat 7 static vm ip address"
          CENT7_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_centos_7_static_vm_ip_address}"
            description: "CentOS 7 static vm ip address"
          SSH_USER:
            allowCustom: false
            default:  "automation"
            description: "SSH user name in automation"
          SSH_PRIVATE_KEY:
            allowCustom: false
            default:  "${int_automation_ssh_privateKey}"
            description: "SSH private key value in automation"
          AWS_NODEPOOL_CUSTOMTAG_KEYS:
            description: "keys for custom tag to identify testing instances"
            default: "pipelines-internal,Group"
            allowCustom: true
          AWS_NODEPOOL_CUSTOMTAG_VALUES:
            description: "values for custom tag to identify testing instances"
            default: "testing,PIPELINES"
            allowCustom: true
          BITBUCKET_SERVER_PASSWORD:
            description: "BBS password"
            default: "${int_test_automation_bbs_new_password}"
            allowCustom: true
          BITBUCKET_SERVER_URL:
            description: "BBS url"
            default: "${int_test_automation_bbs_new_url}"
            allowCustom: true
          BITBUCKET_SERVER_USERNAME:
            description: "BBS username"
            default: "${int_test_automation_bbs_new_username}"
            allowCustom: true
          GITHUB_REPOSITORY_BRANCH: "master"
          GITHUB_REPOSITORY_FULLPATH_BASH: "jfrog/Org_test_Automation_bash"
          GITHUB_REPOSITORY_FULLPATH_POWERSHELL: "jfrog/Org_test_Automation_PowerShell"
          MULTIBRANCH_REPOSITORY_FULL_NAME: "PIPA/org_test_automation_MultiBranch"
          GITHUB_REPOSITORY_FULLPATH_BASH_BRANCH: "master"
          EMPTY_REPOSITORY_FULL_NAME : "PIPA/Org_test_Automation_empty"
          EXTENSIONS_REPOSITORY_FULL_NAME : "PIPA/extensions"
          TEMPLATES_REPOSITORY_FULL_NAME : "PIPA/templates"
          GITHUB_REPOSITORY_FULLPATH: "jfrog/Org_test_Automation"
          GITHUB_MULTIBRANCH_REPOSITORY_FULL_NAME: "jfrog/org_test_automation_MultiBranch"
      integrations:
        - name: test_automation
        - name: test_automation_token
        - name: KubeFile_automation
        - name: lightweight_automation_generic
        - name: automation_ssh
        - name: entplus_deployer
        - name: pipelines_itest_slack
        - name: pipelines_mqtest_slack
        - name: test_automation_bbs_new
        - name: entArt
        - name: s_gitHub
    steps:
      - name: preMatrix
        type: PreMatrix
        configuration:
          runtime:
            type: host
          integrations:
            - name: entArt
          inputResources:
            - name: auto_gitRepo
              trigger: false
            - name: Org_test_Automation_BBS
              trigger: false
            - name: Org_test_Automation_bash_BBS
              trigger: false
            - name: Org_test_Automation_PowerShell_BBS
              trigger: false
            - name: automation_templateFS
              trigger: false
            - name: triggerLightWeightAutomation
              trigger: false
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            FIRSTPROJECTNAME: "firstProject"
            FIRSTPROJECTKEY: "first"
            SECONDPROJECTNAME: "secondProject"
            SECONDPROJECTKEY: "second"
            listOfTests: "core/api/systemCodes.js"
        execution:
          onStart:
            - node -v
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - cp -r $res_auto_gitRepo_resourcePath/automation/tests .
            - pushd tests
            - cp -r $res_Org_test_Automation_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_bash_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_PowerShell_BBS_resourcePath .
            - ls
            - cp -r $res_automation_templateFS_resourcePath .
            - restore_pipeline_files jsonfile $confFileName
            - if [[ -f "$confFileName" ]]; then jsonfile=true && cat $confFileName; fi
            - if ( $jsonfile && $removeConfFile ); then echo "removing confFileName" && rm -rf $confFileName; fi
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - sudo chmod 0777 $TEMPLATE_BINARY_PATH
            - export testCases=$listOfTests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - npm config set registry https://entplus.jfrog.io/artifactory/api/npm/npm-virtual
            - curl -u"${int_entplus_deployer_user}":"${int_entplus_deployer_apikey}" "https://entplus.jfrog.io/api/npm/auth" >> ~/.npmrc
            - npm config fix
            - npm ci
            # - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            # - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - ./test.sh
            - popd
            - rm -rf $res_auto_gitRepo_resourcePath
            - rm -rf $res_Org_test_Automation_BBS_resourcePath
            - rm -rf $res_Org_test_Automation_bash_BBS_resourcePath
            - rm -rf $res_Org_test_Automation_PowerShell_BBS_resourcePath

      - name: defaultPrimaryProject
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            SKIP_SETUP: "true"
            SKIP_GLOBAL_TEARDOWN: "true"
            FIRSTPROJECTNAME: "firstProject"
            FIRSTPROJECTKEY: "first"
            SECONDPROJECTNAME: "secondProject"
            SECONDPROJECTKEY: "second"
          nodePool: pipelines_testing
          runtime:
            type: host
          inputSteps:
            - name: preMatrix
          outputResources:
            - name: list_grep_resource
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/workFlow/environments/*.js"
              repositoryFullName: "PIPA/Org_test_Automation"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=preMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf preMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: pipelineWorkflowTests
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            PRIMARYPROJECTNAME: "firstProject"
            PRIMARYPROJECTKEY: "first"
            FIRSTPROJECTNAME: "firstProject"
            FIRSTPROJECTKEY: "first"
            SECONDPROJECTNAME: "secondProject"
            SECONDPROJECTKEY: "second"
          nodePool: pipelines_testing
          runtime:
            type: host
          inputSteps:
            - name: preMatrix
          outputResources:
            - name: list_grep_resource
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/workFlow/pipeline/sync/*.js"
            - listOfTests: "core/workFlow/pipeline/scm/*.js"
            - listOfTests: "core/workFlow/pipeline/trigger/pipelineWorkFlow5.js"
            - listOfTests: "core/workFlow/pipeline/trigger/pipelineWorkFlow6.js,\
                            core/pipelines/projectIntegrationSharing.js,\
                            core/pipelines/nodePoolSharing.js,\
                            core/workFlow/step/stepWorkflow1.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=preMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf preMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: pipelineWorkflowTests2
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            PRIMARYPROJECTNAME: "firstProject"
            PRIMARYPROJECTKEY: "first"
            FIRSTPROJECTNAME: "firstProject"
            FIRSTPROJECTKEY: "first"
            SECONDPROJECTNAME: "secondProject"
            SECONDPROJECTKEY: "second"
          nodePool: pipelines_testing
          runtime:
            type: host
          inputSteps:
            - name: pipelineWorkflowTests
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
          outputResources:
            - name: list_grep_resource
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/pipelines/projectIntegrationSharing.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=preMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf preMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: pipelineWorkflowTests3
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            PRIMARYPROJECTNAME: "firstProject"
            PRIMARYPROJECTKEY: "first"
            FIRSTPROJECTNAME: "firstProject"
            FIRSTPROJECTKEY: "first"
            SECONDPROJECTNAME: "secondProject"
            SECONDPROJECTKEY: "second"
          nodePool: pipelines_testing
          runtime:
            type: host
          inputSteps:
            - name: pipelineWorkflowTests2
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
          outputResources:
            - name: list_grep_resource
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/pipelines/nodePoolSharing.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=preMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf preMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: pipelineWorkflowTests4
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            PRIMARYPROJECTNAME: "firstProject"
            PRIMARYPROJECTKEY: "first"
            FIRSTPROJECTNAME: "firstProject"
            FIRSTPROJECTKEY: "first"
            SECONDPROJECTNAME: "secondProject"
            SECONDPROJECTKEY: "second"
          nodePool: pipelines_testing
          runtime:
            type: host
          inputSteps:
            - name: pipelineWorkflowTests3
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
          outputResources:
            - name: list_grep_resource
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/workFlow/step/stepWorkflow1.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=preMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf preMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: bashTests
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            PRIMARYPROJECTNAME: "firstProject"
            PRIMARYPROJECTKEY: "first"
            FIRSTPROJECTNAME: "firstProject"
            FIRSTPROJECTKEY: "first"
            SECONDPROJECTNAME: "secondProject"
            SECONDPROJECTKEY: "second"
          nodePool: pipelines_testing
          runtime:
            type: host
          inputSteps:
            - name: preMatrix
          outputResources:
            - name: list_grep_resource
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/Bash/BashGeneric/BashGenericNonDefaultProjectVariables.js"
              repositoryFullName: "PIPA/Org_test_Automation_bash"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=preMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$repositoryFullName
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf preMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: stepWorkflowTests
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            PRIMARYPROJECTNAME: "firstProject"
            PRIMARYPROJECTKEY: "first"
            FIRSTPROJECTNAME: "firstProject"
            FIRSTPROJECTKEY: "first"
            SECONDPROJECTNAME: "secondProject"
            SECONDPROJECTKEY: "second"
          nodePool: pipelines_testing
          runtime:
            type: host
          inputSteps:
            - name: preMatrix
          outputResources:
            - name: list_grep_resource
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/workFlow/step/stepWorkflow12.js"
            - listOfTests: "core/workFlow/step/stepWorkflow13.js"
            - listOfTests: "core/workFlow/step/stepWorkflow14.js"
            - listOfTests: "core/workFlow/step/stepWorkflow23.js"
            - listOfTests: "core/workFlow/step/stepWorkflow24.js"
            - listOfTests: "core/workFlow/step/stepWorkflow25.js"
            - listOfTests: "core/workFlow/step/stepWorkflow26.js"
            - listOfTests: "core/workFlow/step/stepWorkflow27.js"
            - listOfTests: "core/workFlow/step/stepWorkflow2.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=preMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf preMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: tearDownPostMatrix
        type: PostMatrix
        configuration:
          runtime:
            type: host
          integrations:
            - name: entArt
          inputResources:
            - name: auto_gitRepo
              trigger: false
          outputResources:
            - name: iTestNonDefaultReleaseApprovalBag
          inputSteps:
            - name: defaultPrimaryProject
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: pipelineWorkflowTests4
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: bashTests
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: stepWorkflowTests
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
        execution:
          onComplete:
            - write_output iTestNonDefaultReleaseApprovalBag APPROVAL_STATUS='REQUESTING_APPROVAL_FOR_RELEASE_PIPELINES'
            - mkdir result-${run_id}
            - save_tests ./defaultPrimaryProject/testResults/mocha-junit-reporter
            - mv ./defaultPrimaryProject/testResults/mochawesome/*.json result-${run_id}
            - save_tests ./bashTests/testResults/mocha-junit-reporter
            - mv ./bashTests/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./pipelineWorkflowTests/testResults/mocha-junit-reporter
            - mv ./pipelineWorkflowTests/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./stepWorkflowTests/testResults/mocha-junit-reporter
            - mv ./stepWorkflowTests/testResults/mochawesome/*.json result-${run_id}/
            - add_pipeline_files result-${run_id} result-${run_id}
            - pushd $res_auto_gitRepo_resourcePath/automation/tests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - ./test.sh
            - restore_pipeline_files result-${run_id} result_itest
            - npm run merge-json-reports && npm run merge-html-reports
            - source pipelines_common.sh
            - uploadResult="$(on_complete_itest_nonDefault)"
            - reportPath=${uploadResult%%:*}
            - reportLink="https://entplus.jfrog.io/artifactory/pipe-itest-reports/itest-NonDefaultProject-reports/$reportPath"
            - echo "${reportLink}"
            - testResult="success"
            - |
              if [ "$step_defaultPrimaryProject_statusName" != "success" ] || [ "$step_bashTests_statusName" != "success" ] ||
              if [ "$step_pipelineWorkflowTests_statusName" != "success" ] || [ "$step_stepWorkflowTests_statusName" != "success" ]
                then
                  testResult="failure"
              fi
            - colorBar="#00FF00"
            - |
              if [ "$testResult" == "failure" ]
                then
                  colorBar="#FF0000"
              fi
            {{ if hasSuffix "full" "{{gitBranch}}" }}
            - send_notification pipelines_mqtest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}" --color "$colorBar"
            {{ end }}
            {{ if eq "master" "{{gitBranch}}" }}
            - send_notification pipelines_itest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}" --color "$colorBar"
            {{ end }}

  - name: iTestSaas
    configuration:
      environmentVariables:
        readOnly:
          isSaas: "true"
          NAMESPACE_PREFIX:
            allowCustom: true
            default: "pipelinecloud"
          ADMIN_USER: "admin"
          ADMIN_PASSWORD: "password"
          nodePool: pipelines_testing
          #set this env to true to delete the conf.json file
          removeConfFile: "false"
          confFileName: conf.json
          exitCode: "1"
          LOG_LEVEL: "info"
          JFROG_JOIN_KEY: "$res_itestSaaSGeneric_JPD_JOIN_KEY"
          JFROG_ARTIFACTORY_USER:
            allowCustom: true
            default: admin
            description: "Username of the instance against which you want to trigger smoke test suite"
          JFROG_ADMIN_ARTIFACTORY_PASSWORD:
            allowCustom: true
            default: "$res_itestSaaSGeneric_JPD_PASSWORD"
            description: "Password of the instance against which you want to trigger smoke test suite"
          JFROG_ARTIFACTORY_APIKEY:
            allowCustom: true
            default: "$res_itestSaaSGeneric_JPD_PASSWORD"
            description: "Add password of the instance against which you want to trigger smoke test suite"
          GITHUB_TOKEN:
            allowCustom: true
            default: "${int_s_gitHub_token}"
            description: "GitHub token for the test automation yaml repository"
          GITHUB_URL: "${int_test_automation_token_GITHUB_URL}"
          gitUser: "PIPA"
          DEFAULT_UBUNTU_NODEPOOL_OS:
            allowCustom: true
            default: "Ubuntu_18.04"
            description: "Default operating system for node pool tests"
          DEFAULT_NODEPOOL_NUMBEROFNODES:
            allowCustom: true
            default: 1
            description: "Default number of nodes for node pool tests"
          DEFAULT_NODEPOOL_REGION:
            allowCustom: true
            default: "ap-south-1"
            description: "Default region for node pool tests"
          DEFAULT_AZURE_NODEPOOL_REGION:
            allowCustom: true
            default: "westus"
            description: "Default region for azure node pool tests"
          DEFAULT_GCP_NODEPOOL_REGION:
            allowCustom: true
            default: "us-west1"
            description: "Default region for gcp node pool tests"
          DEFAULT_NODEPOOL_ARCHITECTURE:
            allowCustom: true
            default: "x86_64"
            description: "Default architecture for node pool tests"
          DEFAULT_NODEPOOL_NODEIDLEINTERVAL:
            allowCustom: true
            default: 1
            description: "Default node interval(in min) for node pool tests"
          DEFAULT_NODEPOOL_DISKSIZE:
            allowCustom: true
            default: 90
            description: "Default disk size for node pool tests"
          DEFAULT_NODEPOOL_TIMEOUT:
            allowCustom: true
            default: 30000
            description: "Default timeout(in sec) for node pool tests"
          DEFAULT_WINDOWS_NODEPOOL_OS:
            allowCustom: true
            default: "WindowsServer_2019"
          AWS_NODEPOOL_KEYPAIRNAME:
            description: "AWS key-pair"
            default: "dev2cloud-pp-aps1-nodepool"
            allowCustom: true
          AWS_NODEPOOL_SECOND_KEYPAIRNAME:
            description: "AWS second key-pair"
            default: "pipetesting003-eu-central-1"
            allowCustom: true
          AWS_NODEPOOL_SUBNETID:
            description: "Default AWS subnet-id"
            default: "subnet-0cdfebd1890e2967a"
            allowCustom: true
          AWS_NODEPOOL_SECOND_SUBNETID:
            description: "second AWS subnet-id"
            default: "subnet-050a07ea2f5cbee1c"
            allowCustom: true
          AWS_NODEPOOL_INSTANCESIZE:
            description: "Default AWS instance-size"
            default: "t3a.medium"
            allowCustom: true
          AWS_NODEPOOL_WIN_19_INSTANCESIZE:
            description: "Default AWS instance-size"
            default: "t3a.medium"
            allowCustom: true
          AWS_NODEPOOL_SECURITYGROUPID:
            description: " Default AWS security group-id"
            default: "sg-04d78bcf2e81c95a0"
            allowCustom: true
          AWS_NODEPOOL_SECOND_SECURITYGROUPID:
            description: " second AWS security group-id"
            default: "sg-0ea095851df05843e"
            allowCustom: true
          AWS_PROJECT_INTEGRATION_ACCESSKEYID:
            description: "Default AWS access key-id"
            default: "${int_test_automation_token_AWS_DEV2CLOUD_ACCESSKEYID}"
            values:
              - "${int_test_automation_token_AWS_DEV2CLOUD_ACCESSKEYID}"
              - "${int_test_automation_token_AWS_PROJECT_INTEGRATION_ACCESSKEYID}"
            allowCustom: true
          AWS_PROJECT_INTEGRATION_SECRETACCESSKEY:
            description: "Default AWS ecret access-key"
            default: "${int_test_automation_token_AWS_DEV2CLOUD_SECRETACCESSKEY}"
            values:
              - "${int_test_automation_token_AWS_DEV2CLOUD_SECRETACCESSKEY}"
              - "${int_test_automation_token_AWS_PROJECT_INTEGRATION_SECRETACCESSKEY}"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_APPID:
            description: "Default Azure app-id"
            default: "192757c5-73a6-4257-84ec-1fe4c30f98fb"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_PASSWORD:
            description: "Default Azure password"
            default: "${int_az_jfrog_new_password}"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_TENANT:
            description: "Default Azure tenant key"
            default: "ad8b5a8c-9862-4c41-a341-aa838fc564df"
            allowCustom: true
          AZURE_NODEPOOL_SUBSCRIPTIONID:
            allowCustom: true
            default: "f27d81be-eea4-479e-a745-11088b8cc1b0"
            description: "Default Azure subscription-id"
          AZURE_NODEPOOL_RESOURCEGROUPNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure resource group name"
          AZURE_NODEPOOL_VNETNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure vnetname"
          AZURE_NODEPOOL_SUBNETNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure subnet name"
          AZURE_NODEPOOL_PUBLICSSHKEY:
            allowCustom: true
            default: "\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCA0GPIdWfyEn21jkMhS8/JvoJ4viuPmnBhuazjwUbilM3zO38hQc8nr8eW0zJS/zpf2V9QewpJ1t9x5tw4bdTRMN99aaIbqr6ZSz/1ofFL1PkpC9Y7HWi+dmpxlIqRkX6JGPaUNb2ql71vVPY0tLg2G4MgcX/ZFQCVO3z/o20HURgrcxYEu5A3+dOkyiE3JQBi+s66cgDm7p3IIND2eEHcZiIsaW6vg2T85oF8WkXcpHFLLXt5gzND6f/8TwW657QXe2P5mijWwTtCOaopfSK0vXC1dFzPPpwKGPTv7KrsTSPL3c/QP6YqEYratKpNTenmvGPGqYNFgj8oMIbVN2SP\""
            description: "Default Azure public ssh-key"
          AZURE_NODEPOOL_INSTANCESIZE:
            allowCustom: true
            default: "Standard_F2s"
            description: "Default Azure instance size"
          GCP_NODEPOOL_INSTANCESIZE:
            allowCustom: true
            default: "n1-standard-2"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_SUBNET:
            allowCustom: true
            default: "jfrog-usw1-dynamicnodes"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_NETWORK_TAGS:
            allowCustom: true
            default: "behind-nat,jenkins,pipelines,xray-app,xray-apps"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_ZONE:
            allowCustom: true
            default: "us-west1-b"
            description: "This variable is used to set default instance size for azure node pool"
          D_GOOGLECLOUD_PROJECT_INTEGRATION_JSONKEY:
            allowCustom: true
            default: "${int_test_automation_gcp_jsonKey}"
            description: "This variable is used to set default instance size for azure node pool"
          DONT_DELETE_PS:
            description: "When run status reaches error status, pipeline source doesn't get deleted "
            default: "false"
            allowCustom: true
          PREP_FOR_HELM_TESTS:
            description: "Upload helm test files to artifactory for running helm test cases"
            default: "false"
            allowCustom: true
          SAAS_PIPELINES_UNIFIED_VERSION:
            allowCustom: true
            default:  ${res_saasEnvironmentSetupBag_pipelinesVersion}
            description: "Pipelines version to spin up environment"
          DEPLOY_KEYS_REPOSITORY_FULL_NAME:
            allowCustom: true
            default: "PIPA/org_test_automation_deploy_keys"
            description: 'deploy keys automation github repository'
          AWS_NODEPOOL_CUSTOMTAG_KEYS:
            description: "keys for custom tag to identify testing instances"
            default: "pipelines-internal,Group"
            allowCustom: true
          AWS_NODEPOOL_CUSTOMTAG_VALUES:
            description: "values for custom tag to identify testing instances"
            default: "testing,PIPELINES"
            allowCustom: true
          BITBUCKET_SERVER_PASSWORD:
            description: "BBS password"
            default: "${int_test_automation_bbs_new_password}"
            allowCustom: true
          BITBUCKET_SERVER_URL:
            description: "BBS url"
            default: "${int_test_automation_bbs_new_url}"
            allowCustom: true
          BITBUCKET_SERVER_USERNAME:
            description: "BBS username"
            default: "${int_test_automation_bbs_new_username}"
            allowCustom: true
          GITHUB_REPOSITORY_BRANCH: "master"
          GITHUB_REPOSITORY_FULLPATH_BASH: "jfrog/Org_test_Automation_bash"
          GITHUB_REPOSITORY_FULLPATH_POWERSHELL: "jfrog/Org_test_Automation_PowerShell"
          MULTIBRANCH_REPOSITORY_FULL_NAME: "PIPA/org_test_automation_MultiBranch"
          GITHUB_REPOSITORY_FULLPATH_BASH_BRANCH: "master"
          EXTENSIONS_REPOSITORY_FULL_NAME : "PIPA/extensions"
          TEMPLATES_REPOSITORY_FULL_NAME : "PIPA/templates"
          GITHUB_REPOSITORY_FULLPATH: "jfrog/Org_test_Automation"
          GITHUB_MULTIBRANCH_REPOSITORY_FULL_NAME: "jfrog/org_test_automation_MultiBranch"
      integrations:
        - name: test_automation
        - name: test_automation_token
        - name: KubeFile_automation
        - name: entArt
        - name: lightweight_automation_generic
        - name: test_automation_jira
        - name: entplus_deployer
        - name: pipelines_itest_slack
        - name: pipelines_mqtest_slack
        - name: test_automation_bbs_new
        - name: s_gitHub
      nodePool: pipelines_testing
      inputResources:
        - name: itestSaaSGeneric
          trigger: false
        - name: cpGit
          trigger: false
    steps:
      - name: saas_aws_setup_prematrix
        type: PreMatrix
        configuration:
          chronological: true
          integrations:
            - name: az_jfrog_new
            - name: test_automation_gcp
          inputResources:
            - name: auto_gitRepo
              trigger: false
            - name: automation_templateFS
              trigger: false
            - name: saasEnvironmentSetupBag
              trigger: false
            - name: Org_test_Automation_BBS
              trigger: false
            - name: Org_test_Automation_bash_BBS
              trigger: false
            - name: Org_test_Automation_PowerShell_BBS
              trigger: false
            - name: Org_test_Automation_Private_BBS
              trigger: false
            - name: org_test_automation_MultiBranch_BBS
              trigger: false
            - name: itestAWSSaas
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_NPM_INSTALL: "false"
            GREP: "'SMOKE_TEST|SAAS_TEST'"
            JPD_URL:
              allowCustom: true
              default:  "$res_itestAWSSaas_URL"
              description: "URL of the intance against which you want to trigger smoke test suite"
        execution:
          onStart:
            - echo foo
            - cp -r $res_auto_gitRepo_resourcePath/automation/tests .
            - pushd tests
            - ls -la
            - cp -r $res_automation_templateFS_resourcePath .
            - restore_pipeline_files jsonfile $confFileName
            - if [[ -f "$confFileName" ]]; then jsonfile=true && cat $confFileName; fi
            - if ( $jsonfile && $removeConfFile ); then echo "removing confFileName" && rm -rf $confFileName; fi
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - cp -r $res_Org_test_Automation_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_bash_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_PowerShell_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_Private_BBS_resourcePath .
            - cp -r $res_org_test_automation_MultiBranch_BBS_resourcePath .
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - export ORG_TEST_AUTOMATION_PRIVATE_DIRECTORY="./Org_test_Automation_Private_BBS"
            - export ORG_TEST_AUTOMATION_MULTIBRANCH_DIRECTORY="./org_test_automation_MultiBranch_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - sudo chmod 0777 $TEMPLATE_BINARY_PATH
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - npm config set registry https://entplus.jfrog.io/artifactory/api/npm/npm-virtual
            - curl -u"${int_entplus_deployer_user}":"${int_entplus_deployer_apikey}" "https://entplus.jfrog.io/api/npm/auth" >> ~/.npmrc
            - npm config fix
            - npm ci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - |
              if [[ "$(curl --location --request GET "${JPD_URL}/artifactory/api/system/ping" -u admin:Password@1)" != "OK" ]]
                  then
                    if [[ "$(curl --location --request GET "${JPD_URL}/artifactory/api/system/ping" -u admin:password)" = "OK" ]]
                      then
                        echo "Updating the password of instance to Password@1, assuming the password is password"
                        curl --location --request POST "${JPD_URL}/artifactory/api/security/users/authorization/changePassword" \
                        --header 'Authorization: Basic YWRtaW46cGFzc3dvcmQ=' \
                        --header 'Content-Type: application/json' \
                        --data-raw '{
                            "userName" : "admin",
                            "oldPassword" : "password",
                            "newPassword1" : "Password@1",
                            "newPassword2" : "Password@1"
                        }'
                      else
                        echo "Updating the password of instance to Password@1, assuming the password is Password1"
                        curl --location --request POST "${JPD_URL}/artifactory/api/security/users/authorization/changePassword" \
                        --header 'Authorization: Basic YWRtaW46UGFzc3dvcmQx' \
                        --header 'Content-Type: application/json' \
                        --data-raw '{
                            "userName" : "admin",
                            "oldPassword" : "Password1",
                            "newPassword1" : "Password@1",
                            "newPassword2" : "Password@1"
                        }'
                    fi
                fi
            - add_run_variables JPD_URL="$JPD_URL"
            - ./test.sh
            - popd
            - rm -rf $res_auto_gitRepo_resourcePath

      - name: saas_aws_set_1
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          outputResources:
            - name: list_grep_resource
          integrations:
            - name: entArt
          runtime:
            type: host
          environmentVariables:
            GREP: "'SMOKE_TEST|SAAS_TEST'"
            timeoutSeconds: 21600
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            MULTIBRANCH_REPOSITORY_FULL_NAME : "PIPA/org_test_automation_MultiBranch"
          nodePool: pipelines_testing
          inputSteps:
            - name: saas_aws_setup_prematrix
        stepletMultipliers:
          environmentVariables:
            - listOfTests:    "core/steps/Bash/BashGeneric/*.js,\
                              core/steps/Bash/BashIntegrations/*.js,\
                              core/steps/Bash/BashNative/*.js,\
                              core/steps/Bash/BashResources/*.js,\
                              core/resources/Bash/*.js,\
                              core/steps/Bash/BashUtilityFunctions/*.js"
              repositoryFullName:    "PIPA/Org_test_Automation_Bash"
            - listOfTests:    "core/steps/PowerShell/PSGeneric/Sync/*.js,\
                              core/steps/PowerShell/PSGeneric/Trigger/*.js,\
                              core/steps/PowerShell/PSIntegration/*.js,\
                              core/steps/PowerShell/PSNative/*.js,\
                              core/steps/PowerShell/PSResources/*.js,\
                              core/steps/PowerShell/PSUtilityfunctions/*.js"
              repositoryFullName:    "PIPA/Org_test_Automation_Powershell"
            - listOfTests:    "core/multibranch/pipelines/*.js,\
                              core/multibranch/*.js"
              repositoryFullName:    "PIPA/org_test_automation_MultiBranch"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}, REPOSITORY_FULL_NAME = ${repositoryFullName}"
            - testPath=saas_aws_setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$repositoryFullName
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - export ORG_TEST_AUTOMATION_MULTIBRANCH_DIRECTORY="./org_test_automation_MultiBranch_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - echo $REPOSITORY_FULL_NAME
            - ./test.sh
          onSuccess:
            - cat $confFileName
            - popd
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - save_tests testResults/mocha-junit-reporter

      - name: saas_aws_set_2
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          outputResources:
            - name: list_grep_resource
          integrations:
            - name: entArt
          environmentVariables:
            timeoutSeconds: 7200
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            GREP: "'SMOKE_TEST|SAAS_AWS_DYNAMIC_NODE_POOL_TESTS|AWS_DYNAMIC_NODE_POOL_TESTS_SET_1|API_DYNAMICNODEPOOL|AZURE_NODEPOOLS|SAAS_TEST'"
          nodePool: pipelines_testing
          runtime:
            type: host
          inputSteps:
            - name: saas_aws_set_1
              status:
                - success
                - failure
                - error
        stepletMultipliers:
          environmentVariables:
            - listOfTests:    "core/workFlow/pipeline/trigger/*.js,\
                              core/workFlow/pipeline/sync/*.js,\
                              core/workFlow/pipeline/scm/*.js,\
                              core/api/*.js,\
                              core/workFlow/environments/*.js,\
                              core/workFlow/step/*.js,\
                              core/projectIntegrations/*.js,\
                              core/resources/Bash/*.js,\
                              core/resources/PowerShell/*.js,\
                              core/resources/Sync/*.js,\
                              core/resources/*.js,\
                              core/pipeInfo/*.js,\
                              core/pipelines/SCM/*.js,\
                              core/pipelines/Sync/*.js,\
                              core/steps/Sync/*.js,\
                              core/pipelines/*.js,\
                              core/nodePools/AWSDynamicNodes/*.js,\
                              core/nodePools/AZDynamicNodes/*.js,\
                              core/nodePools/GCPDynamicNodes/*.js,\
                              core/nodePools/*.js,\
                              core/templates/*.js,\
                              core/templates/SCM/*.js,\
                              core/workFlow/pipeline/trigger/pipelineWorkFlowComplexPipelines1.js,\
                              core/workFlow/pipeline/trigger/pipelineWorkFlowComplexPipelines4.js,\
                              core/extensions/*.js,\
                              core/steps/Sync/*.js,\
                              core/entitlements/*.js,\
                              core/webhooks/GithubWebhooks.js,\
                              core/nodePools/SaasDynamicNodePools/*.js"
              repositoryFullName:    "PIPA/Org_test_Automation"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}, REPOSITORY_FULL_NAME = ${repositoryFullName}"
            - testPath=saas_aws_set_1/saas_aws_setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export REPOSITORY_BRANCH="master"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - export REPOSITORY_FULL_NAME=$repositoryFullName
            - ./test.sh
          onSuccess:
            - cat $confFileName
            - popd
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - save_tests testResults/mocha-junit-reporter

      - name: saas_aws_api_test_set_1
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          outputResources:
            - name: list_grep_resource
          integrations:
            - name: entArt
          environmentVariables:
            timeoutSeconds: 7200
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            GREP: "'SMOKE_TEST|SAAS_TEST'"
          nodePool: pipelines_testing
          runtime:
            type: host
          inputSteps:
            - name: saas_aws_set_2
              status:
                - success
                - failure
                - error
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/cancelRun.js"
            - listOfTests: "core/api/deployKeys.js"
            - listOfTests: "core/api/hooks.js"
            - listOfTests: "core/api/nodePools.js"
            - listOfTests: "core/api/nodes.js"
            - listOfTests: "core/api/passthrough.js"
            - listOfTests: "core/api/pipelines.js"
            - listOfTests: "core/api/pipelineStepConnections.js"
            - listOfTests: "core/api/pipelineSteplets.js"
            - listOfTests: "core/api/pipelineSteps.js"
            - listOfTests: "core/api/pipelineSyncStatus.js"
            - listOfTests: "core/api/resourceVersions.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}"
            - testPath=saas_aws_set_2/saas_aws_set_1/saas_aws_setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onSuccess:
            - cat $confFileName
            - popd
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - popd
            - save_tests testResults/mocha-junit-reporter

      - name: saas_aws_api_test_set_2
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          outputResources:
            - name: list_grep_resource
          integrations:
            - name: entArt
          environmentVariables:
            timeoutSeconds: 7200
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            GREP: "'SMOKE_TEST|SAAS_TEST'"
          nodePool: pipelines_testing
          runtime:
            type: host
          inputSteps:
            - name: saas_aws_set_2
              status:
                - success
                - failure
                - error
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/runStepConnections.js"
            - listOfTests: "core/api/stepConsoles.js"
            - listOfTests: "core/api/stepletConsoles.js"
            - listOfTests: "core/api/steplets.js"
            - listOfTests: "core/api/stepletTestReports.js"
            - listOfTests: "core/api/steps.js"
            - listOfTests: "core/api/stepTestReports.js"
            - listOfTests: "core/api/stepVariables.js"
            - listOfTests: "core/api/project.js"
            - listOfTests: "core/api/projectIntegrations.js"
            - listOfTests: "core/api/projectPermissions.js"
            - listOfTests: "core/api/runResourceVersions.js"
            - listOfTests: "core/api/runs.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}"
            - testPath=saas_aws_set_2/saas_aws_set_1/saas_aws_setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onSuccess:
            - cat $confFileName
            - popd
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - popd
            - save_tests testResults/mocha-junit-reporter

      - name: saas_aws_teardown_postmatrix
        type: PostMatrix
        configuration:
          integrations:
            - name: jfdev_agent
          inputResources:
            - name: auto_gitRepo
              trigger: false
          outputResources:
            - name: awsReleaseApprovalBag
          inputSteps:
            - name: saas_aws_api_test_set_1
              status:
                - success
                - failure
                - error
            - name: saas_aws_api_test_set_2
              status:
                - success
                - failure
                - error
          environmentVariables:
            SKIP_NPM_INSTALL: "false"
            listOfTests: "core/api/nodes.js"
          chronological: true
        execution:
          onStart:
            - pushd $res_auto_gitRepo_resourcePath/automation/tests/
            - restore_pipeline_files jsonfile $confFileName
            - if [[ -f "$confFileName" ]]; then jsonfile=true && cat $confFileName; fi
            - if ( $jsonfile && $removeConfFile ); then echo "removing confFileName" && rm -rf $confFileName; fi
            - export testCases="core/api/systemCodes.js"
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - export serverNamePrefix=$NAMESPACE_PREFIX
            - add_pipeline_variables ping_response=$(curl https://$serverNamePrefix${NORMALIZED_VERSION:6}.jfrogdev.org/artifactory/api/system/ping) || true
            - add_pipeline_variables serverNameInJenkins=$serverNamePrefix${NORMALIZED_VERSION:6}
          onSuccess:
            - source pipelines_common.sh
            - uploadResult="$(on_complete_itest_AWS_SaaS)"
            - reportPath=${uploadResult%%:*}
            - reportLink="https://entplus.jfrog.io/artifactory/pipe-itest-reports/iTestSaas-AWS-reports/$reportPath"
            {{ if hasSuffix "full" "{{gitBranch}}" }}
            - send_notification pipelines_mqtest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}"
            {{ end }}
            {{ if eq "master" "{{gitBranch}}" }}
            - send_notification pipelines_itest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}"
            {{ end }}
          onFailure:
            - source pipelines_common.sh
            - uploadResult="$(on_complete_itest_AWS_SaaS)"
            - reportPath=${uploadResult%%:*}
            - reportLink="https://entplus.jfrog.io/artifactory/pipe-itest-reports/iTestSaas-AWS-reports/$reportPath"
            {{ if hasSuffix "full" "{{gitBranch}}" }}
            - send_notification pipelines_mqtest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}"
            {{ end }}
            {{ if eq "master" "{{gitBranch}}" }}
            - send_notification pipelines_itest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}"
            {{ end }}
          onComplete:
            - write_output awsReleaseApprovalBag APPROVAL_STATUS='REQUESTING_APPROVAL_FOR_RELEASE_PIPELINES'

      - name: saas_gcp_setup_prematrix
        type: PreMatrix
        configuration:
          chronological: true
          integrations:
            - name: az_jfrog_new
            - name: test_automation_gcp
          inputResources:
            - name: auto_gitRepo
              trigger: false
            - name: automation_templateFS
              trigger: false
            - name: saasEnvironmentSetupBag
              trigger: false
            - name: Org_test_Automation_BBS
              trigger: false
            - name: Org_test_Automation_bash_BBS
              trigger: false
            - name: Org_test_Automation_PowerShell_BBS
              trigger: false
            - name: Org_test_Automation_Private_BBS
              trigger: false
            - name: org_test_automation_MultiBranch_BBS
              trigger: false
            - name: itestGCPSaas
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_NPM_INSTALL: "false"
            JPD_URL:
              allowCustom: true
              default:  "$res_itestGCPSaas_URL"
              description: "URL of the intance against which you want to trigger smoke test suite"
            GREP: "'SMOKE_TEST'"
        execution:
          onStart:
            - cp -r $res_auto_gitRepo_resourcePath/automation/tests .
            - pushd tests
            - ls -la
            - cp -r $res_automation_templateFS_resourcePath .
            - restore_pipeline_files jsonfile $confFileName
            - if [[ -f "$confFileName" ]]; then jsonfile=true && cat $confFileName; fi
            - if ( $jsonfile && $removeConfFile ); then echo "removing confFileName" && rm -rf $confFileName; fi
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - cp -r $res_Org_test_Automation_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_bash_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_PowerShell_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_Private_BBS_resourcePath .
            - cp -r $res_org_test_automation_MultiBranch_BBS_resourcePath .
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - export ORG_TEST_AUTOMATION_PRIVATE_DIRECTORY="./Org_test_Automation_Private_BBS"
            - export ORG_TEST_AUTOMATION_MULTIBRANCH_DIRECTORY="./org_test_automation_MultiBranch_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - sudo chmod 0777 $TEMPLATE_BINARY_PATH
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - npm config set registry https://entplus.jfrog.io/artifactory/api/npm/npm-virtual
            - curl -u"${int_entplus_deployer_user}":"${int_entplus_deployer_apikey}" "https://entplus.jfrog.io/api/npm/auth" >> ~/.npmrc
            - npm config fix
            - npm ci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - |
              if [[ "$(curl --location --request GET "${JPD_URL}/artifactory/api/system/ping" -u admin:Password@1)" != "OK" ]]
                  then
                    if [[ "$(curl --location --request GET "${JPD_URL}/artifactory/api/system/ping" -u admin:password)" = "OK" ]]
                      then
                        echo "Updating the password of instance to Password@1, assuming the password is password"
                        curl --location --request POST "${JPD_URL}/artifactory/api/security/users/authorization/changePassword" \
                        --header 'Authorization: Basic YWRtaW46cGFzc3dvcmQ=' \
                        --header 'Content-Type: application/json' \
                        --data-raw '{
                            "userName" : "admin",
                            "oldPassword" : "password",
                            "newPassword1" : "Password@1",
                            "newPassword2" : "Password@1"
                        }'
                      else
                        echo "Updating the password of instance to Password@1, assuming the password is Password1"
                        curl --location --request POST "${JPD_URL}/artifactory/api/security/users/authorization/changePassword" \
                        --header 'Authorization: Basic YWRtaW46UGFzc3dvcmQx' \
                        --header 'Content-Type: application/json' \
                        --data-raw '{
                            "userName" : "admin",
                            "oldPassword" : "Password1",
                            "newPassword1" : "Password@1",
                            "newPassword2" : "Password@1"
                        }'
                    fi
                fi
            - add_run_variables JPD_URL="$JPD_URL"
            - ./test.sh
            - popd
            - rm -rf $res_auto_gitRepo_resourcePath

      - name: saas_gcp_set_1
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          outputResources:
            - name: list_grep_resource
          integrations:
            - name: entArt
          runtime:
            type: host
          environmentVariables:
            GREP: "'SMOKE_TEST'"
            timeoutSeconds: 21600
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            MULTIBRANCH_REPOSITORY_FULL_NAME : "PIPA/org_test_automation_MultiBranch"
          nodePool: pipelines_testing
          inputSteps:
            - name: saas_gcp_setup_prematrix
              status:
                - success
        stepletMultipliers:
          environmentVariables:
            - listOfTests:    "core/steps/Bash/BashGeneric/*.js,\
                              core/steps/Bash/BashIntegrations/*.js,\
                              core/steps/Bash/BashNative/*.js,\
                              core/steps/Bash/BashResources/*.js,\
                              core/resources/Bash/*.js,\
                              core/steps/Bash/BashUtilityFunctions/*.js"
              repositoryFullName:    "PIPA/Org_test_Automation_bash"
            - listOfTests:    "core/steps/PowerShell/PSGeneric/Sync/*.js,\
                              core/steps/PowerShell/PSGeneric/Trigger/*.js,\
                              core/steps/PowerShell/PSIntegration/*.js,\
                              core/steps/PowerShell/PSNative/*.js,\
                              core/steps/PowerShell/PSResources/*.js,\
                              core/steps/PowerShell/PSUtilityfunctions/*.js"
              repositoryFullName:    "PIPA/Org_test_Automation_Powershell"
            - listOfTests:    "core/multibranch/pipelines/*.js,\
                              core/multibranch/*.js"
              repositoryFullName:    "PIPA/org_test_automation_MultiBranch"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}, REPOSITORY_FULL_NAME = ${repositoryFullName}"
            - testPath=saas_gcp_setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$repositoryFullName
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - export ORG_TEST_AUTOMATION_MULTIBRANCH_DIRECTORY="./org_test_automation_MultiBranch_BBS"\
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - echo $REPOSITORY_FULL_NAME
            - ./test.sh
          onSuccess:
            - cat $confFileName
            - popd
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - save_tests testResults/mocha-junit-reporter

      - name: saas_gcp_set_2
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          outputResources:
            - name: list_grep_resource
          integrations:
            - name: entArt
          environmentVariables:
            timeoutSeconds: 7200
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            GREP: "'SMOKE_TEST|SAAS_AWS_DYNAMIC_NODE_POOL_TESTS|AWS_DYNAMIC_NODE_POOL_TESTS_SET_1|API_DYNAMICNODEPOOL|AZURE_NODEPOOLS'"
          nodePool: pipelines_testing
          runtime:
            type: host
          inputSteps:
            - name: saas_gcp_set_1
              status:
                - success
                - failure
                - error
        stepletMultipliers:
          environmentVariables:
            - listOfTests:    "core/workFlow/pipeline/trigger/*.js,\
                              core/workFlow/pipeline/sync/*.js,\
                              core/workFlow/pipeline/scm/*.js,\
                              core/api/*.js,\
                              core/workFlow/environments/*.js,\
                              core/workFlow/step/*.js,\
                              core/projectIntegrations/*.js,\
                              core/resources/Bash/*.js,\
                              core/resources/PowerShell/*.js,\
                              core/resources/Sync/*.js,\
                              core/resources/*.js,\
                              core/pipeInfo/*.js,\
                              core/pipelines/SCM/*.js,\
                              core/pipelines/Sync/*.js,\
                              core/steps/Sync/*.js,\
                              core/pipelines/*.js,\
                              core/nodePools/AWSDynamicNodes/*.js,\
                              core/nodePools/AZDynamicNodes/*.js,\
                              core/nodePools/GCPDynamicNodes/*.js,\
                              core/nodePools/*.js,\
                              core/templates/*.js,\
                              core/templates/SCM/*.js,\
                              core/workFlow/pipeline/trigger/pipelineWorkFlowComplexPipelines1.js,\
                              core/workFlow/pipeline/trigger/pipelineWorkFlowComplexPipelines4.js,\
                              core/extensions/*.js,\
                              core/steps/Sync/*.js,\
                              core/entitlements/*.js,\
                              core/webhooks/GithubWebhooks.js,\
                              core/nodePools/SaasDynamicNodePools/*.js"
              repositoryFullName:    "PIPA/Org_test_Automation"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}, REPOSITORY_FULL_NAME = ${repositoryFullName}"
            - testPath=saas_gcp_set_1/saas_gcp_setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export REPOSITORY_BRANCH="master"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export testCases=$listOfTests
            - export REPOSITORY_FULL_NAME=$repositoryFullName
            - ./test.sh
          onSuccess:
            - cat $confFileName
            - popd
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - save_tests testResults/mocha-junit-reporter

      - name: saas_gcp_teardown_postmatrix
        type: PostMatrix
        configuration:
          integrations:
            - name: jfdev_agent
          inputResources:
            - name: auto_gitRepo
              trigger: false
          outputResources:
            - name: gcpReleaseApprovalBag
          inputSteps:
            - name: saas_gcp_set_2
              status:
                - success
                - failure
                - error
          environmentVariables:
            SKIP_NPM_INSTALL: "false"
            listOfTests: "core/api/nodes.js"
          chronological: true
        execution:
          onStart:
            - pushd $res_auto_gitRepo_resourcePath/automation/tests/
            - restore_pipeline_files jsonfile $confFileName
            - if [[ -f "$confFileName" ]]; then jsonfile=true && cat $confFileName; fi
            - if ( $jsonfile && $removeConfFile ); then echo "removing confFileName" && rm -rf $confFileName; fi
            - export testCases="core/api/systemCodes.js"
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - add_run_variables committer=$committer
            - ./test.sh
          onComplete:
            - write_output gcpReleaseApprovalBag APPROVAL_STATUS='REQUESTING_APPROVAL_FOR_RELEASE_PIPELINES'
            - save_tests ./saas_gcp_set_2/testResults/mocha-junit-reporter
          onSuccess:
            - source pipelines_common.sh
            - uploadResult="$(on_complete_itest_GCP_SaaS)"
            - reportPath=${uploadResult%%:*}
            - reportLink="https://entplus.jfrog.io/artifactory/pipe-itest-reports/iTestSaas-GCP-reports/$reportPath"
            {{ if hasSuffix "full" "{{gitBranch}}" }}
            - send_notification pipelines_mqtest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}"
            {{ end }}
            {{ if eq "master" "{{gitBranch}}" }}
            - send_notification pipelines_itest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}"
            {{ end }}
          onFailure:
            - source pipelines_common.sh
            - uploadResult="$(on_complete_itest_GCP_SaaS)"
            - reportPath=${uploadResult%%:*}
            - reportLink="https://entplus.jfrog.io/artifactory/pipe-itest-reports/iTestSaas-GCP-reports/$reportPath"
            {{ if hasSuffix "full" "{{gitBranch}}" }}
            - send_notification pipelines_mqtest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}"
            {{ end }}
            {{ if eq "master" "{{gitBranch}}" }}
            - send_notification pipelines_itest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}"
            {{ end }}

      - name: saas_azure_setup_prematrix
        type: PreMatrix
        configuration:
          chronological: true
          integrations:
            - name: az_jfrog_new
            - name: test_automation_gcp
          inputResources:
            - name: auto_gitRepo
              trigger: false
            - name: automation_templateFS
              trigger: false
            - name: saasEnvironmentSetupBag
              trigger: false
            - name: Org_test_Automation_BBS
              trigger: false
            - name: Org_test_Automation_bash_BBS
              trigger: false
            - name: Org_test_Automation_PowerShell_BBS
              trigger: false
            - name: Org_test_Automation_Private_BBS
              trigger: false
            - name: org_test_automation_MultiBranch_BBS
              trigger: false
            - name: itestAZSaas
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_NPM_INSTALL: "false"
            JPD_URL:
              allowCustom: true
              default:  "$res_itestAZSaas_URL"
              description: "URL of the intance against which you want to trigger smoke test suite"
            GREP: "'SMOKE_TEST'"
        execution:
          onStart:
            - cp -r $res_auto_gitRepo_resourcePath/automation/tests .
            - pushd tests
            - ls -la
            - cp -r $res_automation_templateFS_resourcePath .
            - restore_pipeline_files jsonfile $confFileName
            - if [[ -f "$confFileName" ]]; then jsonfile=true && cat $confFileName; fi
            - if ( $jsonfile && $removeConfFile ); then echo "removing confFileName" && rm -rf $confFileName; fi
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - cp -r $res_Org_test_Automation_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_bash_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_PowerShell_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_Private_BBS_resourcePath .
            - cp -r $res_org_test_automation_MultiBranch_BBS_resourcePath .
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - export ORG_TEST_AUTOMATION_PRIVATE_DIRECTORY="./Org_test_Automation_Private_BBS"
            - export ORG_TEST_AUTOMATION_MULTIBRANCH_DIRECTORY="./org_test_automation_MultiBranch_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - sudo chmod 0777 $TEMPLATE_BINARY_PATH
            - |
              if [[ "$(curl --location --request GET "${JPD_URL}/artifactory/api/system/ping" -u admin:Password@1)" != "OK" ]]
                  then
                    if [[ "$(curl --location --request GET "${JPD_URL}/artifactory/api/system/ping" -u admin:password)" = "OK" ]]
                      then
                        echo "Updating the password of instance to Password@1, assuming the password is password"
                        curl --location --request POST "${JPD_URL}/artifactory/api/security/users/authorization/changePassword" \
                        --header 'Authorization: Basic YWRtaW46cGFzc3dvcmQ=' \
                        --header 'Content-Type: application/json' \
                        --data-raw '{
                            "userName" : "admin",
                            "oldPassword" : "password",
                            "newPassword1" : "Password@1",
                            "newPassword2" : "Password@1"
                        }'
                      else
                        echo "Updating the password of instance to Password@1, assuming the password is Password1"
                        curl --location --request POST "${JPD_URL}/artifactory/api/security/users/authorization/changePassword" \
                        --header 'Authorization: Basic YWRtaW46UGFzc3dvcmQx' \
                        --header 'Content-Type: application/json' \
                        --data-raw '{
                            "userName" : "admin",
                            "oldPassword" : "Password1",
                            "newPassword1" : "Password@1",
                            "newPassword2" : "Password@1"
                        }'
                    fi
                fi
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            -  npm config set registry https://entplus.jfrog.io/artifactory/api/npm/npm-virtual
            - curl -u"${int_entplus_deployer_user}":"${int_entplus_deployer_apikey}" "https://entplus.jfrog.io/api/npm/auth" >> ~/.npmrc
            - npm config fix
            - npm ci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - add_run_variables JPD_URL="$JPD_URL"
            - ./test.sh
            - popd
            - rm -rf $res_auto_gitRepo_resourcePath

      - name: saas_azure_set_1
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          outputResources:
            - name: list_grep_resource
          integrations:
            - name: entArt
          runtime:
            type: host
          environmentVariables:
            GREP: "'SMOKE_TEST'"
            timeoutSeconds: 21600
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            MULTIBRANCH_REPOSITORY_FULL_NAME : "PIPA/org_test_automation_MultiBranch"
          nodePool: pipelines_testing
          inputSteps:
            - name: saas_azure_setup_prematrix
        stepletMultipliers:
          environmentVariables:
            - listOfTests:    "core/steps/Bash/BashGeneric/*.js,\
                              core/steps/Bash/BashIntegrations/*.js,\
                              core/steps/Bash/BashNative/*.js,\
                              core/steps/Bash/BashResources/*.js,\
                              core/resources/Bash/*.js,\
                              core/steps/Bash/BashUtilityFunctions/*.js"
              repositoryFullName:    "PIPA/Org_test_Automation_bash"
            - listOfTests:    "core/steps/PowerShell/PSGeneric/Sync/*.js,\
                              core/steps/PowerShell/PSGeneric/Trigger/*.js,\
                              core/steps/PowerShell/PSIntegration/*.js,\
                              core/steps/PowerShell/PSNative/*.js,\
                              core/steps/PowerShell/PSResources/*.js,\
                              core/steps/PowerShell/PSUtilityfunctions/*.js"
              repositoryFullName:    "PIPA/Org_test_Automation_Powershell"
            - listOfTests:    "core/multibranch/pipelines/*.js,\
                              core/multibranch/*.js"
              repositoryFullName:    "PIPA/org_test_automation_MultiBranch"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}, REPOSITORY_FULL_NAME = ${repositoryFullName}"
            - testPath=saas_azure_setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$repositoryFullName
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - export ORG_TEST_AUTOMATION_MULTIBRANCH_DIRECTORY="./org_test_automation_MultiBranch_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - echo $REPOSITORY_FULL_NAME
            - ./test.sh
          onSuccess:
            - cat $confFileName
            - popd
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - save_tests testResults/mocha-junit-reporter

      - name: saas_azure_set_2
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          outputResources:
            - name: list_grep_resource
          integrations:
            - name: entArt
          environmentVariables:
            timeoutSeconds: 7200
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            GREP: "'SMOKE_TEST|SAAS_AWS_DYNAMIC_NODE_POOL_TESTS|AWS_DYNAMIC_NODE_POOL_TESTS_SET_1|API_DYNAMICNODEPOOL|AZURE_NODEPOOLS'"
          nodePool: pipelines_testing
          runtime:
            type: host
          inputSteps:
            - name: saas_azure_set_1
              status:
                - success
                - failure
                - error
        stepletMultipliers:
          environmentVariables:
            - listOfTests:    "core/workFlow/pipeline/trigger/*.js,\
                              core/workFlow/pipeline/sync/*.js,\
                              core/workFlow/pipeline/scm/*.js,\
                              core/api/*.js,\
                              core/workFlow/environments/*.js,\
                              core/workFlow/step/*.js,\
                              core/projectIntegrations/*.js,\
                              core/resources/Bash/*.js,\
                              core/resources/PowerShell/*.js,\
                              core/resources/Sync/*.js,\
                              core/resources/*.js,\
                              core/pipeInfo/*.js,\
                              core/pipelines/SCM/*.js,\
                              core/pipelines/Sync/*.js,\
                              core/steps/Sync/*.js,\
                              core/pipelines/*.js,\
                              core/nodePools/AWSDynamicNodes/*.js,\
                              core/nodePools/AZDynamicNodes/*.js,\
                              core/nodePools/GCPDynamicNodes/*.js,\
                              core/nodePools/*.js,\
                              core/templates/*.js,\
                              core/templates/SCM/*.js,\
                              core/workFlow/pipeline/trigger/pipelineWorkFlowComplexPipelines1.js,\
                              core/workFlow/pipeline/trigger/pipelineWorkFlowComplexPipelines4.js,\
                              core/extensions/*.js,\
                              core/steps/Sync/*.js,\
                              core/entitlements/*.js,\
                              core/webhooks/GithubWebhooks.js,\
                              core/nodePools/SaasDynamicNodePools/*.js"
              repositoryFullName:    "PIPA/Org_test_Automation"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}, REPOSITORY_FULL_NAME = ${repositoryFullName}"
            - testPath=saas_azure_set_1/saas_azure_setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export REPOSITORY_BRANCH="master"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - export REPOSITORY_FULL_NAME=$repositoryFullName
            - ./test.sh
          onSuccess:
            - cat $confFileName
            - popd
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - save_tests testResults/mocha-junit-reporter

      - name: saas_azure_teardown_postmatrix
        type: PostMatrix
        configuration:
          integrations:
            - name: jfdev_agent
          inputResources:
            - name: auto_gitRepo
              trigger: false
          outputResources:
            - name: azureReleaseApprovalBag
          inputSteps:
            - name: saas_azure_set_2
              status:
                - success
                - failure
                - error
          environmentVariables:
            SKIP_NPM_INSTALL: "false"
            listOfTests: "core/api/nodes.js"
          chronological: true
        execution:
          onStart:
            - pushd $res_auto_gitRepo_resourcePath/automation/tests/
            - restore_pipeline_files jsonfile $confFileName
            - if [[ -f "$confFileName" ]]; then jsonfile=true && cat $confFileName; fi
            - if ( $jsonfile && $removeConfFile ); then echo "removing confFileName" && rm -rf $confFileName; fi
            - export testCases="core/api/systemCodes.js"
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - add_run_variables committer=$committer
            - ./test.sh
          onComplete:
            - write_output azureReleaseApprovalBag APPROVAL_STATUS='REQUESTING_APPROVAL_FOR_RELEASE_PIPELINES'
            - save_tests ./saas_azure_set_2/testResults/mocha-junit-reporter
          onSuccess:
            - source pipelines_common.sh
            - uploadResult="$(on_complete_itest_Azure_SaaS)"
            - reportPath=${uploadResult%%:*}
            - reportLink="https://entplus.jfrog.io/artifactory/pipe-itest-reports/iTestSaas-Azure-reports/$reportPath"
            {{ if hasSuffix "full" "{{gitBranch}}" }}
            - send_notification pipelines_mqtest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}"
            {{ end }}
            {{ if eq "master" "{{gitBranch}}" }}
            - send_notification pipelines_itest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}"
            {{ end }}
          onFailure:
            - source pipelines_common.sh
            - uploadResult="$(on_complete_itest_Azure_SaaS)"
            - reportPath=${uploadResult%%:*}
            - reportLink="https://entplus.jfrog.io/artifactory/pipe-itest-reports/iTestSaas-Azure-reports/$reportPath"
            {{ if hasSuffix "full" "{{gitBranch}}" }}
            - send_notification pipelines_mqtest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}"
            {{ end }}
            {{ if eq "master" "{{gitBranch}}" }}
            - send_notification pipelines_itest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}"
            {{ end }}

  - name: test_infra_setup
    configuration:
      integrations:
        - name: pipelines_itest_slack
      environmentVariables:
        readOnly:
          DEFAULT_PASSWORD: password
          JPD_JOIN_KEY: e89b38892e91876c6057217b810d270b
          PASSWORD: "Password@1"
          SKIP_NPM_INSTALL:
            allowCustom: true
            default: "false"
            description: "Flag to skip npm install"
    steps:
      - name: trigger_all
        type: Bash
        configuration:
          {{ if hasSuffix "full" "{{gitBranch}}" }}
          requiresApproval:
            approvers:
              - yashprits
              - nishiths
              - vivekk
              - neham
              - varshaa
              - jasmeets
              - agrasthn
            notifications:
              - integrationName: pipelines_itest_slack
          {{ end }}
          environmentVariables:
            PIPELINES_VERSION:
              default: ""
              description: "Pipelines installer version can be specified here"
            HELM_VERSION:
              default: ""
              description: "Helm chart version can be specified else the version corresponding to pipeline will be considered"
          integrations:
            - name: test_github
          inputResources:
            - name: branchSnapshotBag
              trigger: false
            # Uncomment below 3 lines to enable nightly cron job to trigger complete itest
            # {{ if eq "master" "{{gitBranch}}" }}
            # - name: nightlyCron
            # {{ end }}
          outputResources:
            - name: nightlyEnvDetails
            - name: itestSaaSGeneric
        execution:
          onExecute:
            - echo "setting up test infra"
            - |
              if [ ! -z "$PIPELINES_VERSION" ]; then
                echo "PIPELINES_VERSION is empty"
                write_output "nightlyEnvDetails" "version=$PIPELINES_VERSION"
              elif [ ! -z "$res_branchSnapshotBag_snapshotVersion" ]; then
                write_output "nightlyEnvDetails" "version=$res_branchSnapshotBag_snapshotVersion"
              else
                echo "version is empty"
                exit 1
              fi
            - write_output "nightlyEnvDetails" "name=pipelines$(date +%s)"
            - write_output "nightlyEnvDetails" "password=$PASSWORD"
            - |
              if [ ! -z "$HELM_VERSION" ]; then
                echo "$HELM_VERSION is empty"
                write_output "nightlyEnvDetails" "helmchartversion=$HELM_VERSION"
              else
                echo "PIPELINES_VERSION = $PIPELINES_VERSION"
                echo "PIPELINES_VERSION = 10$PIPELINES_VERSION"
                write_output "nightlyEnvDetails" "helmchartversion=10$PIPELINES_VERSION"
              fi
            {{ if eq "master" "{{gitBranch}}" }}
            - write_output "nightlyEnvDetails" "helmchartversion=$res_branchSnapshotBag_helmChartVersion"
            - write_output "nightlyEnvDetails" "dockerrepodetails=docker_repo_name=$res_branchSnapshotBag_registryUrl"
            - write_output "nightlyEnvDetails" "jfroghelmrepo_url=jfrog_helm_repo_url=https://entplus.jfrog.io/artifactory"
            - write_output "nightlyEnvDetails" "jfroghelmrepo_key=jfrog_helm_repo_key=dev-master-helm-virtual"
            {{ end }}
            - write_output "itestSaaSGeneric" "JPD_JOIN_KEY=$JPD_JOIN_KEY"
            - write_output "itestSaaSGeneric" "JPD_PASSWORD=$PASSWORD"
            - |
              export repos=("jfrog/Org_test_Automation" "jfrog/Org_test_Automation_PowerShell" "jfrog/Org_test_Automation_bash" "jfrog/org_test_automation_MultiBranch")
              for repo in "${repos[@]}"; do
                echo "$repo"
                for id in $(curl -H 'Authorization: token '"$int_test_github_token" "https://api.github.com/repos/$repo/hooks" | jq '.[] | select(.last_response.code==502) | .id'); do
                  echo "$id"
                  curl -vvv \
                    -X DELETE \
                    -H "Authorization: token $int_test_github_token" \
                    "https://api.github.com/repos/$repo/hooks/$id"
                done
              done
      - name: u18_static_node_jenkins
        type: Jenkins
        configuration:
          inputSteps:
            - name: trigger_all
          integrations:
            - name: jenkins_entplus_ci
            - name: automation_ssh
          outputResources:
            - name: ubuntu_18_static_vm
          jenkinsJobName: tools/job/utils/job/aws-self-service-create-ec2-vm
          buildParameters:
            SSH_PUBLIC_KEY: "${int_automation_ssh_publicKey}"
            VM_NAME: ubuntu18${run_id}
            GROUP: PIPELINES
            VM_TYPE: t3.medium
            VM_IMAGE: ubuntu-18
            REGION: ap-south-1
            DISK_SIZE: '10'
            EXPIRY: 8h
            AUTO_SHUT_DOWN: 'true'

      - name: u20_static_node_jenkins
        type: Jenkins
        configuration:
          inputSteps:
            - name: trigger_all
          integrations:
            - name: jenkins_entplus_ci
            - name: automation_ssh
          outputResources:
            - name: ubuntu_20_static_vm
          jenkinsJobName: tools/job/utils/job/aws-self-service-create-ec2-vm
          buildParameters:
            SSH_PUBLIC_KEY: "${int_automation_ssh_publicKey}"
            VM_NAME: ubuntu20${run_id}
            GROUP: PIPELINES
            VM_TYPE: t3.medium
            VM_IMAGE: ubuntu-20
            REGION: ap-south-1
            DISK_SIZE: '10'
            EXPIRY: 8h
            AUTO_SHUT_DOWN: 'true'

      - name: rhel7_static_node_jenkins
        type: Jenkins
        configuration:
          inputSteps:
            - name: trigger_all
          integrations:
            - name: jenkins_entplus_ci
            - name: automation_ssh
          outputResources:
            - name: redhat_7_static_vm
          jenkinsJobName: tools/job/utils/job/aws-self-service-create-ec2-vm
          buildParameters:
            SSH_PUBLIC_KEY: "${int_automation_ssh_publicKey}"
            VM_NAME: rhel7${run_id}
            GROUP: PIPELINES
            VM_TYPE: t3.medium
            VM_IMAGE: redhat-7
            REGION: ap-south-1
            DISK_SIZE: '10'
            EXPIRY: 8h
            AUTO_SHUT_DOWN: 'true'

      - name: centos7_static_node_jenkins
        type: Jenkins
        configuration:
          inputSteps:
            - name: trigger_all
          integrations:
            - name: jenkins_entplus_ci
            - name: automation_ssh
          outputResources:
            - name: centos_7_static_vm
          jenkinsJobName: tools/job/utils/job/aws-self-service-create-ec2-vm
          buildParameters:
            SSH_PUBLIC_KEY: "${int_automation_ssh_publicKey}"
            VM_NAME: centos7${run_id}
            GROUP: PIPELINES
            VM_TYPE: t3.medium
            VM_IMAGE: centos-7
            REGION: ap-south-1
            DISK_SIZE: '10'
            EXPIRY: 8h
            AUTO_SHUT_DOWN: 'true'

      - name: itest_1
        type: Jenkins
        configuration:
          inputResources:
            - name: nightlyEnvDetails
              newVersionOnly: true
          integrations:
            - name: jenkins_entplus_ci
          jenkinsJobName: tools/platform/environment_setup_gen2
          buildParameters:
            SERVER_NAME: ${res_nightlyEnvDetails_name}itest1
            ACCOUNT_TYPE: "enterprise_plus"
            DEPLOYMENT_SIZING: "medium"
            GROUP: "PIPELINES"
            EXPIRY: "1d"
            XRAY: "true"
            PIPELINES: "true"
            DISTRIBUTION: "true"
            INSIGHT: "true"
            DEPLOYMENT_TYPE: "onprem"
            REGION: "dev-aps1"
            DEBUG_ENVIRONMENT: "true"
            LOGS_TO_KIBANA: "false"
            EXTRA_PARAMS: "artifactory_special_properties=staging.mode=true\nmaster_key=${JPD_JOIN_KEY}\npipelines_signed_pipelines_enabled=true\nconf_pipelines_chart_version=${res_nightlyEnvDetails_helmchartversion}\nconf_pipelines_unified_version=${res_nightlyEnvDetails_version}\nwhitelist_cidr=20.184.243.216/32;146.148.8.199/32;20.245.102.218;104.192.136.0/21;185.166.140.0/22;18.205.93.0/25;18.234.32.128/25;13.52.5.0/25;34.74.90.64/28;34.74.226.0/24\npipelines_rabbitmq_persistence_enabled=true\npipelines_auth_token=Testing1234\nis_newrelic=True\napplication_sizing_type=xlarge\neplus_mothership_jfmc_deployed=true\npipelines_split_to_pods=false\n${res_nightlyEnvDetails_dockerrepodetails}\n${res_nightlyEnvDetails_jfroghelmrepo_url}\n${res_nightlyEnvDetails_jfroghelmrepo_key}"

      - name: itest_2
        type: Jenkins
        configuration:
          inputResources:
            - name: nightlyEnvDetails
              newVersionOnly: true
          integrations:
            - name: jenkins_entplus_ci
          jenkinsJobName: tools/platform/environment_setup_gen2
          buildParameters:
            SERVER_NAME: ${res_nightlyEnvDetails_name}itest2
            ACCOUNT_TYPE: "enterprise_plus"
            DEPLOYMENT_SIZING: "medium"
            GROUP: "PIPELINES"
            EXPIRY: "1d"
            XRAY: "true"
            PIPELINES: "true"
            DISTRIBUTION: "true"
            INSIGHT: "true"
            DEPLOYMENT_TYPE: "onprem"
            REGION: "dev-aps1"
            DEBUG_ENVIRONMENT: "true"
            LOGS_TO_KIBANA: "false"
            EXTRA_PARAMS: "artifactory_special_properties=staging.mode=true\nmaster_key=${JPD_JOIN_KEY}\npipelines_signed_pipelines_enabled=true\nconf_pipelines_chart_version=${res_nightlyEnvDetails_helmchartversion}\nconf_pipelines_unified_version=${res_nightlyEnvDetails_version}\nwhitelist_cidr=20.184.243.216/32;20.245.102.218;146.148.8.199/32;104.192.136.0/21;185.166.140.0/22;18.205.93.0/25;18.234.32.128/25;13.52.5.0/25;34.74.90.64/28;34.74.226.0/24\npipelines_rabbitmq_persistence_enabled=true\npipelines_auth_token=Testing1234\nis_newrelic=True\napplication_sizing_type=xlarge\neplus_mothership_jfmc_deployed=true\npipelines_split_to_pods=false\n${res_nightlyEnvDetails_dockerrepodetails}\n${res_nightlyEnvDetails_jfroghelmrepo_url}\n${res_nightlyEnvDetails_jfroghelmrepo_key}"

      - name: itest_nativeSteps
        type: Jenkins
        configuration:
          inputResources:
            - name: nightlyEnvDetails
              newVersionOnly: true
          integrations:
            - name: jenkins_entplus_ci
          jenkinsJobName: tools/platform/environment_setup_gen2
          buildParameters:
            SERVER_NAME: ${res_nightlyEnvDetails_name}itestnt1
            ACCOUNT_TYPE: "enterprise_plus"
            DEPLOYMENT_SIZING: "medium"
            GROUP: "PIPELINES"
            EXPIRY: "1d"
            XRAY: "true"
            PIPELINES: "true"
            DISTRIBUTION: "true"
            INSIGHT: "true"
            DEPLOYMENT_TYPE: "onprem"
            REGION: "dev-aps1"
            DEBUG_ENVIRONMENT: "true"
            LOGS_TO_KIBANA: "false"
            EXTRA_PARAMS: "artifactory_special_properties=staging.mode=true\nmaster_key=${JPD_JOIN_KEY}\npipelines_signed_pipelines_enabled=true\nconf_pipelines_chart_version=${res_nightlyEnvDetails_helmchartversion}\nconf_pipelines_unified_version=${res_nightlyEnvDetails_version}\nwhitelist_cidr=20.184.243.216/32;146.148.8.199/32;20.245.102.218;104.192.136.0/21;185.166.140.0/22;18.205.93.0/25;18.234.32.128/25;13.52.5.0/25;34.74.90.64/28;34.74.226.0/24\npipelines_rabbitmq_persistence_enabled=true\npipelines_auth_token=Testing1234\nis_newrelic=True\napplication_sizing_type=xlarge\neplus_mothership_jfmc_deployed=true\npipelines_split_to_pods=false\n${res_nightlyEnvDetails_dockerrepodetails}\n${res_nightlyEnvDetails_jfroghelmrepo_url}\n${res_nightlyEnvDetails_jfroghelmrepo_key}"

      - name: itests_misc
        type: Jenkins
        configuration:
          inputResources:
            - name: nightlyEnvDetails
              newVersionOnly: true
          integrations:
            - name: jenkins_entplus_ci
          jenkinsJobName: tools/platform/environment_setup_gen2
          buildParameters:
            SERVER_NAME: ${res_nightlyEnvDetails_name}itestMisc
            ACCOUNT_TYPE: "enterprise_plus"
            DEPLOYMENT_SIZING: "medium"
            GROUP: "PIPELINES"
            EXPIRY: "1d"
            XRAY: "true"
            PIPELINES: "true"
            DISTRIBUTION: "true"
            INSIGHT: "true"
            DEPLOYMENT_TYPE: "onprem"
            REGION: "dev-aps1"
            DEBUG_ENVIRONMENT: "true"
            LOGS_TO_KIBANA: "true"
            EXTRA_PARAMS: "artifactory_special_properties=staging.mode=true\nmaster_key=${JPD_JOIN_KEY}\npipelines_signed_pipelines_enabled=true\nconf_pipelines_chart_version=${res_nightlyEnvDetails_helmchartversion}\nconf_pipelines_unified_version=${res_nightlyEnvDetails_version}\nwhitelist_cidr=20.184.243.216/32;146.148.8.199/32;104.192.136.0/21;20.245.102.218;185.166.140.0/22;18.205.93.0/25;18.234.32.128/25;13.52.5.0/25;34.74.90.64/28;34.74.226.0/24\npipelines_rabbitmq_persistence_enabled=true\npipelines_auth_token=Testing1234\nis_newrelic=True\napplication_sizing_type=xlarge\neplus_mothership_jfmc_deployed=true\npipelines_split_to_pods=true\n${res_nightlyEnvDetails_dockerrepodetails}\n${res_nightlyEnvDetails_jfroghelmrepo_url}\n${res_nightlyEnvDetails_jfroghelmrepo_key}"

      - name: itest_non_default
        type: Jenkins
        configuration:
          inputResources:
            - name: nightlyEnvDetails
              newVersionOnly: true
          integrations:
            - name: jenkins_entplus_ci
          jenkinsJobName: tools/platform/environment_setup_gen2
          buildParameters:
            SERVER_NAME: ${res_nightlyEnvDetails_name}itest3
            ACCOUNT_TYPE: "enterprise_plus"
            DEPLOYMENT_SIZING: "medium"
            GROUP: "PIPELINES"
            EXPIRY: "1d"
            XRAY: "true"
            PIPELINES: "true"
            DISTRIBUTION: "true"
            INSIGHT: "true"
            DEPLOYMENT_TYPE: "onprem"
            REGION: "dev-aps1"
            DEBUG_ENVIRONMENT: "true"
            LOGS_TO_KIBANA: "false"
            EXTRA_PARAMS: "artifactory_special_properties=staging.mode=true\nmaster_key=${JPD_JOIN_KEY}\npipelines_signed_pipelines_enabled=true\nconf_pipelines_chart_version=${res_nightlyEnvDetails_helmchartversion}\nconf_pipelines_unified_version=${res_nightlyEnvDetails_version}\nwhitelist_cidr=20.184.243.216/32;146.148.8.199/32;20.245.102.218;104.192.136.0/21;185.166.140.0/22;18.205.93.0/25;18.234.32.128/25;13.52.5.0/25;34.74.90.64/28;34.74.226.0/24\npipelines_rabbitmq_persistence_enabled=true\npipelines_auth_token=Testing1234\nis_newrelic=True\napplication_sizing_type=xlarge\neplus_mothership_jfmc_deployed=true\npipelines_split_to_pods=false\nfeature_jfconnect_enabled=true\nfeature_jfconnect_usage_enabled=true\n${res_nightlyEnvDetails_dockerrepodetails}\n${res_nightlyEnvDetails_jfroghelmrepo_url}\n${res_nightlyEnvDetails_jfroghelmrepo_key}"
      - name: itest_webhooks
        type: Jenkins
        configuration:
#          Disabling this job as currently we have vpc issue to connect from repo21 to BBS
#          inputResources:
#            - name: nightlyEnvDetails
#              newVersionOnly: true
          integrations:
            - name: jenkins_entplus_ci
          jenkinsJobName: tools/platform/environment_setup_gen2
          buildParameters:
            SERVER_NAME: ${res_nightlyEnvDetails_name}iwh
            ACCOUNT_TYPE: "enterprise_plus"
            DEPLOYMENT_SIZING: "medium"
            GROUP: "PIPELINES"
            EXPIRY: "2d"
            PIPELINES: "true"
            DEPLOYMENT_TYPE: "onprem"
            REGION: "dev-euc1-common"
            DEBUG_ENVIRONMENT: "true"
            LOGS_TO_KIBANA: "false"
            EXTRA_PARAMS: "artifactory_special_properties=staging.mode=true\nmaster_key=${JPD_JOIN_KEY}\npipelines_signed_pipelines_enabled=true\nconf_pipelines_chart_version=${res_nightlyEnvDetails_helmchartversion}\nconf_pipelines_unified_version=${res_nightlyEnvDetails_version}\nwhitelist_cidr=20.184.243.216/32;20.245.102.218;146.148.8.199/32;104.192.136.0/21;185.166.140.0/22;18.205.93.0/25;18.234.32.128/25;13.52.5.0/25;34.74.90.64/28;34.74.226.0/24;13.52.5.96/28;13.236.8.224/28;18.136.214.96/28;18.184.99.224/28;18.234.32.224/28;18.246.31.224/28;52.215.192.224/28;104.192.137.240/28;104.192.138.240/28;104.192.140.240/28;104.192.142.240/28;104.192.143.240/28;185.166.143.240/28;185.166.142.240/28\npipelines_rabbitmq_persistence_enabled=true\npipelines_auth_token=Testing1234\nis_newrelic=True\napplication_sizing_type=xlarge\neplus_mothership_jfmc_deployed=true\npipelines_split_to_pods=false"
      - name: aws_saas
        type: Jenkins
        configuration:
          inputResources:
            - name: nightlyEnvDetails
              newVersionOnly: true
          integrations:
            - name: jenkins_entplus_ci
          jenkinsJobName: tools/platform/environment_setup_gen2
          buildParameters:
            SERVER_NAME: ${res_nightlyEnvDetails_name}awssaas
            ACCOUNT_TYPE: "enterprise_plus"
            DEPLOYMENT_SIZING: "medium"
            GROUP: "PIPELINES"
            EXPIRY: "1d"
            XRAY: "false"
            PIPELINES: "true"
            DISTRIBUTION: "false"
            INSIGHT: "false"
            DEPLOYMENT_TYPE: "cloud"
            REGION: "dev-aps1"
            DEBUG_ENVIRONMENT: "true"
            LOGS_TO_KIBANA: "false"
            EXTRA_PARAMS: "artifactory_special_properties=staging.mode=true\nmaster_key=${JPD_JOIN_KEY}\npipelines_signed_pipelines_enabled=true\nconf_pipelines_chart_version=${res_nightlyEnvDetails_helmchartversion}\nconf_pipelines_unified_version=${res_nightlyEnvDetails_version}\nwhitelist_cidr=20.184.243.216/32;146.148.8.199/32;20.245.102.218;104.192.136.0/21;185.166.140.0/22;18.205.93.0/25;18.234.32.128/25;13.52.5.0/25;34.74.90.64/28;34.74.226.0/24\npipelines_rabbitmq_persistence_enabled=true\npipelines_auth_token=Testing1234\nis_newrelic=True\napplication_sizing_type=xlarge\neplus_mothership_jfmc_deployed=true\nfeature_pipelines_saas_custom_dynamic_node_pools_enabled=true\npipelines_split_to_pods=false"
      - name: gcp_saas
        type: Jenkins
        configuration:
          inputResources:
            - name: nightlyEnvDetails
              newVersionOnly: true
          integrations:
            - name: jenkins_entplus_ci
          jenkinsJobName: tools/platform/environment_setup_gen2
          buildParameters:
            SERVER_NAME: ${res_nightlyEnvDetails_name}gcpsaas
            ACCOUNT_TYPE: "enterprise_plus"
            DEPLOYMENT_SIZING: "medium"
            GROUP: "PIPELINES"
            EXPIRY: "1d"
            XRAY: "false"
            PIPELINES: "true"
            DISTRIBUTION: "false"
            INSIGHT: "false"
            DEPLOYMENT_TYPE: "cloud"
            REGION: "gcdev-euw1"
            DEBUG_ENVIRONMENT: "true"
            LOGS_TO_KIBANA: "false"
            EXTRA_PARAMS: "artifactory_special_properties=staging.mode=true\nmaster_key=${JPD_JOIN_KEY}\npipelines_signed_pipelines_enabled=true\nconf_pipelines_chart_version=${res_nightlyEnvDetails_helmchartversion}\nconf_pipelines_unified_version=${res_nightlyEnvDetails_version}\nwhitelist_cidr=20.184.243.216/32;146.148.8.199/32;20.245.102.218;104.192.136.0/21;185.166.140.0/22;18.205.93.0/25;18.234.32.128/25;13.52.5.0/25;34.74.90.64/28;34.74.226.0/24\npipelines_rabbitmq_persistence_enabled=true\npipelines_auth_token=Testing1234\nis_newrelic=True\napplication_sizing_type=xlarge\neplus_mothership_jfmc_deployed=true\nfeature_pipelines_saas_custom_dynamic_node_pools_enabled=true\npipelines_split_to_pods=false"
      - name: az_saas
        type: Jenkins
        configuration:
          inputResources:
            - name: nightlyEnvDetails
              newVersionOnly: true
          integrations:
            - name: jenkins_entplus_ci
          jenkinsJobName: tools/platform/environment_setup_gen2
          buildParameters:
            SERVER_NAME: ${res_nightlyEnvDetails_name}azsaas
            ACCOUNT_TYPE: "enterprise_plus"
            DEPLOYMENT_SIZING: "medium"
            GROUP: "PIPELINES"
            EXPIRY: "1d"
            XRAY: "false"
            PIPELINES: "true"
            DISTRIBUTION: "false"
            INSIGHT: "false"
            DEPLOYMENT_TYPE: "cloud"
            REGION: "azdev-euw"
            DEBUG_ENVIRONMENT: "true"
            LOGS_TO_KIBANA: "false"
            EXTRA_PARAMS: "artifactory_special_properties=staging.mode=true\nmaster_key=${JPD_JOIN_KEY}\npipelines_signed_pipelines_enabled=true\nconf_pipelines_chart_version=${res_nightlyEnvDetails_helmchartversion}\nconf_pipelines_unified_version=${res_nightlyEnvDetails_version}\nwhitelist_cidr=20.184.243.216/32;146.148.8.199/32;104.192.136.0/21;20.245.102.218;185.166.140.0/22;18.205.93.0/25;18.234.32.128/25;13.52.5.0/25;34.74.90.64/28;34.74.226.0/24\npipelines_rabbitmq_persistence_enabled=true\npipelines_auth_token=Testing1234\nis_newrelic=True\napplication_sizing_type=xlarge\neplus_mothership_jfmc_deployed=true\nfeature_pipelines_saas_custom_dynamic_node_pools_enabled=true\npipelines_split_to_pods=false"

      - name: cypress_test
        type: Jenkins
        configuration:
          inputResources:
            - name: nightlyEnvDetails
              newVersionOnly: true
          integrations:
            - name: jenkins_entplus_ci
          jenkinsJobName: tools/platform/environment_setup_gen2
          buildParameters:
            SERVER_NAME: ${res_nightlyEnvDetails_name}cypress
            ACCOUNT_TYPE: "enterprise_plus"
            DEPLOYMENT_SIZING: "medium"
            GROUP: "PIPELINES"
            EXPIRY: "1d"
            XRAY: "true"
            PIPELINES: "true"
            DISTRIBUTION: "true"
            INSIGHT: "true"
            DEPLOYMENT_TYPE: "onprem"
            REGION: "dev-euc1-common"
            DEBUG_ENVIRONMENT: "true"
            LOGS_TO_KIBANA: "false"
            EXTRA_PARAMS: "artifactory_special_properties=staging.mode=true\nmaster_key=${JPD_JOIN_KEY}\npipelines_signed_pipelines_enabled=true\nconf_pipelines_chart_version=${res_nightlyEnvDetails_helmchartversion}\nconf_pipelines_unified_version=${res_nightlyEnvDetails_version}\nwhitelist_cidr=20.184.243.216/32;146.148.8.199/32;104.192.136.0/21;20.245.102.218;185.166.140.0/22;18.205.93.0/25;18.234.32.128/25;13.52.5.0/25;34.74.90.64/28;34.74.226.0/24\npipelines_rabbitmq_persistence_enabled=true\npipelines_auth_token=Testing1234\nis_newrelic=True\napplication_sizing_type=xlarge\neplus_mothership_jfmc_deployed=true\npipelines_split_to_pods=false"

      - name: itest_1_prep
        type: Bash
        configuration:
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - 16.10.0
          integrations:
            - name: mc_license
            - name: entArt
          inputSteps:
            - name: itest_1
            - name: u18_static_node_jenkins
            - name: u20_static_node_jenkins
            - name: centos7_static_node_jenkins
          inputResources:
            - name: automationArtifacts
            - name: nightlyEnvDetails
            - name: auto_gitRepo
              trigger: false
          outputResources:
            - name: itestNonScm
        execution:
          onExecute:
            - echo "Changing password from default password to $PASSWORD in env https://${res_nightlyEnvDetails_name}itest1.jfrogdev.org"
            - |
              curl --location --request POST "https://${res_nightlyEnvDetails_name}itest1.jfrogdev.org/artifactory/api/security/users/authorization/changePassword" \
                -u "admin:password" \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "userName" : "admin",
                    "oldPassword" : "password",
                    "newPassword1" : "Password@1",
                    "newPassword2" : "Password@1"
                }'
            - echo "Uploading GPG key"
            - |
              curl -u admin:$PASSWORD -H "Accept: application/json" -H "Content-Type: application/json" \
                -X PUT "https://${res_nightlyEnvDetails_name}itest1.jfrogdev.org/distribution/api/v1/keys/gpg" \
                -T $res_automationArtifacts_resourcePath/gpg.json -Lvvv
            - echo "Uploading SSH key"
            - |
              curl -u admin:$PASSWORD -H "Accept: application/json" \
                -H "Content-Type: application/json" -X POST "https://${res_nightlyEnvDetails_name}itest1.jfrogdev.org/artifactory/api/security/keys/trusted" \
                --data-binary '{"alias":"test","public_key":"-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQGNBGDv22cBDADQcFtzBhJnhfiCRFZsTe6M/AXJ07KFdhljF+5QWnymf4a3/pQF\njUq4Ft5Blbe4EWfnxW56bMHY3rVeFjkM05EW7+h1aqNVBdlVF9IIPAnyQedBvmJ8\nAl6EK+VoMIzKjSNcVAW0Mmm0d5CPIvkx2IlsMC8TzCpp+qYl9KWojTKDJeHonFkM\nmlltvSRRgQ1gkt9eUd2dtM2SJALUQ2lG85V0oYZNnqqHSV5yRSqEuYRwji7mfJPm\n60L/8NIixRPexj2e0t4C9/UtduZCup8C/ykTDzMPT3GFWdoO7ZpIHYNgTCw3B3Dx\nf+DYWgqQTpJOCuxraTfINnZ/1EIsF/jG8i/rHD49W+N9YIlKOrFTPfcCtJrwPGF3\nlZX5l30eNxz7mlahqHZjNWFl3dwNcbrqdX8fRIDcuuS4Q250BE/ZP1PcNCW+9fog\ngFnvN7SrqIA+mzTd7swvFeF/vGeAaV4/wNDpbRc14TZ8g0uG+XFuHC9FJO3BjdKm\nsilUzD7vI5ByIN8AEQEAAbQbdmlzaG51ciA8dmlzaG51ckBqZnJvZy5jb20+iQHS\nBBMBCAA8FiEEJzjXoG5bIKnJVcO1qFcyPp11WdUFAmDv22cCGwMFCwkIBwIDIgIB\nBhUKCQgLAgQWAgMBAh4HAheAAAoJEKhXMj6ddVnVtpEL/08MRg73GYf/QCzXM7ok\nWi1oBXcW3poeuvuPKFtq6Bej33xZBlIxqkrLloDasHA9v4eutIXj5jnoE9ZyTxjw\nt92PTH9i42yWY5ErBTv3Hacgc5s4N9mQtOlqBiIaMi/5FZVlgR+/kB3jGRXE3bqz\nIg6+JFaZR4B2ZRbH5Gdao15QyYFerGaRJZC23vEkeORGq7aqQ2Jw8Zk1+H6oA1Hx\nl5YNxWGD9ykRJEXIZPMQMa/1QJKnf5si+3O/YZnz+IzwnUewfhY/zJbNhWAOARgQ\nev/1lnVzjostluAaDjtjH61P7YM8LOjS1C+QIy3LO3tk4VYjBWvsq30nTKKOITW1\nlLcelVmNOldSvaC0dRztmumjOPexaD0sxM8i4GXMLfKkLfjoumRoI4aFCtLuwVEj\niyzlY0QumC/34dgP7EMKM6vQY21kfQLHXxYU0gkrHKhoNe9LkGb8mWIdCwVr9lAd\nWK98tbXgEaHqOabpEvN7PqhUDVFzwbVM13ElyKMtvCNkcrkBjQRg79tnAQwAzWRk\n34Z44p9hEm8J6clJhJygCv88zm0K3bm/HnFPpBjUy58xpgdVTTjJzJ6h0YzdB7zC\nmGV7WkoRr/okznXIzxstxpd9dJUv0nQnzMuYgS2MCgk1eBCcjPMq8hV7dJTMERBN\nJ01K+q7IGhiXhBvwUjrPpblIXul/g5XlUhj6Z5I8G7jDDE0rk2N3Dpp5Ya/M46AM\nqhyGj/yiZrxFCTtQAvtzifW2bIqGnOGJ3atgIuSyJVwAjSszr7jDl0EfLVRj6I4v\nOimrqUKmntcDdliBJUa4oEdAUqNxxou6KyRJhRo2wf+/poVHfFhsqznI8L9eUei+\nyfmToSBNshILSjKyuEs+sxybO1mgHwvUAmrlVsTq2FjEET6CjWsTMbe3qjAYy+xW\n1RzRpmdkT4PWk/ht2ou6qqOlBIH3fzGkdAcMjvAAV5ncq1A9LzxqhnUDhztN1uTz\niSWPCUFfMypEiKQI9tVx0+JCaafJIqynsW438XZNLBPJXAzNPCExAtOyKH8fABEB\nAAGJAbYEGAEIACAWIQQnONegblsgqclVw7WoVzI+nXVZ1QUCYO/bZwIbDAAKCRCo\nVzI+nXVZ1cSsDAC0WEIviZMwxjOhlPQHoja/P+1UZU9+Qs8EDY6xiYjeLsah/rIf\nA4c7R3zNb1KdcmHN6yVst3VaMq/soU93xTKlLWphXedN9yht5MG8smfRURHgi2OA\nwb3ZovivR3Plx5UjU4hfoehlWJDNZlje2FZE56oZoOzcNDSdZcc/oXFL54ukVSno\nbiL1o9DVmEta5y+X1b8r0vPE2sb5bmOsaY7mFdsOCaMzIM4cGCc2u4ZugAbK3mQS\nsCTKXLNnkSmYQAkmq+9bZ06WBzwXMerOduyCdEYYFOFhg0ugLVnaCioOov6QW2v2\n1lg0S8pwwPx2LVKE+X0vbdQVa7JZvDkrpw1sGnZ02Smim1JUw+UZlmDiPZf5mIwJ\nswILzc6aBSxBuLQmBl+X3n9KSi3/JI3SzBvRDGxsNb+ln+cx7nL/AMWLpgk1AqC6\nVOg8AL42xE3DEu/LnGDn31bkt2l+5hL+iLsWob66tCUpz+XY+PGuJaN7pejDZwEY\n4Hi7A7VSe3gk2LM=\n=40XY\n-----END PGP PUBLIC KEY BLOCK-----"}'
            - echo "Create MC token"
            - pushd $res_auto_gitRepo_resourcePath/automation/tests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - export JPD_URL=https://${res_nightlyEnvDetails_name}itest1.jfrogdev.org
            - export MC_ACCESS_TOKEN=$(node createAccessToken.js | tail -1)
            - echo "Uploading 200 parallel builds license"
            - |
              curl -X POST "https://${res_nightlyEnvDetails_name}itest1.jfrogdev.org/mc/api/v1/buckets" \
                -H "Authorization: Bearer $MC_ACCESS_TOKEN" -H 'Content-Type: multipart/form-data' \
                -F "file=@$res_automationArtifacts_resourcePath/186060683_1657637804148.json;type=application/octet-stream" \
                -F "key=$int_mc_license_key" \
                -F 'name=mybucket' -Lvvv
            - write_output "itestNonScm" "URL=https://${res_nightlyEnvDetails_name}itest1.jfrogdev.org"
            - write_output "itestNonScm" "JPD_JOIN_KEY=$JPD_JOIN_KEY"
            - write_output "itestNonScm" "JPD_PASSWORD=$PASSWORD"
      - name: itest_2_prep
        type: Bash
        configuration:
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - 16.10.0
          inputSteps:
            - name: itest_2
          integrations:
            - name: mc_license
            - name: entArt
          inputResources:
            - name: automationArtifacts
            - name: nightlyEnvDetails
            - name: auto_gitRepo
              trigger: false
          outputResources:
            - name: itestScm
        execution:
          onExecute:
            - echo "Changing password from default password to $PASSWORD in env https://${res_nightlyEnvDetails_name}itest2.jfrogdev.org"
            - |
              curl --location --request POST "https://${res_nightlyEnvDetails_name}itest2.jfrogdev.org/artifactory/api/security/users/authorization/changePassword" \
                -u "admin:password" \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "userName" : "admin",
                    "oldPassword" : "password",
                    "newPassword1" : "Password@1",
                    "newPassword2" : "Password@1"
                }'
            - echo "Uploading GPG key"
            - |
              curl -u admin:$PASSWORD -H "Accept: application/json" -H "Content-Type: application/json" \
                -X PUT "https://${res_nightlyEnvDetails_name}itest2.jfrogdev.org/distribution/api/v1/keys/gpg" \
                -T $res_automationArtifacts_resourcePath/gpg.json -Lvvv
            - echo "Uploading SSH key"
            - |
              curl -u admin:$PASSWORD -H "Accept: application/json" \
                -H "Content-Type: application/json" -X POST "https://${res_nightlyEnvDetails_name}itest2.jfrogdev.org/artifactory/api/security/keys/trusted" \
                --data-binary '{"alias":"test","public_key":"-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQGNBGDv22cBDADQcFtzBhJnhfiCRFZsTe6M/AXJ07KFdhljF+5QWnymf4a3/pQF\njUq4Ft5Blbe4EWfnxW56bMHY3rVeFjkM05EW7+h1aqNVBdlVF9IIPAnyQedBvmJ8\nAl6EK+VoMIzKjSNcVAW0Mmm0d5CPIvkx2IlsMC8TzCpp+qYl9KWojTKDJeHonFkM\nmlltvSRRgQ1gkt9eUd2dtM2SJALUQ2lG85V0oYZNnqqHSV5yRSqEuYRwji7mfJPm\n60L/8NIixRPexj2e0t4C9/UtduZCup8C/ykTDzMPT3GFWdoO7ZpIHYNgTCw3B3Dx\nf+DYWgqQTpJOCuxraTfINnZ/1EIsF/jG8i/rHD49W+N9YIlKOrFTPfcCtJrwPGF3\nlZX5l30eNxz7mlahqHZjNWFl3dwNcbrqdX8fRIDcuuS4Q250BE/ZP1PcNCW+9fog\ngFnvN7SrqIA+mzTd7swvFeF/vGeAaV4/wNDpbRc14TZ8g0uG+XFuHC9FJO3BjdKm\nsilUzD7vI5ByIN8AEQEAAbQbdmlzaG51ciA8dmlzaG51ckBqZnJvZy5jb20+iQHS\nBBMBCAA8FiEEJzjXoG5bIKnJVcO1qFcyPp11WdUFAmDv22cCGwMFCwkIBwIDIgIB\nBhUKCQgLAgQWAgMBAh4HAheAAAoJEKhXMj6ddVnVtpEL/08MRg73GYf/QCzXM7ok\nWi1oBXcW3poeuvuPKFtq6Bej33xZBlIxqkrLloDasHA9v4eutIXj5jnoE9ZyTxjw\nt92PTH9i42yWY5ErBTv3Hacgc5s4N9mQtOlqBiIaMi/5FZVlgR+/kB3jGRXE3bqz\nIg6+JFaZR4B2ZRbH5Gdao15QyYFerGaRJZC23vEkeORGq7aqQ2Jw8Zk1+H6oA1Hx\nl5YNxWGD9ykRJEXIZPMQMa/1QJKnf5si+3O/YZnz+IzwnUewfhY/zJbNhWAOARgQ\nev/1lnVzjostluAaDjtjH61P7YM8LOjS1C+QIy3LO3tk4VYjBWvsq30nTKKOITW1\nlLcelVmNOldSvaC0dRztmumjOPexaD0sxM8i4GXMLfKkLfjoumRoI4aFCtLuwVEj\niyzlY0QumC/34dgP7EMKM6vQY21kfQLHXxYU0gkrHKhoNe9LkGb8mWIdCwVr9lAd\nWK98tbXgEaHqOabpEvN7PqhUDVFzwbVM13ElyKMtvCNkcrkBjQRg79tnAQwAzWRk\n34Z44p9hEm8J6clJhJygCv88zm0K3bm/HnFPpBjUy58xpgdVTTjJzJ6h0YzdB7zC\nmGV7WkoRr/okznXIzxstxpd9dJUv0nQnzMuYgS2MCgk1eBCcjPMq8hV7dJTMERBN\nJ01K+q7IGhiXhBvwUjrPpblIXul/g5XlUhj6Z5I8G7jDDE0rk2N3Dpp5Ya/M46AM\nqhyGj/yiZrxFCTtQAvtzifW2bIqGnOGJ3atgIuSyJVwAjSszr7jDl0EfLVRj6I4v\nOimrqUKmntcDdliBJUa4oEdAUqNxxou6KyRJhRo2wf+/poVHfFhsqznI8L9eUei+\nyfmToSBNshILSjKyuEs+sxybO1mgHwvUAmrlVsTq2FjEET6CjWsTMbe3qjAYy+xW\n1RzRpmdkT4PWk/ht2ou6qqOlBIH3fzGkdAcMjvAAV5ncq1A9LzxqhnUDhztN1uTz\niSWPCUFfMypEiKQI9tVx0+JCaafJIqynsW438XZNLBPJXAzNPCExAtOyKH8fABEB\nAAGJAbYEGAEIACAWIQQnONegblsgqclVw7WoVzI+nXVZ1QUCYO/bZwIbDAAKCRCo\nVzI+nXVZ1cSsDAC0WEIviZMwxjOhlPQHoja/P+1UZU9+Qs8EDY6xiYjeLsah/rIf\nA4c7R3zNb1KdcmHN6yVst3VaMq/soU93xTKlLWphXedN9yht5MG8smfRURHgi2OA\nwb3ZovivR3Plx5UjU4hfoehlWJDNZlje2FZE56oZoOzcNDSdZcc/oXFL54ukVSno\nbiL1o9DVmEta5y+X1b8r0vPE2sb5bmOsaY7mFdsOCaMzIM4cGCc2u4ZugAbK3mQS\nsCTKXLNnkSmYQAkmq+9bZ06WBzwXMerOduyCdEYYFOFhg0ugLVnaCioOov6QW2v2\n1lg0S8pwwPx2LVKE+X0vbdQVa7JZvDkrpw1sGnZ02Smim1JUw+UZlmDiPZf5mIwJ\nswILzc6aBSxBuLQmBl+X3n9KSi3/JI3SzBvRDGxsNb+ln+cx7nL/AMWLpgk1AqC6\nVOg8AL42xE3DEu/LnGDn31bkt2l+5hL+iLsWob66tCUpz+XY+PGuJaN7pejDZwEY\n4Hi7A7VSe3gk2LM=\n=40XY\n-----END PGP PUBLIC KEY BLOCK-----"}'
            - echo "Create MC token"
            - pushd $res_auto_gitRepo_resourcePath/automation/tests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - export JPD_URL=https://${res_nightlyEnvDetails_name}itest2.jfrogdev.org
            - export MC_ACCESS_TOKEN=$(node createAccessToken.js | tail -1)
            - echo "Uploading 200 parallel builds license"
            - |
              curl -X POST "https://${res_nightlyEnvDetails_name}itest2.jfrogdev.org/mc/api/v1/buckets" \
                -H "Authorization: Bearer $MC_ACCESS_TOKEN" -H 'Content-Type: multipart/form-data' \
                -F "file=@$res_automationArtifacts_resourcePath/186060683_1657637804148.json;type=application/octet-stream" \
                -F "key=$int_mc_license_key" \
                -F 'name=mybucket' -Lvvv
            - write_output "itestScm" "URL=https://${res_nightlyEnvDetails_name}itest2.jfrogdev.org"
            - write_output "itestScm" "JPD_JOIN_KEY=$JPD_JOIN_KEY"
            - write_output "itestScm" "JPD_PASSWORD=$PASSWORD"
      - name: itest_nativeSteps_prep
        type: Bash
        configuration:
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - 16.10.0
          inputSteps:
            - name: itest_nativeSteps
          integrations:
            - name: mc_license
            - name: entArt
          inputResources:
            - name: automationArtifacts
            - name: nightlyEnvDetails
            - name: auto_gitRepo
              trigger: false
          outputResources:
            - name: itestNativeSteps
        execution:
          onExecute:
            - echo "Changing password from default password to $PASSWORD in env https://${res_nightlyEnvDetails_name}itestnt1.jfrogdev.org"
            - |
              curl --location --request POST "https://${res_nightlyEnvDetails_name}itestnt1.jfrogdev.org/artifactory/api/security/users/authorization/changePassword" \
                -u "admin:password" \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "userName" : "admin",
                    "oldPassword" : "password",
                    "newPassword1" : "Password@1",
                    "newPassword2" : "Password@1"
                }'
            - echo "Uploading GPG key"
            - |
              curl -u admin:$PASSWORD -H "Accept: application/json" -H "Content-Type: application/json" \
                -X PUT "https://${res_nightlyEnvDetails_name}itestnt1.jfrogdev.org/distribution/api/v1/keys/gpg" \
                -T $res_automationArtifacts_resourcePath/gpg.json -Lvvv
            - echo "Uploading SSH key"
            - |
              curl -u admin:$PASSWORD -H "Accept: application/json" \
                -H "Content-Type: application/json" -X POST "https://${res_nightlyEnvDetails_name}itestnt1.jfrogdev.org/artifactory/api/security/keys/trusted" \
                --data-binary '{"alias":"test","public_key":"-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQGNBGDv22cBDADQcFtzBhJnhfiCRFZsTe6M/AXJ07KFdhljF+5QWnymf4a3/pQF\njUq4Ft5Blbe4EWfnxW56bMHY3rVeFjkM05EW7+h1aqNVBdlVF9IIPAnyQedBvmJ8\nAl6EK+VoMIzKjSNcVAW0Mmm0d5CPIvkx2IlsMC8TzCpp+qYl9KWojTKDJeHonFkM\nmlltvSRRgQ1gkt9eUd2dtM2SJALUQ2lG85V0oYZNnqqHSV5yRSqEuYRwji7mfJPm\n60L/8NIixRPexj2e0t4C9/UtduZCup8C/ykTDzMPT3GFWdoO7ZpIHYNgTCw3B3Dx\nf+DYWgqQTpJOCuxraTfINnZ/1EIsF/jG8i/rHD49W+N9YIlKOrFTPfcCtJrwPGF3\nlZX5l30eNxz7mlahqHZjNWFl3dwNcbrqdX8fRIDcuuS4Q250BE/ZP1PcNCW+9fog\ngFnvN7SrqIA+mzTd7swvFeF/vGeAaV4/wNDpbRc14TZ8g0uG+XFuHC9FJO3BjdKm\nsilUzD7vI5ByIN8AEQEAAbQbdmlzaG51ciA8dmlzaG51ckBqZnJvZy5jb20+iQHS\nBBMBCAA8FiEEJzjXoG5bIKnJVcO1qFcyPp11WdUFAmDv22cCGwMFCwkIBwIDIgIB\nBhUKCQgLAgQWAgMBAh4HAheAAAoJEKhXMj6ddVnVtpEL/08MRg73GYf/QCzXM7ok\nWi1oBXcW3poeuvuPKFtq6Bej33xZBlIxqkrLloDasHA9v4eutIXj5jnoE9ZyTxjw\nt92PTH9i42yWY5ErBTv3Hacgc5s4N9mQtOlqBiIaMi/5FZVlgR+/kB3jGRXE3bqz\nIg6+JFaZR4B2ZRbH5Gdao15QyYFerGaRJZC23vEkeORGq7aqQ2Jw8Zk1+H6oA1Hx\nl5YNxWGD9ykRJEXIZPMQMa/1QJKnf5si+3O/YZnz+IzwnUewfhY/zJbNhWAOARgQ\nev/1lnVzjostluAaDjtjH61P7YM8LOjS1C+QIy3LO3tk4VYjBWvsq30nTKKOITW1\nlLcelVmNOldSvaC0dRztmumjOPexaD0sxM8i4GXMLfKkLfjoumRoI4aFCtLuwVEj\niyzlY0QumC/34dgP7EMKM6vQY21kfQLHXxYU0gkrHKhoNe9LkGb8mWIdCwVr9lAd\nWK98tbXgEaHqOabpEvN7PqhUDVFzwbVM13ElyKMtvCNkcrkBjQRg79tnAQwAzWRk\n34Z44p9hEm8J6clJhJygCv88zm0K3bm/HnFPpBjUy58xpgdVTTjJzJ6h0YzdB7zC\nmGV7WkoRr/okznXIzxstxpd9dJUv0nQnzMuYgS2MCgk1eBCcjPMq8hV7dJTMERBN\nJ01K+q7IGhiXhBvwUjrPpblIXul/g5XlUhj6Z5I8G7jDDE0rk2N3Dpp5Ya/M46AM\nqhyGj/yiZrxFCTtQAvtzifW2bIqGnOGJ3atgIuSyJVwAjSszr7jDl0EfLVRj6I4v\nOimrqUKmntcDdliBJUa4oEdAUqNxxou6KyRJhRo2wf+/poVHfFhsqznI8L9eUei+\nyfmToSBNshILSjKyuEs+sxybO1mgHwvUAmrlVsTq2FjEET6CjWsTMbe3qjAYy+xW\n1RzRpmdkT4PWk/ht2ou6qqOlBIH3fzGkdAcMjvAAV5ncq1A9LzxqhnUDhztN1uTz\niSWPCUFfMypEiKQI9tVx0+JCaafJIqynsW438XZNLBPJXAzNPCExAtOyKH8fABEB\nAAGJAbYEGAEIACAWIQQnONegblsgqclVw7WoVzI+nXVZ1QUCYO/bZwIbDAAKCRCo\nVzI+nXVZ1cSsDAC0WEIviZMwxjOhlPQHoja/P+1UZU9+Qs8EDY6xiYjeLsah/rIf\nA4c7R3zNb1KdcmHN6yVst3VaMq/soU93xTKlLWphXedN9yht5MG8smfRURHgi2OA\nwb3ZovivR3Plx5UjU4hfoehlWJDNZlje2FZE56oZoOzcNDSdZcc/oXFL54ukVSno\nbiL1o9DVmEta5y+X1b8r0vPE2sb5bmOsaY7mFdsOCaMzIM4cGCc2u4ZugAbK3mQS\nsCTKXLNnkSmYQAkmq+9bZ06WBzwXMerOduyCdEYYFOFhg0ugLVnaCioOov6QW2v2\n1lg0S8pwwPx2LVKE+X0vbdQVa7JZvDkrpw1sGnZ02Smim1JUw+UZlmDiPZf5mIwJ\nswILzc6aBSxBuLQmBl+X3n9KSi3/JI3SzBvRDGxsNb+ln+cx7nL/AMWLpgk1AqC6\nVOg8AL42xE3DEu/LnGDn31bkt2l+5hL+iLsWob66tCUpz+XY+PGuJaN7pejDZwEY\n4Hi7A7VSe3gk2LM=\n=40XY\n-----END PGP PUBLIC KEY BLOCK-----"}'
            - echo "Create MC token"
            - pushd $res_auto_gitRepo_resourcePath/automation/tests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - export JPD_URL=https://${res_nightlyEnvDetails_name}itestnt1.jfrogdev.org
            - export MC_ACCESS_TOKEN=$(node createAccessToken.js | tail -1)
            - echo "Uploading 200 parallel builds license"
            - |
              curl -X POST "https://${res_nightlyEnvDetails_name}itestnt1.jfrogdev.org/mc/api/v1/buckets" \
                -H "Authorization: Bearer $MC_ACCESS_TOKEN" -H 'Content-Type: multipart/form-data' \
                -F "file=@$res_automationArtifacts_resourcePath/186060683_1657637804148.json;type=application/octet-stream" \
                -F "key=$int_mc_license_key" \
                -F 'name=mybucket' -Lvvv
            - write_output "itestNativeSteps" "URL=https://${res_nightlyEnvDetails_name}itestnt1.jfrogdev.org"
            - write_output "itestNativeSteps" "JPD_JOIN_KEY=$JPD_JOIN_KEY"
            - write_output "itestNativeSteps" "JPD_PASSWORD=$PASSWORD"
      - name: itests_misc_prep
        type: Bash
        configuration:
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - 16.10.0
          inputSteps:
            - name: itests_misc
          integrations:
            - name: mc_license
            - name: entArt
          inputResources:
            - name: automationArtifacts
            - name: nightlyEnvDetails
            - name: auto_gitRepo
              trigger: false
          outputResources:
            - name: itestMisc
        execution:
          onExecute:
            - echo "Changing password from default password to $PASSWORD in env https://${res_nightlyEnvDetails_name}itestMisc.jfrogdev.org"
            - |
              curl --location --request POST "https://${res_nightlyEnvDetails_name}itestMisc.jfrogdev.org/artifactory/api/security/users/authorization/changePassword" \
                -u "admin:password" \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "userName" : "admin",
                    "oldPassword" : "password",
                    "newPassword1" : "Password@1",
                    "newPassword2" : "Password@1"
                }'
            - echo "Uploading GPG key"
            - |
              curl -u admin:$PASSWORD -H "Accept: application/json" -H "Content-Type: application/json" \
                -X PUT "https://${res_nightlyEnvDetails_name}itestMisc.jfrogdev.org/distribution/api/v1/keys/gpg" \
                -T $res_automationArtifacts_resourcePath/gpg.json -Lvvv
            - echo "Uploading SSH key"
            - |
              curl -u admin:$PASSWORD -H "Accept: application/json" \
                -H "Content-Type: application/json" -X POST "https://${res_nightlyEnvDetails_name}itestMisc.jfrogdev.org/artifactory/api/security/keys/trusted" \
                --data-binary '{"alias":"test","public_key":"-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQGNBGDv22cBDADQcFtzBhJnhfiCRFZsTe6M/AXJ07KFdhljF+5QWnymf4a3/pQF\njUq4Ft5Blbe4EWfnxW56bMHY3rVeFjkM05EW7+h1aqNVBdlVF9IIPAnyQedBvmJ8\nAl6EK+VoMIzKjSNcVAW0Mmm0d5CPIvkx2IlsMC8TzCpp+qYl9KWojTKDJeHonFkM\nmlltvSRRgQ1gkt9eUd2dtM2SJALUQ2lG85V0oYZNnqqHSV5yRSqEuYRwji7mfJPm\n60L/8NIixRPexj2e0t4C9/UtduZCup8C/ykTDzMPT3GFWdoO7ZpIHYNgTCw3B3Dx\nf+DYWgqQTpJOCuxraTfINnZ/1EIsF/jG8i/rHD49W+N9YIlKOrFTPfcCtJrwPGF3\nlZX5l30eNxz7mlahqHZjNWFl3dwNcbrqdX8fRIDcuuS4Q250BE/ZP1PcNCW+9fog\ngFnvN7SrqIA+mzTd7swvFeF/vGeAaV4/wNDpbRc14TZ8g0uG+XFuHC9FJO3BjdKm\nsilUzD7vI5ByIN8AEQEAAbQbdmlzaG51ciA8dmlzaG51ckBqZnJvZy5jb20+iQHS\nBBMBCAA8FiEEJzjXoG5bIKnJVcO1qFcyPp11WdUFAmDv22cCGwMFCwkIBwIDIgIB\nBhUKCQgLAgQWAgMBAh4HAheAAAoJEKhXMj6ddVnVtpEL/08MRg73GYf/QCzXM7ok\nWi1oBXcW3poeuvuPKFtq6Bej33xZBlIxqkrLloDasHA9v4eutIXj5jnoE9ZyTxjw\nt92PTH9i42yWY5ErBTv3Hacgc5s4N9mQtOlqBiIaMi/5FZVlgR+/kB3jGRXE3bqz\nIg6+JFaZR4B2ZRbH5Gdao15QyYFerGaRJZC23vEkeORGq7aqQ2Jw8Zk1+H6oA1Hx\nl5YNxWGD9ykRJEXIZPMQMa/1QJKnf5si+3O/YZnz+IzwnUewfhY/zJbNhWAOARgQ\nev/1lnVzjostluAaDjtjH61P7YM8LOjS1C+QIy3LO3tk4VYjBWvsq30nTKKOITW1\nlLcelVmNOldSvaC0dRztmumjOPexaD0sxM8i4GXMLfKkLfjoumRoI4aFCtLuwVEj\niyzlY0QumC/34dgP7EMKM6vQY21kfQLHXxYU0gkrHKhoNe9LkGb8mWIdCwVr9lAd\nWK98tbXgEaHqOabpEvN7PqhUDVFzwbVM13ElyKMtvCNkcrkBjQRg79tnAQwAzWRk\n34Z44p9hEm8J6clJhJygCv88zm0K3bm/HnFPpBjUy58xpgdVTTjJzJ6h0YzdB7zC\nmGV7WkoRr/okznXIzxstxpd9dJUv0nQnzMuYgS2MCgk1eBCcjPMq8hV7dJTMERBN\nJ01K+q7IGhiXhBvwUjrPpblIXul/g5XlUhj6Z5I8G7jDDE0rk2N3Dpp5Ya/M46AM\nqhyGj/yiZrxFCTtQAvtzifW2bIqGnOGJ3atgIuSyJVwAjSszr7jDl0EfLVRj6I4v\nOimrqUKmntcDdliBJUa4oEdAUqNxxou6KyRJhRo2wf+/poVHfFhsqznI8L9eUei+\nyfmToSBNshILSjKyuEs+sxybO1mgHwvUAmrlVsTq2FjEET6CjWsTMbe3qjAYy+xW\n1RzRpmdkT4PWk/ht2ou6qqOlBIH3fzGkdAcMjvAAV5ncq1A9LzxqhnUDhztN1uTz\niSWPCUFfMypEiKQI9tVx0+JCaafJIqynsW438XZNLBPJXAzNPCExAtOyKH8fABEB\nAAGJAbYEGAEIACAWIQQnONegblsgqclVw7WoVzI+nXVZ1QUCYO/bZwIbDAAKCRCo\nVzI+nXVZ1cSsDAC0WEIviZMwxjOhlPQHoja/P+1UZU9+Qs8EDY6xiYjeLsah/rIf\nA4c7R3zNb1KdcmHN6yVst3VaMq/soU93xTKlLWphXedN9yht5MG8smfRURHgi2OA\nwb3ZovivR3Plx5UjU4hfoehlWJDNZlje2FZE56oZoOzcNDSdZcc/oXFL54ukVSno\nbiL1o9DVmEta5y+X1b8r0vPE2sb5bmOsaY7mFdsOCaMzIM4cGCc2u4ZugAbK3mQS\nsCTKXLNnkSmYQAkmq+9bZ06WBzwXMerOduyCdEYYFOFhg0ugLVnaCioOov6QW2v2\n1lg0S8pwwPx2LVKE+X0vbdQVa7JZvDkrpw1sGnZ02Smim1JUw+UZlmDiPZf5mIwJ\nswILzc6aBSxBuLQmBl+X3n9KSi3/JI3SzBvRDGxsNb+ln+cx7nL/AMWLpgk1AqC6\nVOg8AL42xE3DEu/LnGDn31bkt2l+5hL+iLsWob66tCUpz+XY+PGuJaN7pejDZwEY\n4Hi7A7VSe3gk2LM=\n=40XY\n-----END PGP PUBLIC KEY BLOCK-----"}'
            - echo "Create MC token"
            - pushd $res_auto_gitRepo_resourcePath/automation/tests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci --cache /tmp/npm_cache --prefer-offline --only=production --legacy-peer-deps
            - add_pipeline_files /tmp/npm_cache npm_cache
            - export JPD_URL=https://${res_nightlyEnvDetails_name}itestMisc.jfrogdev.org
            - export MC_ACCESS_TOKEN=$(node createAccessToken.js | tail -1)
            - echo "Uploading 200 parallel builds license"
            - |
              curl -X POST "https://${res_nightlyEnvDetails_name}itestMisc.jfrogdev.org/mc/api/v1/buckets" \
                -H "Authorization: Bearer $MC_ACCESS_TOKEN" -H 'Content-Type: multipart/form-data' \
                -F "file=@$res_automationArtifacts_resourcePath/186060683_1657637804148.json;type=application/octet-stream" \
                -F "key=$int_mc_license_key" \
                -F 'name=mybucket' -Lvvv
            - write_output "itestMisc" "URL=https://${res_nightlyEnvDetails_name}itestMisc.jfrogdev.org"
            - write_output "itestMisc" "JPD_JOIN_KEY=$JPD_JOIN_KEY"
            - write_output "itestMisc" "JPD_PASSWORD=$PASSWORD"
      - name: itest_webhooks_prep
        type: Bash
        configuration:
          inputSteps:
            - name: itest_webhooks
          integrations:
            - name: mc_license
            - name: entArt
          inputResources:
            - name: automationArtifacts
            - name: nightlyEnvDetails
            - name: auto_gitRepo
              trigger: false
          outputResources:
            - name: itestWebhooks
        execution:
          onExecute:
            - echo "Changing password from default password to $PASSWORD in env https://${res_nightlyEnvDetails_name}iwh.jfrogdev.org"
            - |
              curl --location --request POST "https://${res_nightlyEnvDetails_name}iwh.jfrogdev.org/artifactory/api/security/users/authorization/changePassword" \
                -u "admin:password" \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "userName" : "admin",
                    "oldPassword" : "password",
                    "newPassword1" : "Password@1",
                    "newPassword2" : "Password@1"
                }'
            - echo "Create MC token"
            - pushd $res_auto_gitRepo_resourcePath/automation/tests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - export JPD_URL=https://${res_nightlyEnvDetails_name}iwh.jfrogdev.org
            - write_output "itestWebhooks" "URL=https://${res_nightlyEnvDetails_name}iwh.jfrogdev.org"
            - write_output "itestWebhooks" "JPD_JOIN_KEY=$JPD_JOIN_KEY"
            - write_output "itestWebhooks" "JPD_PASSWORD=$PASSWORD"
      - name: itest_non_default_prep
        type: Bash
        configuration:
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - 16.10.0
          inputSteps:
            - name: itest_non_default
          integrations:
            - name: mc_license
            - name: entArt
          inputResources:
            - name: automationArtifacts
            - name: nightlyEnvDetails
            - name: auto_gitRepo
              trigger: false
          outputResources:
            - name: itestNonDefault
        execution:
          onExecute:
            - echo "Changing password from default password to $PASSWORD in env https://${res_nightlyEnvDetails_name}itest3.jfrogdev.org"
            - |
              curl --location --request POST "https://${res_nightlyEnvDetails_name}itest3.jfrogdev.org/artifactory/api/security/users/authorization/changePassword" \
                -u "admin:password" \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "userName" : "admin",
                    "oldPassword" : "password",
                    "newPassword1" : "Password@1",
                    "newPassword2" : "Password@1"
                }'
            - echo "Uploading GPG key"
            - |
              curl -u admin:$PASSWORD -H "Accept: application/json" -H "Content-Type: application/json" \
                -X PUT "https://${res_nightlyEnvDetails_name}itest3.jfrogdev.org/distribution/api/v1/keys/gpg" \
                -T $res_automationArtifacts_resourcePath/gpg.json -Lvvv
            - echo "Uploading SSH key"
            - |
              curl -u admin:$PASSWORD -H "Accept: application/json" \
                -H "Content-Type: application/json" -X POST "https://${res_nightlyEnvDetails_name}itest3.jfrogdev.org/artifactory/api/security/keys/trusted" \
                --data-binary '{"alias":"test","public_key":"-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQGNBGDv22cBDADQcFtzBhJnhfiCRFZsTe6M/AXJ07KFdhljF+5QWnymf4a3/pQF\njUq4Ft5Blbe4EWfnxW56bMHY3rVeFjkM05EW7+h1aqNVBdlVF9IIPAnyQedBvmJ8\nAl6EK+VoMIzKjSNcVAW0Mmm0d5CPIvkx2IlsMC8TzCpp+qYl9KWojTKDJeHonFkM\nmlltvSRRgQ1gkt9eUd2dtM2SJALUQ2lG85V0oYZNnqqHSV5yRSqEuYRwji7mfJPm\n60L/8NIixRPexj2e0t4C9/UtduZCup8C/ykTDzMPT3GFWdoO7ZpIHYNgTCw3B3Dx\nf+DYWgqQTpJOCuxraTfINnZ/1EIsF/jG8i/rHD49W+N9YIlKOrFTPfcCtJrwPGF3\nlZX5l30eNxz7mlahqHZjNWFl3dwNcbrqdX8fRIDcuuS4Q250BE/ZP1PcNCW+9fog\ngFnvN7SrqIA+mzTd7swvFeF/vGeAaV4/wNDpbRc14TZ8g0uG+XFuHC9FJO3BjdKm\nsilUzD7vI5ByIN8AEQEAAbQbdmlzaG51ciA8dmlzaG51ckBqZnJvZy5jb20+iQHS\nBBMBCAA8FiEEJzjXoG5bIKnJVcO1qFcyPp11WdUFAmDv22cCGwMFCwkIBwIDIgIB\nBhUKCQgLAgQWAgMBAh4HAheAAAoJEKhXMj6ddVnVtpEL/08MRg73GYf/QCzXM7ok\nWi1oBXcW3poeuvuPKFtq6Bej33xZBlIxqkrLloDasHA9v4eutIXj5jnoE9ZyTxjw\nt92PTH9i42yWY5ErBTv3Hacgc5s4N9mQtOlqBiIaMi/5FZVlgR+/kB3jGRXE3bqz\nIg6+JFaZR4B2ZRbH5Gdao15QyYFerGaRJZC23vEkeORGq7aqQ2Jw8Zk1+H6oA1Hx\nl5YNxWGD9ykRJEXIZPMQMa/1QJKnf5si+3O/YZnz+IzwnUewfhY/zJbNhWAOARgQ\nev/1lnVzjostluAaDjtjH61P7YM8LOjS1C+QIy3LO3tk4VYjBWvsq30nTKKOITW1\nlLcelVmNOldSvaC0dRztmumjOPexaD0sxM8i4GXMLfKkLfjoumRoI4aFCtLuwVEj\niyzlY0QumC/34dgP7EMKM6vQY21kfQLHXxYU0gkrHKhoNe9LkGb8mWIdCwVr9lAd\nWK98tbXgEaHqOabpEvN7PqhUDVFzwbVM13ElyKMtvCNkcrkBjQRg79tnAQwAzWRk\n34Z44p9hEm8J6clJhJygCv88zm0K3bm/HnFPpBjUy58xpgdVTTjJzJ6h0YzdB7zC\nmGV7WkoRr/okznXIzxstxpd9dJUv0nQnzMuYgS2MCgk1eBCcjPMq8hV7dJTMERBN\nJ01K+q7IGhiXhBvwUjrPpblIXul/g5XlUhj6Z5I8G7jDDE0rk2N3Dpp5Ya/M46AM\nqhyGj/yiZrxFCTtQAvtzifW2bIqGnOGJ3atgIuSyJVwAjSszr7jDl0EfLVRj6I4v\nOimrqUKmntcDdliBJUa4oEdAUqNxxou6KyRJhRo2wf+/poVHfFhsqznI8L9eUei+\nyfmToSBNshILSjKyuEs+sxybO1mgHwvUAmrlVsTq2FjEET6CjWsTMbe3qjAYy+xW\n1RzRpmdkT4PWk/ht2ou6qqOlBIH3fzGkdAcMjvAAV5ncq1A9LzxqhnUDhztN1uTz\niSWPCUFfMypEiKQI9tVx0+JCaafJIqynsW438XZNLBPJXAzNPCExAtOyKH8fABEB\nAAGJAbYEGAEIACAWIQQnONegblsgqclVw7WoVzI+nXVZ1QUCYO/bZwIbDAAKCRCo\nVzI+nXVZ1cSsDAC0WEIviZMwxjOhlPQHoja/P+1UZU9+Qs8EDY6xiYjeLsah/rIf\nA4c7R3zNb1KdcmHN6yVst3VaMq/soU93xTKlLWphXedN9yht5MG8smfRURHgi2OA\nwb3ZovivR3Plx5UjU4hfoehlWJDNZlje2FZE56oZoOzcNDSdZcc/oXFL54ukVSno\nbiL1o9DVmEta5y+X1b8r0vPE2sb5bmOsaY7mFdsOCaMzIM4cGCc2u4ZugAbK3mQS\nsCTKXLNnkSmYQAkmq+9bZ06WBzwXMerOduyCdEYYFOFhg0ugLVnaCioOov6QW2v2\n1lg0S8pwwPx2LVKE+X0vbdQVa7JZvDkrpw1sGnZ02Smim1JUw+UZlmDiPZf5mIwJ\nswILzc6aBSxBuLQmBl+X3n9KSi3/JI3SzBvRDGxsNb+ln+cx7nL/AMWLpgk1AqC6\nVOg8AL42xE3DEu/LnGDn31bkt2l+5hL+iLsWob66tCUpz+XY+PGuJaN7pejDZwEY\n4Hi7A7VSe3gk2LM=\n=40XY\n-----END PGP PUBLIC KEY BLOCK-----"}'
            - echo "Create MC token"
            - pushd $res_auto_gitRepo_resourcePath/automation/tests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - export JPD_URL=https://${res_nightlyEnvDetails_name}itest3.jfrogdev.org
            - export MC_ACCESS_TOKEN=$(node createAccessToken.js | tail -1)
            - echo "Uploading 200 parallel builds license"
            - |
              curl -X POST "https://${res_nightlyEnvDetails_name}itest3.jfrogdev.org/mc/api/v1/buckets" \
                -H "Authorization: Bearer $MC_ACCESS_TOKEN" -H 'Content-Type: multipart/form-data' \
                -F "file=@$res_automationArtifacts_resourcePath/186060683_1657637804148.json;type=application/octet-stream" \
                -F "key=$int_mc_license_key" \
                -F 'name=mybucket' -Lvvv
            - write_output "itestNonDefault" "URL=https://${res_nightlyEnvDetails_name}itest3.jfrogdev.org"
            - write_output "itestNonDefault" "JPD_JOIN_KEY=$JPD_JOIN_KEY"
            - write_output "itestNonDefault" "JPD_PASSWORD=$PASSWORD"
      - name: aws_saas_prep
        type: Bash
        configuration:
          inputSteps:
            - name: aws_saas
          integrations:
            - name: mc_license
            - name: entArt
          inputResources:
            - name: nightlyEnvDetails
          outputResources:
            - name: itestAWSSaas
        execution:
          onExecute:
            - echo "Changing password from default password to $PASSWORD in env https://${res_nightlyEnvDetails_name}awssaas.jfrogdev.org"
            - |
              curl --location --request POST "https://${res_nightlyEnvDetails_name}awssaas.jfrogdev.org/artifactory/api/security/users/authorization/changePassword" \
                -u "admin:password" \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "userName" : "admin",
                    "oldPassword" : "password",
                    "newPassword1" : "Password@1",
                    "newPassword2" : "Password@1"
                }'
            - write_output "itestAWSSaas" "URL=https://${res_nightlyEnvDetails_name}awssaas.jfrogdev.org"
      - name: gcp_saas_prep
        type: Bash
        configuration:
          inputSteps:
            - name: gcp_saas
          integrations:
            - name: mc_license
            - name: entArt
          inputResources:
            - name: nightlyEnvDetails
          outputResources:
            - name: itestGCPSaas
        execution:
          onExecute:
            - echo "Changing password from default password to $PASSWORD in env https://${res_nightlyEnvDetails_name}gcpsaas.jfrogdev.org"
            - |
              curl --location --request POST "https://${res_nightlyEnvDetails_name}gcpsaas.jfrogdev.org/artifactory/api/security/users/authorization/changePassword" \
                -u "admin:password" \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "userName" : "admin",
                    "oldPassword" : "password",
                    "newPassword1" : "Password@1",
                    "newPassword2" : "Password@1"
                }'
            - write_output "itestGCPSaas" "URL=https://${res_nightlyEnvDetails_name}gcpsaas.jfrogdev.org"
      - name: az_saas_prep
        type: Bash
        configuration:
          inputSteps:
            - name: az_saas
          integrations:
            - name: mc_license
            - name: entArt
          inputResources:
            - name: nightlyEnvDetails
          outputResources:
            - name: itestAZSaas
        execution:
          onExecute:
            - echo "Changing password from default password to $PASSWORD in env https://${res_nightlyEnvDetails_name}azsaas.jfrogdev.org"
            - |
              curl --location --request POST "https://${res_nightlyEnvDetails_name}azsaas.jfrogdev.org/artifactory/api/security/users/authorization/changePassword" \
                -u "admin:password" \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "userName" : "admin",
                    "oldPassword" : "password",
                    "newPassword1" : "Password@1",
                    "newPassword2" : "Password@1"
                }'
            - write_output "itestAZSaas" "URL=https://${res_nightlyEnvDetails_name}azsaas.jfrogdev.org"

      - name: cypress_test_prep
        type: Bash
        configuration:
          integrations:
            - name: mc_license
            - name: entArt
          inputSteps:
            - name: cypress_test
          inputResources:
            - name: automationArtifacts
            - name: nightlyEnvDetails
            - name: cypress_gitRepo
              trigger: false
          outputResources:
            - name: cypressTest
        execution:
          onExecute:
            - echo "Changing password from default password to $PASSWORD in env https://${res_nightlyEnvDetails_name}cypress.jfrogdev.org"
            - |
              curl --location --request POST "https://${res_nightlyEnvDetails_name}cypress.jfrogdev.org/artifactory/api/security/users/authorization/changePassword" \
                -u "admin:password" \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "userName" : "admin",
                    "oldPassword" : "password",
                    "newPassword1" : "Password@1",
                    "newPassword2" : "Password@1"
                }'
            - echo "Uploading GPG key"
            - |
              curl -u admin:$PASSWORD -H "Accept: application/json" -H "Content-Type: application/json" \
                -X PUT "https://${res_nightlyEnvDetails_name}cypress.jfrogdev.org/distribution/api/v1/keys/gpg" \
                -T $res_automationArtifacts_resourcePath/gpg.json -Lvvv
            - echo "Uploading SSH key"
            - |
              curl -u admin:$PASSWORD -H "Accept: application/json" \
                -H "Content-Type: application/json" -X POST "https://${res_nightlyEnvDetails_name}cypress.jfrogdev.org/artifactory/api/security/keys/trusted" \
                --data-binary '{"alias":"test","public_key":"-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQGNBGDv22cBDADQcFtzBhJnhfiCRFZsTe6M/AXJ07KFdhljF+5QWnymf4a3/pQF\njUq4Ft5Blbe4EWfnxW56bMHY3rVeFjkM05EW7+h1aqNVBdlVF9IIPAnyQedBvmJ8\nAl6EK+VoMIzKjSNcVAW0Mmm0d5CPIvkx2IlsMC8TzCpp+qYl9KWojTKDJeHonFkM\nmlltvSRRgQ1gkt9eUd2dtM2SJALUQ2lG85V0oYZNnqqHSV5yRSqEuYRwji7mfJPm\n60L/8NIixRPexj2e0t4C9/UtduZCup8C/ykTDzMPT3GFWdoO7ZpIHYNgTCw3B3Dx\nf+DYWgqQTpJOCuxraTfINnZ/1EIsF/jG8i/rHD49W+N9YIlKOrFTPfcCtJrwPGF3\nlZX5l30eNxz7mlahqHZjNWFl3dwNcbrqdX8fRIDcuuS4Q250BE/ZP1PcNCW+9fog\ngFnvN7SrqIA+mzTd7swvFeF/vGeAaV4/wNDpbRc14TZ8g0uG+XFuHC9FJO3BjdKm\nsilUzD7vI5ByIN8AEQEAAbQbdmlzaG51ciA8dmlzaG51ckBqZnJvZy5jb20+iQHS\nBBMBCAA8FiEEJzjXoG5bIKnJVcO1qFcyPp11WdUFAmDv22cCGwMFCwkIBwIDIgIB\nBhUKCQgLAgQWAgMBAh4HAheAAAoJEKhXMj6ddVnVtpEL/08MRg73GYf/QCzXM7ok\nWi1oBXcW3poeuvuPKFtq6Bej33xZBlIxqkrLloDasHA9v4eutIXj5jnoE9ZyTxjw\nt92PTH9i42yWY5ErBTv3Hacgc5s4N9mQtOlqBiIaMi/5FZVlgR+/kB3jGRXE3bqz\nIg6+JFaZR4B2ZRbH5Gdao15QyYFerGaRJZC23vEkeORGq7aqQ2Jw8Zk1+H6oA1Hx\nl5YNxWGD9ykRJEXIZPMQMa/1QJKnf5si+3O/YZnz+IzwnUewfhY/zJbNhWAOARgQ\nev/1lnVzjostluAaDjtjH61P7YM8LOjS1C+QIy3LO3tk4VYjBWvsq30nTKKOITW1\nlLcelVmNOldSvaC0dRztmumjOPexaD0sxM8i4GXMLfKkLfjoumRoI4aFCtLuwVEj\niyzlY0QumC/34dgP7EMKM6vQY21kfQLHXxYU0gkrHKhoNe9LkGb8mWIdCwVr9lAd\nWK98tbXgEaHqOabpEvN7PqhUDVFzwbVM13ElyKMtvCNkcrkBjQRg79tnAQwAzWRk\n34Z44p9hEm8J6clJhJygCv88zm0K3bm/HnFPpBjUy58xpgdVTTjJzJ6h0YzdB7zC\nmGV7WkoRr/okznXIzxstxpd9dJUv0nQnzMuYgS2MCgk1eBCcjPMq8hV7dJTMERBN\nJ01K+q7IGhiXhBvwUjrPpblIXul/g5XlUhj6Z5I8G7jDDE0rk2N3Dpp5Ya/M46AM\nqhyGj/yiZrxFCTtQAvtzifW2bIqGnOGJ3atgIuSyJVwAjSszr7jDl0EfLVRj6I4v\nOimrqUKmntcDdliBJUa4oEdAUqNxxou6KyRJhRo2wf+/poVHfFhsqznI8L9eUei+\nyfmToSBNshILSjKyuEs+sxybO1mgHwvUAmrlVsTq2FjEET6CjWsTMbe3qjAYy+xW\n1RzRpmdkT4PWk/ht2ou6qqOlBIH3fzGkdAcMjvAAV5ncq1A9LzxqhnUDhztN1uTz\niSWPCUFfMypEiKQI9tVx0+JCaafJIqynsW438XZNLBPJXAzNPCExAtOyKH8fABEB\nAAGJAbYEGAEIACAWIQQnONegblsgqclVw7WoVzI+nXVZ1QUCYO/bZwIbDAAKCRCo\nVzI+nXVZ1cSsDAC0WEIviZMwxjOhlPQHoja/P+1UZU9+Qs8EDY6xiYjeLsah/rIf\nA4c7R3zNb1KdcmHN6yVst3VaMq/soU93xTKlLWphXedN9yht5MG8smfRURHgi2OA\nwb3ZovivR3Plx5UjU4hfoehlWJDNZlje2FZE56oZoOzcNDSdZcc/oXFL54ukVSno\nbiL1o9DVmEta5y+X1b8r0vPE2sb5bmOsaY7mFdsOCaMzIM4cGCc2u4ZugAbK3mQS\nsCTKXLNnkSmYQAkmq+9bZ06WBzwXMerOduyCdEYYFOFhg0ugLVnaCioOov6QW2v2\n1lg0S8pwwPx2LVKE+X0vbdQVa7JZvDkrpw1sGnZ02Smim1JUw+UZlmDiPZf5mIwJ\nswILzc6aBSxBuLQmBl+X3n9KSi3/JI3SzBvRDGxsNb+ln+cx7nL/AMWLpgk1AqC6\nVOg8AL42xE3DEu/LnGDn31bkt2l+5hL+iLsWob66tCUpz+XY+PGuJaN7pejDZwEY\n4Hi7A7VSe3gk2LM=\n=40XY\n-----END PGP PUBLIC KEY BLOCK-----"}'
            - echo "Create MC token"
            - pushd $res_cypress_gitRepo_resourcePath/services/frontend/e2e
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - export JPD_URL=https://${res_nightlyEnvDetails_name}cypress.jfrogdev.org
            - export MC_ACCESS_TOKEN=$(node createAccessToken.js | tail -1)
            - echo "Uploading 200 parallel builds license"
            - |
              curl -X POST "https://${res_nightlyEnvDetails_name}cypress.jfrogdev.org/mc/api/v1/buckets" \
                -H "Authorization: Bearer $MC_ACCESS_TOKEN" -H 'Content-Type: multipart/form-data' \
                -F "file=@$res_automationArtifacts_resourcePath/186060683_1657637804148.json;type=application/octet-stream" \
                -F "key=$int_mc_license_key" \
                -F 'name=mybucket' -Lvvv
            - write_output "cypressTest" "URL=https://${res_nightlyEnvDetails_name}cypress.jfrogdev.org"
            - write_output "cypressTest" "JPD_JOIN_KEY=$JPD_JOIN_KEY"
            - write_output "cypressTest" "JPD_PASSWORD=$PASSWORD"

  - name: cypress
    configuration:
      integrations:
        - name: entArt
        - name: entplus_deployer
        - name: pipelines_itest_slack
        - name: pipelines_mqtest_slack
      nodePool: pipelines_betaNP
      inputResources:
        - name: cypressTest
    steps:
      - name: cypress_e2e
        type: Bash
        configuration:
          runtime:
            type: image
            image:
              custom:
                name: cypress/browsers
                tag: node14.16.0-chrome89-ff86
          inputResources:
            - name: cypress_gitRepo
          outputResources:
            - name: cypressReleaseApprovalBag
          environmentVariables:
            CYPRESS_BASE_URL:
              allowCustom: true
              default:  "$res_cypressTest_URL"
              description: "URL of the intance against which you want to trigger cypress test suite"
            AWS_PROJECT_INTEGRATION_ACCESSKEYID:
              description: "Default AWS access key-id"
              default: "${int_test_automation_token_AWS_DEV2CLOUD_ACCESSKEYID}"
              values:
                - "${int_test_automation_token_AWS_DEV2CLOUD_ACCESSKEYID}"
                - "${int_test_automation_token_AWS_PROJECT_INTEGRATION_ACCESSKEYID}"
              allowCustom: true
            AWS_PROJECT_INTEGRATION_SECRETACCESSKEY:
              description: "Default AWS ecret access-key"
              default: "${int_test_automation_token_AWS_DEV2CLOUD_SECRETACCESSKEY}"
              values:
                - "${int_test_automation_token_AWS_DEV2CLOUD_SECRETACCESSKEY}"
                - "${int_test_automation_token_AWS_PROJECT_INTEGRATION_SECRETACCESSKEY}"
              allowCustom: true
        execution:
          onStart:
            - node -v
            - |
              echo Y | apt install gettext
              apt -y install jq
            - pushd $res_cypress_gitRepo_resourcePath/services/frontend/e2e
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - npm run cypress:run
          onSuccess:
            - npm run merge-reports
            - save_tests testReport.xml
            - source pipelines_common.sh
            - uploadResult="$(on_complete_cypress)"
            - reportPath=${uploadResult%%:*}
            - echo "report is available on https://entplus.jfrog.io/artifactory/pipe-itest-reports/cypress-reports/$reportPath"
            - reportLink="https://entplus.jfrog.io/artifactory/pipe-itest-reports/cypress-reports/$reportPath"
            - echo "reportLink is $reportLink"
            - echo "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_cypress_gitRepo_commitSha $res_cypress_gitRepo_commitMessage \n Branch - $res_cypress_gitRepo_branchName \n URL - $step_url \n Link to report - $reportLink"
            - colorBar="#00FF00"
            - |
              if [ "$step_cypress_e2e_statusName" != "success" ]
                then
                  colorBar="#FF0000"
              fi
            {{ if hasSuffix "full" "{{gitBranch}}" }}
            - send_notification pipelines_mqtest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_cypress_gitRepo_commitSha $res_cypress_gitRepo_commitMessage \n Branch - $res_cypress_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}" --color "$colorBar"
            {{ end }}
            {{ if eq "master" "{{gitBranch}}" }}
            - send_notification pipelines_itest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_cypress_gitRepo_commitSha $res_cypress_gitRepo_commitMessage \n Branch - $res_cypress_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}" --color "$colorBar"
            {{ end }}
          onFailure:
            - npm run merge-reports
            # - save_tests testReport.xml
            - source pipelines_common.sh
            - uploadResult="$(on_complete_cypress)"
            - reportPath=${uploadResult%%:*}
            - echo "report is available on https://entplus.jfrog.io/artifactory/pipe-itest-reports/cypress-reports/$reportPath"
            - reportLink="https://entplus.jfrog.io/artifactory/pipe-itest-reports/cypress-reports/$reportPath"
            - echo "reportLink is $reportLink"
            - echo "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_cypress_gitRepo_commitSha $res_cypress_gitRepo_commitMessage \n Branch - $res_cypress_gitRepo_branchName \n URL - $step_url \n Link to report - $reportLink"
            - colorBar="#00FF00"
            - |
              if [ "$step_cypress_e2e_statusName" != "success" ]
                then
                  colorBar="#FF0000"
              fi
            {{ if hasSuffix "full" "{{gitBranch}}" }}
            - send_notification pipelines_mqtest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_cypress_gitRepo_commitSha $res_cypress_gitRepo_commitMessage \n Branch - $res_cypress_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}" --color "$colorBar"
            {{ end }}
            {{ if eq "master" "{{gitBranch}}" }}
            - send_notification pipelines_itest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_cypress_gitRepo_commitSha $res_cypress_gitRepo_commitMessage \n Branch - $res_cypress_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}" --color "$colorBar"
            {{ end }}
          onComplete:
            - write_output cypressReleaseApprovalBag APPROVAL_STATUS='REQUESTING_APPROVAL_FOR_RELEASE_PIPELINES'
  - name: itests_miscTests
    configuration:
      chronological: true
      nodePool: pipelines_testing
      inputResources:
        - name: itestMisc
        - name: cpGit
          trigger: false
      environmentVariables:
        readOnly:
          #set this env to true to delete the Conf.json file
          removeConfFile: "false"
          confFileName: conf.json
          SKIP_NPM_INSTALL:
            description: "Skip npm install for faster setup"
            default: "false"
            allowCustom: true
          exitCode: "1"
          LOG_LEVEL: "debug"
          JPD_URL: "$res_itestMisc_URL"
          JFROG_ARTIFACTORY_USER: "admin"
          JFROG_ADMIN_ARTIFACTORY_PASSWORD: "$res_itestMisc_JPD_PASSWORD"
          JFROG_ARTIFACTORY_APIKEY: "$res_itestMisc_JPD_PASSWORD"
          GITHUB_TOKEN: "${int_s_gitHub_token}"
          GITHUB_URL: "${int_test_automation_token_GITHUB_URL}"
          JFROG_JOIN_KEY: "$res_itestMisc_JPD_JOIN_KEY"
          DEFAULT_NODE_POOL_NAME:
            allowCustom: true
            default: u18dynamic
            description: "Default nodePool"
          #by default this is set to node pool with name `u16dynamic`
          gitUser: "PIPA"
          PREP_BUILDNODES: "true"
          DEFAULT_UBUNTU_NODEPOOL_OS:
            allowCustom: true
            default: "Ubuntu_18.04"
            description: "Default operating system for node pool tests"
          DEFAULT_NODEPOOL_NUMBEROFNODES:
            allowCustom: true
            default: 100
            description: "Default number of nodes for node pool tests"
          DEFAULT_NODEPOOL_REGION:
            allowCustom: true
            default: "ap-south-1"
            description: "Default region for node pool tests"
          DEFAULT_AZURE_NODEPOOL_REGION:
            allowCustom: true
            default: "westus"
            description: "Default region for azure node pool tests"
          DEFAULT_GCP_NODEPOOL_REGION:
            allowCustom: true
            default: "us-west1"
            description: "Default region for gcp node pool tests"
          DEFAULT_NODEPOOL_ARCHITECTURE:
            allowCustom: true
            default: "x86_64"
            description: "Default architecture for node pool tests"
          DEFAULT_NODEPOOL_NODEIDLEINTERVAL:
            allowCustom: true
            default: 1
            description: "Default node interval(in min) for node pool tests"
          DEFAULT_NODEPOOL_DISKSIZE:
            allowCustom: true
            default: 90
            description: "Default disk size for node pool tests"
          DEFAULT_NODEPOOL_TIMEOUT:
            allowCustom: true
            default: 30000
            description: "Default timeout(in sec) for node pool tests"
          DEFAULT_WINDOWS_NODEPOOL_OS:
            allowCustom: true
            default: "WindowsServer_2019"
          AWS_NODEPOOL_KEYPAIRNAME:
            description: "AWS key-pair"
            default: "dev2cloud-pp-aps1-nodepool"
            allowCustom: true
          AWS_NODEPOOL_SECOND_KEYPAIRNAME:
            description: "AWS second key-pair"
            default: "pipetesting003-eu-central-1"
            allowCustom: true
          AWS_NODEPOOL_SUBNETID:
            description: "Default AWS subnet-id"
            default: "subnet-0cdfebd1890e2967a"
            allowCustom: true
          AWS_NODEPOOL_SECOND_SUBNETID:
            description: "second AWS subnet-id"
            default: "subnet-050a07ea2f5cbee1c"
            allowCustom: true
          AWS_NODEPOOL_INSTANCESIZE:
            description: "Default AWS instance-size"
            default: "t3a.medium"
            allowCustom: true
          AWS_NODEPOOL_WIN_19_INSTANCESIZE:
            description: "Default AWS instance-size"
            default: "t3a.medium"
            allowCustom: true
          AWS_NODEPOOL_SECURITYGROUPID:
            description: " Default AWS security group-id"
            default: "sg-04d78bcf2e81c95a0"
            allowCustom: true
          AWS_NODEPOOL_SECOND_SECURITYGROUPID:
            description: " second AWS security group-id"
            default: "sg-0ea095851df05843e"
            allowCustom: true
          AWS_PROJECT_INTEGRATION_ACCESSKEYID:
            description: "Default AWS access key-id"
            default: "${int_test_automation_token_AWS_DEV2CLOUD_ACCESSKEYID}"
            values:
              - "${int_test_automation_token_AWS_DEV2CLOUD_ACCESSKEYID}"
              - "${int_test_automation_token_AWS_PROJECT_INTEGRATION_ACCESSKEYID}"
            allowCustom: true
          AWS_PROJECT_INTEGRATION_SECRETACCESSKEY:
            description: "Default AWS ecret access-key"
            default: "${int_test_automation_token_AWS_DEV2CLOUD_SECRETACCESSKEY}"
            values:
              - "${int_test_automation_token_AWS_DEV2CLOUD_SECRETACCESSKEY}"
              - "${int_test_automation_token_AWS_PROJECT_INTEGRATION_SECRETACCESSKEY}"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_APPID:
            description: "Default Azure app-id"
            default: "192757c5-73a6-4257-84ec-1fe4c30f98fb"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_PASSWORD:
            description: "Default Azure password"
            default: "${int_az_jfrog_new_password}"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_TENANT:
            description: "Default Azure tenant key"
            default: "ad8b5a8c-9862-4c41-a341-aa838fc564df"
            allowCustom: true
          AZURE_NODEPOOL_SUBSCRIPTIONID:
            allowCustom: true
            default: "f27d81be-eea4-479e-a745-11088b8cc1b0"
            description: "Default Azure subscription-id"
          AZURE_NODEPOOL_RESOURCEGROUPNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure resource group name"
          AZURE_NODEPOOL_VNETNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure vnetname"
          AZURE_NODEPOOL_SUBNETNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure subnet name"
          AZURE_NODEPOOL_PUBLICSSHKEY:
            allowCustom: true
            default: "\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCA0GPIdWfyEn21jkMhS8/JvoJ4viuPmnBhuazjwUbilM3zO38hQc8nr8eW0zJS/zpf2V9QewpJ1t9x5tw4bdTRMN99aaIbqr6ZSz/1ofFL1PkpC9Y7HWi+dmpxlIqRkX6JGPaUNb2ql71vVPY0tLg2G4MgcX/ZFQCVO3z/o20HURgrcxYEu5A3+dOkyiE3JQBi+s66cgDm7p3IIND2eEHcZiIsaW6vg2T85oF8WkXcpHFLLXt5gzND6f/8TwW657QXe2P5mijWwTtCOaopfSK0vXC1dFzPPpwKGPTv7KrsTSPL3c/QP6YqEYratKpNTenmvGPGqYNFgj8oMIbVN2SP\""
            description: "Default Azure public ssh-key"
          AZURE_NODEPOOL_INSTANCESIZE:
            allowCustom: true
            default: "Standard_F2s"
            description: "Default Azure instance size"
          GCP_NODEPOOL_INSTANCESIZE:
            allowCustom: true
            default: "n1-standard-2"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_SUBNET:
            allowCustom: true
            default: "jfrog-usw1-dynamicnodes"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_NETWORK_TAGS:
            allowCustom: true
            default: "behind-nat,jenkins,pipelines,xray-app,xray-apps"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_ZONE:
            allowCustom: true
            default: "us-west1-b"
            description: "This variable is used to set default instance size for azure node pool"
          D_GOOGLECLOUD_PROJECT_INTEGRATION_JSONKEY:
            allowCustom: true
            default: "${int_test_automation_gcp_jsonKey}"
            description: "This variable is used to set default instance size for azure node pool"
          KUBERNETES_NODEPOOL_STORAGECLASS:
            allowCustom: true
            default: "standard"
            description: "This variable is used to set default storage class for kubernetes node pool"
          KUBERNETES_NODEPOOL_NAMESPACE:
            allowCustom: true
            default: "pipe-master-pool"
            description: "This variable is used to set default namespace for kubernetes node pool"
          KUBERNETES_PROJECT_INTEGRATION_KUBECONFIG:
            allowCustom: true
            default: "${int_KubeFile_automation_kubeconfig}"
            description: "This variable is used to set default kubeconfig for kubernetes node pool"
          KUBERNETES_PROJECT_INTEGRATION_KUBECONFIG_PATH:
            allowCustom: true
            default: "${step_workspace_dir}/KubeFile_automation/config"
            description: "This variable is used to set default kubeconfig for kubernetes node pool"
          DONT_DELETE_PS:
            description: "When run status reaches error status, pipeline source doesn't get deleted "
            default: "true"
            allowCustom: true
          GREP:
            description: "Only run tests matching this string"
            default: "FLAKY"
            allowCustom: true
          INVERT:
            description: "Skip all the tests matching the grep string. Accepts only true or false"
            default: "true"
            allowCustom: true
          PREP_FOR_HELM_TESTS:
            description: "Upload helm test files to artifactory for running helm test cases"
            default: "true"
            allowCustom: true
          U18_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_ubuntu_18_static_vm_ip_address}"
            description: "Ubuntu 18 static vm ip address"
          U20_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_ubuntu_20_static_vm_ip_address}"
            description: "Ubuntu 20 static vm ip address"
          RHEL7_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_redhat_7_static_vm_ip_address}"
            description: "Redhat 7 static vm ip address"
          CENT7_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_centos_7_static_vm_ip_address}"
            description: "CentOS 7 static vm ip address"
          SSH_USER:
            allowCustom: false
            default:  "automation"
            description: "SSH user name in automation"
          SSH_PRIVATE_KEY:
            allowCustom: false
            default:  "${int_automation_ssh_privateKey}"
            description: "SSH private key value in automation"
          GITHUB_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "PIPA/Org_test_Automation_Webhooks"
            description: "GitHub webhook test repository"
          BITBUCKET_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "jfbeta/org_test_automation_webhooks"
            description: "Bitbucket webhook test repository"
          BITBUCKETSERVERBASIC_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "PIP/tests"
            description: "BitbucketServerBasic webhook test repository"
          GITLAB_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "jfbeta/webhooks"
            description: "GitLab webhook test repository"
          PIPELINES_SERVICE_USER_TOKEN:
            allowCustom: true
            default: "Testing1234"
            description: Service User Token
          DEPLOY_KEYS_REPOSITORY_FULL_NAME:
            allowCustom: true
            default: "PIPA/org_test_automation_deploy_keys"
            description: 'deploy keys automation github repository'
          AWS_NODEPOOL_CUSTOMTAG_KEYS:
            description: "keys for custom tag to identify testing instances"
            default: "pipelines-internal,Group"
            allowCustom: true
          AWS_NODEPOOL_CUSTOMTAG_VALUES:
            description: "values for custom tag to identify testing instances"
            default: "testing,PIPELINES"
            allowCustom: true
          BITBUCKET_SERVER_PASSWORD:
            description: "BBS password"
            default: "${int_test_automation_bbs_new_password}"
            allowCustom: true
          BITBUCKET_SERVER_URL:
            description: "BBS url"
            default: "${int_test_automation_bbs_new_url}"
            allowCustom: true
          BITBUCKET_SERVER_USERNAME:
            description: "BBS username"
            default: "${int_test_automation_bbs_new_username}"
            allowCustom: true
          GITHUB_REPOSITORY_BRANCH: "master"
          GITHUB_REPOSITORY_FULLPATH_BASH: "jfrog/Org_test_Automation_bash"
          GITHUB_REPOSITORY_FULLPATH_POWERSHELL: "jfrog/Org_test_Automation_PowerShell"
          MULTIBRANCH_REPOSITORY_FULL_NAME: "PIPA/org_test_automation_MultiBranch"
          EXTENSIONS_REPOSITORY_FULL_NAME : "PIPA/extensions"
          TEMPLATES_REPOSITORY_FULL_NAME : "PIPA/templates"
          GITHUB_REPOSITORY_FULLPATH: "jfrog/Org_test_Automation"
          GITHUB_MULTIBRANCH_REPOSITORY_FULL_NAME: "jfrog/org_test_automation_MultiBranch"
          BITBUCKETSERVER_REPOSITORY_FULLPATH_POWERSHELL: "PIPA/Org_test_Automation_PowerShell"
      integrations:
        - name: test_automation
        - name: test_automation_token
        - name: KubeFile_automation
        - name: lightweight_automation_generic
        - name: automation_ssh
        - name: test_automation_bbs_new
        - name: itest_github
        - name: entplus_deployer
        - name: pipelines_itest_slack
        - name: pipelines_mqtest_slack
        - name: s_gitHub
    steps:
      - name: setup_PreMatrix
        type: PreMatrix
        configuration:
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - "16"
          integrations:
            - name: entArt
            - name: az_jfrog_new
            - name: test_automation_gcp
          inputResources:
            - name: auto_gitRepo
              trigger: false
            - name: Org_test_Automation_BBS
              trigger: false
            - name: Org_test_Automation_bash_BBS
              trigger: false
            - name: Org_test_Automation_PowerShell_BBS
              trigger: false
            - name: automation_templateFS
              trigger: false
            - name: triggerLightWeightAutomation
              trigger: false
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            listOfTests: "core/api/systemCodes.js"
        execution:
          onStart:
            - echo ${int_test_automation_bbs_new_url}
            - echo ${BITBUCKET_SERVER_URL}
            - node -v
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - cp -r $res_auto_gitRepo_resourcePath/automation/tests .
            - pushd tests
            - cp -r $res_Org_test_Automation_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_bash_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_PowerShell_BBS_resourcePath .
            - ls -la
            - cp -r $res_automation_templateFS_resourcePath .
            - restore_pipeline_files jsonfile $confFileName
            - if [[ -f "$confFileName" ]]; then jsonfile=true && cat $confFileName; fi
            - if ( $jsonfile && $removeConfFile ); then echo "removing confFileName" && rm -rf $confFileName; fi
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - sudo chmod 0777 $TEMPLATE_BINARY_PATH
            - export testCases=$listOfTests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - ./test.sh
            - popd
            - rm -rf $res_auto_gitRepo_resourcePath
            - rm -rf $res_Org_test_Automation_BBS_resourcePath
            - rm -rf $res_Org_test_Automation_bash_BBS_resourcePath
            - rm -rf $res_Org_test_Automation_PowerShell_BBS_resourcePath

      - name: misc_itests
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/nodePools/K8sDynamicNodes/k8sDynamicNodePool1.js"
            - listOfTests: "core/nodePools/K8sDynamicNodes/k8sdynamicNodePool2.js"
            - listOfTests: "core/projectIntegrations/JFrogPlatformToken.js"
            - listOfTests: "core/resources/CronTrigger.js"
            - listOfTests: "core/resources/DistributionRule.js"
            - listOfTests: "core/resources/Image2.js"
            - listOfTests: "core/resources/IncomingWebhook.js"
            - listOfTests: "core/resources/OutgoingWebhook.js"
            - listOfTests: "core/resources/RemoteFile2.js"
            - listOfTests: "core/resources/VmCluster.js"
            - listOfTests: "core/templates/GoCI.js"
            - listOfTests: "core/templates/GradleCI.js"
            - listOfTests: "core/templates/MavenCI.js"
            - listOfTests: "core/templates/NpmCI.js"
            - listOfTests: "core/templates/PromoteCI.js"
            - listOfTests: "core/templates/ReleaseTemplates.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_bash"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: misc_bash
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/Bash/BashIntegrations/BashAirbrakeIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashAzureKeysIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashBitbucketIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashBitBucketServerIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashDigitalOceanIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashDistributionIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashFileServerIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashGitHubEnterpriseIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashGitLabIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashIncomingWebhookIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashJiraIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashKubernetesIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashNewRelicIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashOutgoingWebhookIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashPemKeyIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashSMTPIntegration.js"
            - listOfTests: "core/steps/Bash/BashIntegrations/BashSSHKeyIntegration.js"
            - listOfTests: "core/steps/Bash/BashGeneric/restrictedMode.js"
            - listOfTests: "core/steps/Bash/BashResources/BashDistributionRule.js"
            - listOfTests: "core/steps/Bash/BashResources/BashIncomingWebhookResource.js"
            - listOfTests: "core/steps/Bash/BashResources/BashRemoteFile.js"
            - listOfTests: "core/steps/Bash/BashResources/BashVmCluster.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_bash"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: misc_powershell
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          runtime:
            type: host
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          outputResources:
            - name: list_grep_resource
          inputSteps:
            - name: setup_PreMatrix
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/steps/PowerShell/PSNative/HelmDeploy.js"
            - listOfTests: "core/steps/PowerShell/PSNative/NpmBuild.js"
            - listOfTests: "core/steps/PowerShell/PSNative/PowerShellLinuxVMDeploy.js"
            - listOfTests: "core/steps/PowerShell/PSResources/PowerShellAqlResource.js"
            - listOfTests: "core/steps/PowerShell/PSResources/PowerShellBuildInfoResource.js"
            - listOfTests: "core/steps/PowerShell/PSResources/PowerShellDistrubutionRuleResource.js"
            - listOfTests: "core/steps/PowerShell/PSResources/PowerShellFileSpecResource.js"
            - listOfTests: "core/steps/PowerShell/PSResources/PowerShellGitRepoResource.js"
            - listOfTests: "core/steps/PowerShell/PSResources/PowerShellImageResource.js"
            - listOfTests: "core/steps/PowerShell/PSResources/PowerShellIncomingWebhookResource.js"
            - listOfTests: "core/steps/PowerShell/PSResources/PowerShellPropertyBag.js"
            - listOfTests: "core/steps/PowerShell/PSResources/PowerShellRemoteFileResource.js"
            - listOfTests: "core/steps/PowerShell/PSResources/PowerShellResources.js"
            - listOfTests: "core/steps/PowerShell/PSResources/PowerShellVmClusterResource.js"
            - listOfTests: "core/steps/PowerShell/PSGeneric/Trigger/PowerShellGenericNonDefaultProject.js"
        execution:
          onExecute:
            # - rm -rf $LOCAL_STATE_FILE_PATH && touch $LOCAL_STATE_FILE_PATH
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=setup_PreMatrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_PowerShell"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - mv mochawesome-report/mochawesome.html mochawesome-${steplet_id}.html
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - cp -r $testPath/mochawesome-report .
            - rm -rf setup_PreMatrix
            - save_tests testResults/mocha-junit-reporter

      - name: tearDown_tests_PostMatrix
        type: PostMatrix
        configuration:
          runtime:
            type: host
          integrations:
            - name: entArt
          inputResources:
            - name: auto_gitRepo
              trigger: false
          outputResources:
            - name: miscReleaseApprovalBag
          inputSteps:
            - name: misc_itests
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: misc_bash
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
            - name: misc_powershell
              status:
                - failure
                - success
                - skipped
                - cancelled
                - error
                - timeout
        execution:
          onComplete:
            - write_output miscReleaseApprovalBag APPROVAL_STATUS='REQUESTING_APPROVAL_FOR_RELEASE_PIPELINES'
            - mkdir result-${run_id}
            - save_tests ./misc_itests/testResults/mocha-junit-reporter
            - mv ./misc_itests/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./misc_bash/testResults/mocha-junit-reporter
            - mv ./misc_bash/testResults/mochawesome/*.json result-${run_id}/
            - save_tests ./misc_powershell/testResults/mocha-junit-reporter
            - mv ./misc_powershell/testResults/mochawesome/*.json result-${run_id}/
            - add_pipeline_files result-${run_id} result-${run_id}
            - pushd $res_auto_gitRepo_resourcePath/automation/tests
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - ./test.sh
            - restore_pipeline_files result-${run_id} result_itest
            - ls -la
            - npm run merge-json-reports && npm run merge-html-reports
            - source pipelines_common.sh
            - uploadResult="$(on_complete_itest_nonSCM)"
            - reportPath=${uploadResult%%:*}
            - reportLink="https://entplus.jfrog.io/artifactory/pipe-itest-reports/itest-non-SCM-reports/$reportPath"
            - echo "${reportLink}"
            - testResult="success"
            - |
              if [ "$step_misc_itests_statusName" != "success" ] || [ "$step_misc_bash_statusName" != "success" ] ||
              if [ "$step_misc_powershell_statusName" != "success" ]
                then
                  testResult="failure"
              fi
            - colorBar="#00FF00"
            - |
              if [ "$testResult" == "failure" ]
                then
                  colorBar="#FF0000"
              fi
            {{ if hasSuffix "full" "{{gitBranch}}" }}
                - send_notification pipelines_mqtest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}" --color "$colorBar"
            {{ end }}
            {{ if eq "master" "{{gitBranch}}" }}
            - send_notification pipelines_itest_slack --text "Pipeline - $pipeline_name | Step - $step_name \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url \n Link to report - ${reportLink}" --color "$colorBar"
            {{ end }}      
{{end}}

  - name: api_tests
    configuration:
      runtime:
        type: image
        image:
          auto:
            language: node
            versions:
              - "16"
      nodePool: pipelines_testing
      chronological: true
      inputResources:
        - name: ubuntu_18_static_vm
          trigger: false
        - name: ubuntu_20_static_vm
          trigger: false
        - name: redhat_7_static_vm
          trigger: false
        - name: centos_7_static_vm
          trigger: false
        - name: cpGit
          trigger: false
      environmentVariables:
        readOnly:
          #set this env to true to delete the conf.json file
          removeConfFile: "false"
          confFileName: conf.json
          exitCode: "1"
          LOG_LEVEL: "info"
          JFROG_ARTIFACTORY_USER:
            allowCustom: true
            default: "${int_test_automation_token_JFROG_ARTIFACTORY_USER_lightWeight}"
            description: "Username of the instance against which you want to trigger smoke test suite"
          JFROG_ADMIN_ARTIFACTORY_PASSWORD:
            allowCustom: true
            default: "Password@1"
            description: "Password of the instance against which you want to trigger smoke test suite"
          JFROG_ARTIFACTORY_APIKEY:
            allowCustom: true
            default: "Password@1"
            description: "Add password of the instance against which you want to trigger smoke test suite"
          GITHUB_TOKEN:
            allowCustom: true
            default: "${int_s_gitHub_token}"
            description: "GitHub token for the test automation yaml repository"
          GITHUB_URL: "${int_test_automation_token_GITHUB_URL}"
          gitUser: "PIPA"
          NUMBER_OF_NODES_IN_NODEPOOL:
            description: "Number of nodes that need to present in the node pool"
            default: 200
            allowCustom: true
          # LOCAL_STATE_FILE_PATH: "/tmp/$steplet_number"
          DEFAULT_UBUNTU_NODEPOOL_OS:
            allowCustom: true
            default: "Ubuntu_18.04"
            description: "Default operating system for node pool tests"
          DEFAULT_NODEPOOL_NUMBEROFNODES:
            allowCustom: true
            default: 200
            description: "Default number of nodes for node pool tests"
          DEFAULT_NODEPOOL_REGION:
            allowCustom: true
            default: "ap-south-1"
            description: "Default region for node pool tests"
          DEFAULT_AZURE_NODEPOOL_REGION:
            allowCustom: true
            default: "westus"
            description: "Default region for azure node pool tests"
          DEFAULT_GCP_NODEPOOL_REGION:
            allowCustom: true
            default: "us-west1"
            description: "Default region for gcp node pool tests"
          DEFAULT_NODEPOOL_ARCHITECTURE:
            allowCustom: true
            default: "x86_64"
            description: "Default architecture for node pool tests"
          DEFAULT_NODEPOOL_NODEIDLEINTERVAL:
            allowCustom: true
            default: 1
            description: "Default node interval(in min) for node pool tests"
          DEFAULT_NODEPOOL_DISKSIZE:
            allowCustom: true
            default: 90
            description: "Default disk size for node pool tests"
          DEFAULT_NODEPOOL_TIMEOUT:
            allowCustom: true
            default: 30000
            description: "Default timeout(in sec) for node pool tests"
          DEFAULT_WINDOWS_NODEPOOL_OS:
            allowCustom: true
            default: "WindowsServer_2019"
          AWS_NODEPOOL_KEYPAIRNAME:
            description: "AWS key-pair"
            default: "dev2cloud-pp-aps1-nodepool"
            allowCustom: true
          AWS_NODEPOOL_SECOND_KEYPAIRNAME:
            description: "AWS second key-pair"
            default: "pipetesting003-eu-central-1"
            allowCustom: true
          AWS_NODEPOOL_SUBNETID:
            description: "Default AWS subnet-id"
            default: "subnet-0cdfebd1890e2967a"
            allowCustom: true
          AWS_NODEPOOL_SECOND_SUBNETID:
            description: "second AWS subnet-id"
            default: "subnet-050a07ea2f5cbee1c"
            allowCustom: true
          AWS_NODEPOOL_INSTANCESIZE:
            description: "Default AWS instance-size"
            default: "t3a.medium"
            allowCustom: true
          AWS_NODEPOOL_WIN_19_INSTANCESIZE:
            description: "Default AWS instance-size"
            default: "t3a.medium"
            allowCustom: true
          AWS_NODEPOOL_SECURITYGROUPID:
            description: " Default AWS security group-id"
            default: "sg-04d78bcf2e81c95a0"
            allowCustom: true
          AWS_NODEPOOL_SECOND_SECURITYGROUPID:
            description: " second AWS security group-id"
            default: "sg-0ea095851df05843e"
            allowCustom: true
          AWS_PROJECT_INTEGRATION_ACCESSKEYID:
            description: "Default AWS access key-id"
            default: "${int_test_automation_token_AWS_DEV2CLOUD_ACCESSKEYID}"
            values:
              - "${int_test_automation_token_AWS_DEV2CLOUD_ACCESSKEYID}"
              - "${int_test_automation_token_AWS_PROJECT_INTEGRATION_ACCESSKEYID}"
            allowCustom: true
          AWS_PROJECT_INTEGRATION_SECRETACCESSKEY:
            description: "Default AWS ecret access-key"
            default: "${int_test_automation_token_AWS_DEV2CLOUD_SECRETACCESSKEY}"
            values:
              - "${int_test_automation_token_AWS_DEV2CLOUD_SECRETACCESSKEY}"
              - "${int_test_automation_token_AWS_PROJECT_INTEGRATION_SECRETACCESSKEY}"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_APPID:
            description: "Default Azure app-id"
            default: "192757c5-73a6-4257-84ec-1fe4c30f98fb"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_PASSWORD:
            description: "Default Azure password"
            default: "${int_az_jfrog_new_password}"
            allowCustom: true
          D_AZUREKEYS_PROJECT_INTEGRATION_TENANT:
            description: "Default Azure tenant key"
            default: "ad8b5a8c-9862-4c41-a341-aa838fc564df"
            allowCustom: true
          AZURE_NODEPOOL_SUBSCRIPTIONID:
            allowCustom: true
            default: "f27d81be-eea4-479e-a745-11088b8cc1b0"
            description: "Default Azure subscription-id"
          AZURE_NODEPOOL_RESOURCEGROUPNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure resource group name"
          AZURE_NODEPOOL_VNETNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure vnetname"
          AZURE_NODEPOOL_SUBNETNAME:
            allowCustom: true
            default: "pipelines-bp-westus"
            description: "Default Azure subnet name"
          AZURE_NODEPOOL_PUBLICSSHKEY:
            allowCustom: true
            default: "\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCA0GPIdWfyEn21jkMhS8/JvoJ4viuPmnBhuazjwUbilM3zO38hQc8nr8eW0zJS/zpf2V9QewpJ1t9x5tw4bdTRMN99aaIbqr6ZSz/1ofFL1PkpC9Y7HWi+dmpxlIqRkX6JGPaUNb2ql71vVPY0tLg2G4MgcX/ZFQCVO3z/o20HURgrcxYEu5A3+dOkyiE3JQBi+s66cgDm7p3IIND2eEHcZiIsaW6vg2T85oF8WkXcpHFLLXt5gzND6f/8TwW657QXe2P5mijWwTtCOaopfSK0vXC1dFzPPpwKGPTv7KrsTSPL3c/QP6YqEYratKpNTenmvGPGqYNFgj8oMIbVN2SP\""
            description: "Default Azure public ssh-key"
          AZURE_NODEPOOL_INSTANCESIZE:
            allowCustom: true
            default: "Standard_F2s"
            description: "Default Azure instance size"
          GCP_NODEPOOL_INSTANCESIZE:
            allowCustom: true
            default: "n1-standard-2"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_SUBNET:
            allowCustom: true
            default: "jfrog-usw1-dynamicnodes"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_NETWORK_TAGS:
            allowCustom: true
            default: "behind-nat,jenkins,pipelines,xray-app,xray-apps"
            description: "This variable is used to set default instance size for azure node pool"
          GCP_NODEPOOL_ZONE:
            allowCustom: true
            default: "us-west1-b"
            description: "This variable is used to set default instance size for azure node pool"
          D_GOOGLECLOUD_PROJECT_INTEGRATION_JSONKEY:
            allowCustom: true
            default: "${int_test_automation_gcp_jsonKey}"
            description: "This variable is used to set default instance size for azure node pool"
          KUBERNETES_NODEPOOL_STORAGECLASS:
            allowCustom: true
            default: "standard"
            description: "This variable is used to set default storage class for kubernetes node pool"
          KUBERNETES_NODEPOOL_NAMESPACE:
            allowCustom: true
            default: "pipe-master-pool"
            description: "This variable is used to set default namespace for kubernetes node pool"
          KUBERNETES_PROJECT_INTEGRATION_KUBECONFIG:
            allowCustom: true
            default: "${int_KubeFile_automation_kubeconfig}"
            description: "This variable is used to set default kubeconfig for kubernetes node pool"
          KUBERNETES_PROJECT_INTEGRATION_KUBECONFIG_PATH:
            allowCustom: true
            default: "${step_workspace_dir}/KubeFile_automation/config"
            description: "This variable is used to set default kubeconfig for kubernetes node pool"
          DONT_DELETE_PS:
            description: "When run status reaches error status, pipeline source doesn't get deleted "
            default: "false"
            allowCustom: true
          DEFAULT_NODE_POOL_NAME:
            allowCustom: true
            default: u18dynamic
            description: "Default nodePool"
          PREP_FOR_HELM_TESTS:
            description: "Upload helm test files to artifactory for running helm test cases"
            default: "false"
            allowCustom: true
          U18_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_ubuntu_18_static_vm_ip_address}"
            description: "Ubuntu 18 static vm ip address"
          U20_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_ubuntu_20_static_vm_ip_address}"
            description: "Ubuntu 20 static vm ip address"
          RHEL7_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_redhat_7_static_vm_ip_address}"
            description: "Redhat 7 static vm ip address"
          CENT7_STATIC_IP_ADDRESS:
            allowCustom: false
            default:  "${res_centos_7_static_vm_ip_address}"
            description: "CentOS 7 static vm ip address"
          SSH_USER:
            allowCustom: false
            default:  "automation"
            description: "SSH user name in automation"
          SSH_PRIVATE_KEY:
            allowCustom: false
            default:  "${int_automation_ssh_privateKey}"
            description: "SSH private key value in automation"
          GITHUB_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "PIPA/Org_test_Automation_Webhooks"
            description: "GitHub webhook test repository"
          BITBUCKET_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "jfbeta/org_test_automation_webhooks"
            description: "Bitbucket webhook test repository"
          BITBUCKETSERVERBASIC_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "PIP/tests"
            description: "BitbucketServerBasic webhook test repository"
          GITLAB_WEBHOOKS_REPOSITORY_FULL_NAME:
            allowCustom: false
            default:  "jfbeta/webhooks"
            description: "GitLab webhook test repository"
          PIPELINES_SERVICE_USER_TOKEN:
            allowCustom: true
            default: "Testing1234"
            description: Service User Token
          DEPLOY_KEYS_REPOSITORY_FULL_NAME:
            allowCustom: true
            default: "PIPA/org_test_automation_deploy_keys"
            description: 'deploy keys automation github repository'
          AWS_NODEPOOL_CUSTOMTAG_KEYS:
            description: "keys for custom tag to identify testing instances"
            default: "pipelines-internal,Group"
            allowCustom: true
          AWS_NODEPOOL_CUSTOMTAG_VALUES:
            description: "values for custom tag to identify testing instances"
            default: "testing,PIPELINES"
            allowCustom: true
          BITBUCKET_SERVER_PASSWORD:
            description: "BBS password"
            default: "${int_test_automation_bbs_new_password}"
            allowCustom: true
          BITBUCKET_SERVER_URL:
            description: "BBS url"
            default: "${int_test_automation_bbs_new_url}"
            allowCustom: true
          BITBUCKET_SERVER_USERNAME:
            description: "BBS username"
            default: "${int_test_automation_bbs_new_username}"
            allowCustom: true
          BITBUCKET_SERVER_TOKEN:
            description: "BBS token"
            default: "${int_automation_bbs_aps_BITBUCKET_SERVER_TOKEN}"
            allowCustom: true
          GREP:
            description: "Only run tests matching this string"
            default: ""
            allowCustom: true
          GITHUB_REPOSITORY_BRANCH: "master"
          GITHUB_REPOSITORY_FULLPATH_BASH: "jfrog/Org_test_Automation_bash"
          GITHUB_REPOSITORY_FULLPATH_POWERSHELL: "jfrog/Org_test_Automation_PowerShell"
          MULTIBRANCH_REPOSITORY_FULL_NAME: "PIPA/org_test_automation_MultiBranch"
          GITHUB_REPOSITORY_FULLPATH_BASH_BRANCH: "master"
          EMPTY_REPOSITORY_FULL_NAME : "PIPA/Org_test_Automation_empty"
          EXTENSIONS_REPOSITORY_FULL_NAME : "PIPA/extensions"
          TEMPLATES_REPOSITORY_FULL_NAME : "PIPA/templates"
          GITHUB_REPOSITORY_FULLPATH: "jfrog/Org_test_Automation"
          GITHUB_MULTIBRANCH_REPOSITORY_FULL_NAME: "jfrog/org_test_automation_MultiBranch"
          REPOSITORY_FULL_NAME_BBS: "PIPA/Org_test_Automation"
      integrations:
        - name: test_automation
        - name: test_automation_token
        - name: test_automation_bbs_new
        - name: KubeFile_automation
        - name: entArt
        - name: lightweight_automation_generic
        - name: test_automation_jira
        - name: pipelines_mqtest_slack
        - name: az_jfrog_new
        - name: automation_ssh
        - name: test_automation_bitbucket
        - name: s_gitHub
        - name: automation_bbs_aps
        
    steps:
      - name: setup_prematrix
        type: PreMatrix
        configuration:
          inputResources:
            - name: auto_gitRepo
              trigger: false
            - name: automation_templateFS
              trigger: false
            - name: Org_test_Automation_BBS
              trigger: false
            - name: Org_test_Automation_bash_BBS
              trigger: false
            - name: Org_test_Automation_PowerShell_BBS
              trigger: false
            - name: Org_test_Automation_Private_BBS
              trigger: false
            - name: org_test_automation_MultiBranch_BBS
              trigger: false
            - name: automationArtifact
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_NPM_INSTALL: "false"
            JPD_URL:
              allowCustom: true
              default:  "https://apimaster.jfrogdev.org"
              description: "URL of the intance against which you want to trigger api test suite"
            JFROG_JOIN_KEY:
              allowCustom: true
              default: "123456789"
              description: "Join-key of the instance against which you want to trigger api test suite"
            PASSWORD:
              allowCustom: true
              default: "Password@1"
              description: "Password of the instance against which you want to trigger api test suite"
            FIRSTPROJECTNAME: "firstProject"
            FIRSTPROJECTKEY: "first"
            SECONDPROJECTNAME: "secondProject"
            SECONDPROJECTKEY: "second"
          integrations:
            - name: mc_license
            - name: entArt
        execution:
          onStart:
            - echo "Uploading SSH key"
            - |
              curl -u admin:$PASSWORD -H "Accept: application/json" \
                -H "Content-Type: application/json" -X POST "${JPD_URL}/artifactory/api/security/keys/trusted" \
                --data-binary '{"alias":"test","public_key":"-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQGNBGDv22cBDADQcFtzBhJnhfiCRFZsTe6M/AXJ07KFdhljF+5QWnymf4a3/pQF\njUq4Ft5Blbe4EWfnxW56bMHY3rVeFjkM05EW7+h1aqNVBdlVF9IIPAnyQedBvmJ8\nAl6EK+VoMIzKjSNcVAW0Mmm0d5CPIvkx2IlsMC8TzCpp+qYl9KWojTKDJeHonFkM\nmlltvSRRgQ1gkt9eUd2dtM2SJALUQ2lG85V0oYZNnqqHSV5yRSqEuYRwji7mfJPm\n60L/8NIixRPexj2e0t4C9/UtduZCup8C/ykTDzMPT3GFWdoO7ZpIHYNgTCw3B3Dx\nf+DYWgqQTpJOCuxraTfINnZ/1EIsF/jG8i/rHD49W+N9YIlKOrFTPfcCtJrwPGF3\nlZX5l30eNxz7mlahqHZjNWFl3dwNcbrqdX8fRIDcuuS4Q250BE/ZP1PcNCW+9fog\ngFnvN7SrqIA+mzTd7swvFeF/vGeAaV4/wNDpbRc14TZ8g0uG+XFuHC9FJO3BjdKm\nsilUzD7vI5ByIN8AEQEAAbQbdmlzaG51ciA8dmlzaG51ckBqZnJvZy5jb20+iQHS\nBBMBCAA8FiEEJzjXoG5bIKnJVcO1qFcyPp11WdUFAmDv22cCGwMFCwkIBwIDIgIB\nBhUKCQgLAgQWAgMBAh4HAheAAAoJEKhXMj6ddVnVtpEL/08MRg73GYf/QCzXM7ok\nWi1oBXcW3poeuvuPKFtq6Bej33xZBlIxqkrLloDasHA9v4eutIXj5jnoE9ZyTxjw\nt92PTH9i42yWY5ErBTv3Hacgc5s4N9mQtOlqBiIaMi/5FZVlgR+/kB3jGRXE3bqz\nIg6+JFaZR4B2ZRbH5Gdao15QyYFerGaRJZC23vEkeORGq7aqQ2Jw8Zk1+H6oA1Hx\nl5YNxWGD9ykRJEXIZPMQMa/1QJKnf5si+3O/YZnz+IzwnUewfhY/zJbNhWAOARgQ\nev/1lnVzjostluAaDjtjH61P7YM8LOjS1C+QIy3LO3tk4VYjBWvsq30nTKKOITW1\nlLcelVmNOldSvaC0dRztmumjOPexaD0sxM8i4GXMLfKkLfjoumRoI4aFCtLuwVEj\niyzlY0QumC/34dgP7EMKM6vQY21kfQLHXxYU0gkrHKhoNe9LkGb8mWIdCwVr9lAd\nWK98tbXgEaHqOabpEvN7PqhUDVFzwbVM13ElyKMtvCNkcrkBjQRg79tnAQwAzWRk\n34Z44p9hEm8J6clJhJygCv88zm0K3bm/HnFPpBjUy58xpgdVTTjJzJ6h0YzdB7zC\nmGV7WkoRr/okznXIzxstxpd9dJUv0nQnzMuYgS2MCgk1eBCcjPMq8hV7dJTMERBN\nJ01K+q7IGhiXhBvwUjrPpblIXul/g5XlUhj6Z5I8G7jDDE0rk2N3Dpp5Ya/M46AM\nqhyGj/yiZrxFCTtQAvtzifW2bIqGnOGJ3atgIuSyJVwAjSszr7jDl0EfLVRj6I4v\nOimrqUKmntcDdliBJUa4oEdAUqNxxou6KyRJhRo2wf+/poVHfFhsqznI8L9eUei+\nyfmToSBNshILSjKyuEs+sxybO1mgHwvUAmrlVsTq2FjEET6CjWsTMbe3qjAYy+xW\n1RzRpmdkT4PWk/ht2ou6qqOlBIH3fzGkdAcMjvAAV5ncq1A9LzxqhnUDhztN1uTz\niSWPCUFfMypEiKQI9tVx0+JCaafJIqynsW438XZNLBPJXAzNPCExAtOyKH8fABEB\nAAGJAbYEGAEIACAWIQQnONegblsgqclVw7WoVzI+nXVZ1QUCYO/bZwIbDAAKCRCo\nVzI+nXVZ1cSsDAC0WEIviZMwxjOhlPQHoja/P+1UZU9+Qs8EDY6xiYjeLsah/rIf\nA4c7R3zNb1KdcmHN6yVst3VaMq/soU93xTKlLWphXedN9yht5MG8smfRURHgi2OA\nwb3ZovivR3Plx5UjU4hfoehlWJDNZlje2FZE56oZoOzcNDSdZcc/oXFL54ukVSno\nbiL1o9DVmEta5y+X1b8r0vPE2sb5bmOsaY7mFdsOCaMzIM4cGCc2u4ZugAbK3mQS\nsCTKXLNnkSmYQAkmq+9bZ06WBzwXMerOduyCdEYYFOFhg0ugLVnaCioOov6QW2v2\n1lg0S8pwwPx2LVKE+X0vbdQVa7JZvDkrpw1sGnZ02Smim1JUw+UZlmDiPZf5mIwJ\nswILzc6aBSxBuLQmBl+X3n9KSi3/JI3SzBvRDGxsNb+ln+cx7nL/AMWLpgk1AqC6\nVOg8AL42xE3DEu/LnGDn31bkt2l+5hL+iLsWob66tCUpz+XY+PGuJaN7pejDZwEY\n4Hi7A7VSe3gk2LM=\n=40XY\n-----END PGP PUBLIC KEY BLOCK-----"}'
            - cp -r $res_auto_gitRepo_resourcePath/automation/tests .
            - pushd tests
            - ls -la
            - cp -r $res_automation_templateFS_resourcePath .
            - restore_pipeline_files jsonfile $confFileName
            - if [[ -f "$confFileName" ]]; then jsonfile=true && cat $confFileName; fi
            - if ( $jsonfile && $removeConfFile ); then echo "removing confFileName" && rm -rf $confFileName; fi
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export WEBHOOKS_REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation_Webhooks"
            - export REPOSITORY_BRANCH="master"
            - cp -r $res_Org_test_Automation_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_bash_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_PowerShell_BBS_resourcePath .
            - cp -r $res_Org_test_Automation_Private_BBS_resourcePath .
            - cp -r $res_org_test_automation_MultiBranch_BBS_resourcePath .
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - export ORG_TEST_AUTOMATION_PRIVATE_DIRECTORY="./Org_test_Automation_Private_BBS"
            - export ORG_TEST_AUTOMATION_MULTIBRANCH_DIRECTORY="./org_test_automation_MultiBranch_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - sudo chmod 0777 $TEMPLATE_BINARY_PATH
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - echo "Create MC token"
            - export MC_ACCESS_TOKEN=$(node createAccessToken.js | tail -1)
            - echo "Uploading 200 parallel builds license"
            - |
              curl -X POST "${JPD_URL}/mc/api/v1/buckets" \
                -H "Authorization: Bearer $MC_ACCESS_TOKEN" -H 'Content-Type: multipart/form-data' \
                -F "file=@$res_automationArtifact_resourcePath/186060683_1657637804148.json;type=application/octet-stream" \
                -F "key=$int_mc_license_key" \
                -F 'name=mybucket' -Lvvv
            - echo "res_auto_gitRepo_commitMessage - $res_auto_gitRepo_commitMessage"
            - add_run_variables JPD_URL="$JPD_URL"
            - add_run_variables JFROG_JOIN_KEY="$JFROG_JOIN_KEY"
            - ./test.sh
            - popd
            - rm -rf $res_auto_gitRepo_resourcePath

      - name: test_set_1
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            timeoutSeconds: 21600
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          inputSteps:
            - name: setup_prematrix
              status:
                - success
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/apiHeader.js"
            - listOfTests: "core/api/auth.js"
            - listOfTests: "core/api/buildPlaneImages.js"
            - listOfTests: "core/api/buildPlaneMessages.js"
            - listOfTests: "core/api/cancelRun.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}"
            - testPath=setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - ./test.sh
          onSuccess:
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - popd
            - save_tests testResults/mocha-junit-reporter
            - |
              if [ -d "resultData" ]; then
                # Take action if $DIR exists. #
                rm -r resultData/*
              else
                mkdir resultData
              fi
            - pushd setup_prematrix/tests/mochawesome-report
            - mv mochawesome.json mochawesome-${steplet_id}.json
            - add_run_files mochawesome-${steplet_id}.json ../../resultData/mochawesome-${steplet_id}.json

      - name: test_set_2
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            timeoutSeconds: 21600
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          inputSteps:
            - name: setup_prematrix
              status:
                - success
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/deployKeys.js"
            - listOfTests: "core/api/dynamicNodesMachineTypes.js"
            - listOfTests: "core/api/environmentVariables.js"
            - listOfTests: "core/api/events.js"
            - listOfTests: "core/api/extensionSources.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}"
            - testPath=setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - save_tests testResults/mocha-junit-reporter
            - |
              if [ -d "resultData" ]; then
                # Take action if $DIR exists. #
                rm -r resultData/*
              else
                mkdir resultData
              fi
            - pushd setup_prematrix/tests/mochawesome-report
            - mv mochawesome.json mochawesome-${steplet_id}.json
            - add_run_files mochawesome-${steplet_id}.json ../../resultData/mochawesome-${steplet_id}.json

      - name: test_set_3
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            timeoutSeconds: 21600
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          inputSteps:
            - name: setup_prematrix
              status:
                - success
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/hooks.js"
            - listOfTests: "core/api/identities.js"
            - listOfTests: "core/api/identityFavorites.js"
            - listOfTests: "core/api/identityRoles.js"
            - listOfTests: "core/api/locks.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}"
            - testPath=setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - ./test.sh
          onSuccess:
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - popd
            - save_tests testResults/mocha-junit-reporter
            - |
              if [ -d "resultData" ]; then
                # Take action if $DIR exists. #
                rm -r resultData/*
              else
                mkdir resultData
              fi
            - pushd setup_prematrix/tests/mochawesome-report
            - mv mochawesome.json mochawesome-${steplet_id}.json
            - add_run_files mochawesome-${steplet_id}.json ../../resultData/mochawesome-${steplet_id}.json

      - name: test_set_4
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            timeoutSeconds: 21600
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          inputSteps:
            - name: setup_prematrix
              status:
                - success
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/metrics.js"
            - listOfTests: "core/api/microPipelineEvents.js"
            - listOfTests: "core/api/microPipelines.js"
            - listOfTests: "core/api/nodePools.js"
            - listOfTests: "core/api/nodes.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}"
            - testPath=setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - save_tests testResults/mocha-junit-reporter
            - |
              if [ -d "resultData" ]; then
                # Take action if $DIR exists. #
                rm -r resultData/*
              else
                mkdir resultData
              fi
            - pushd setup_prematrix/tests/mochawesome-report
            - mv mochawesome.json mochawesome-${steplet_id}.json
            - add_run_files mochawesome-${steplet_id}.json ../../resultData/mochawesome-${steplet_id}.json

      - name: test_set_5
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            timeoutSeconds: 21600
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          inputSteps:
            - name: setup_prematrix
              status:
                - success
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/nodeStats.js"
            - listOfTests: "core/api/passthrough_pipeInfo.js"
            - listOfTests: "core/api/passthrough.js"
            - listOfTests: "core/api/passthroughAssignPermission.js"
            - listOfTests: "core/api/passthroughPermission.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}"
            - testPath=setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - save_tests testResults/mocha-junit-reporter
            - |
              if [ -d "resultData" ]; then
                # Take action if $DIR exists. #
                rm -r resultData/*
              else
                mkdir resultData
              fi
            - pushd setup_prematrix/tests/mochawesome-report
            - mv mochawesome.json mochawesome-${steplet_id}.json
            - add_run_files mochawesome-${steplet_id}.json ../../resultData/mochawesome-${steplet_id}.json

      - name: test_set_6
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            timeoutSeconds: 21600
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          inputSteps:
            - name: setup_prematrix
              status:
                - success
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/pipelineObjects.js"
            - listOfTests: "core/api/pipelines.js"
            - listOfTests: "core/api/pipelines2.js"
            - listOfTests: "core/api/pipelineSourceObjectPermissions.js"
            - listOfTests: "core/api/pipelineStepConnections.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}"
            - testPath=setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - save_tests testResults/mocha-junit-reporter
            - |
              if [ -d "resultData" ]; then
                # Take action if $DIR exists. #
                rm -r resultData/*
              else
                mkdir resultData
              fi
            - pushd setup_prematrix/tests/mochawesome-report
            - mv mochawesome.json mochawesome-${steplet_id}.json
            - add_run_files mochawesome-${steplet_id}.json ../../resultData/mochawesome-${steplet_id}.json

      - name: test_set_7
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            timeoutSeconds: 21600
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          inputSteps:
            - name: setup_prematrix
              status:
                - success
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/pipelineSteplets.js"
            - listOfTests: "core/api/pipelineSteps.js"
            - listOfTests: "core/api/pipelineSteps2.js"
            - listOfTests: "core/api/pipelineSyncStatus.js"
            - listOfTests: "core/api/project.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}"
            - testPath=setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - save_tests testResults/mocha-junit-reporter
            - |
              if [ -d "resultData" ]; then
                # Take action if $DIR exists. #
                rm -r resultData/*
              else
                mkdir resultData
              fi
            - pushd setup_prematrix/tests/mochawesome-report
            - mv mochawesome.json mochawesome-${steplet_id}.json
            - add_run_files mochawesome-${steplet_id}.json ../../resultData/mochawesome-${steplet_id}.json

      - name: test_set_8
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            timeoutSeconds: 21600
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          inputSteps:
            - name: setup_prematrix
              status:
                - success
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/projectIntegrations.js"
            - listOfTests: "core/api/projectPermissions.js"
            - listOfTests: "core/api/providers.js"
            - listOfTests: "core/api/resources.js"
            - listOfTests: "core/api/resourceVersions.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}"
            - testPath=setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - save_tests testResults/mocha-junit-reporter
            - |
              if [ -d "resultData" ]; then
                # Take action if $DIR exists. #
                rm -r resultData/*
              else
                mkdir resultData
              fi
            - pushd setup_prematrix/tests/mochawesome-report
            - mv mochawesome.json mochawesome-${steplet_id}.json
            - add_run_files mochawesome-${steplet_id}.json ../../resultData/mochawesome-${steplet_id}.json

      - name: test_set_9
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            timeoutSeconds: 21600
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          inputSteps:
            - name: setup_prematrix
              status:
                - success
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/runResourceVersions.js"
            - listOfTests: "core/api/runs.js"
            - listOfTests: "core/api/runStepConnections.js"
            - listOfTests: "core/api/stepArtifacts.js"
            - listOfTests: "core/api/stepConsoles.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}"
            - testPath=setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - save_tests testResults/mocha-junit-reporter
            - |
              if [ -d "resultData" ]; then
                # Take action if $DIR exists. #
                rm -r resultData/*
              else
                mkdir resultData
              fi
            - pushd setup_prematrix/tests/mochawesome-report
            - mv mochawesome.json mochawesome-${steplet_id}.json
            - add_run_files mochawesome-${steplet_id}.json ../../resultData/mochawesome-${steplet_id}.json

      - name: test_set_10
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            timeoutSeconds: 21600
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          inputSteps:
            - name: setup_prematrix
              status:
                - success
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/stepletConsoles.js"
            - listOfTests: "core/api/steplets.js"
            - listOfTests: "core/api/stepletTestReports.js"
            - listOfTests: "core/api/steps.js"
            - listOfTests: "core/api/stepTestReports.js"
            - listOfTests: "core/api/stepContextTabs.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}"
            - testPath=setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - save_tests testResults/mocha-junit-reporter
            - |
              if [ -d "resultData" ]; then
                # Take action if $DIR exists. #
                rm -r resultData/*
              else
                mkdir resultData
              fi
            - pushd setup_prematrix/tests/mochawesome-report
            - mv mochawesome.json mochawesome-${steplet_id}.json
            - add_run_files mochawesome-${steplet_id}.json ../../resultData/mochawesome-${steplet_id}.json

      - name: test_set_11
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            timeoutSeconds: 21600
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          inputSteps:
            - name: setup_prematrix
              status:
                - success
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/stepVariables.js"
            - listOfTests: "core/api/swagger.js"
            - listOfTests: "core/api/systemCodes.js"
            - listOfTests: "core/api/systemConfigs.js"
            - listOfTests: "core/api/systemConfigStatus.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}"
            - testPath=setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - save_tests testResults/mocha-junit-reporter
            - |
              if [ -d "resultData" ]; then
                # Take action if $DIR exists. #
                rm -r resultData/*
              else
                mkdir resultData
              fi
            - pushd setup_prematrix/tests/mochawesome-report
            - mv mochawesome.json mochawesome-${steplet_id}.json
            - add_run_files mochawesome-${steplet_id}.json ../../resultData/mochawesome-${steplet_id}.json

      - name: test_set_12
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            timeoutSeconds: 21600
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          inputSteps:
            - name: setup_prematrix
              status:
                - success
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/systemHealth.js"
            - listOfTests: "core/api/systemLiveLogs.js"
            # TODO: will be uncomented once PIPE-10435 is fixed
            # - listOfTests: "core/api/systemServiceInstances.js"
            - listOfTests: "core/api/systemServices.js"
            - listOfTests: "core/api/templates.js"
            - listOfTests: "core/api/templates.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}"
            - testPath=setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - save_tests testResults/mocha-junit-reporter
            - |
              if [ -d "resultData" ]; then
                # Take action if $DIR exists. #
                rm -r resultData/*
              else
                mkdir resultData
              fi
            - pushd setup_prematrix/tests/mochawesome-report
            - mv mochawesome.json mochawesome-${steplet_id}.json
            - add_run_files mochawesome-${steplet_id}.json ../../resultData/mochawesome-${steplet_id}.json

      - name: test_set_13
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            timeoutSeconds: 21600
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          inputSteps:
            - name: setup_prematrix
              status:
                - success
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/testElements.js"
            - listOfTests: "core/api/validateYaml.js"
            - listOfTests: "core/api/validateYaml2.js"
            - listOfTests: "core/api/validateTemplate.js"
            - listOfTests: "core/api/templateList.js"
            - listOfTests: "core/api/inUseBy.js"
            - listOfTests: "core/api/webhook.js"
            - listOfTests: "core/api/windowStaticNodePools.js"
            - listOfTests: "core/api/userViews.js"
            - listOfTests: "core/api/disabledEntities.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}"
            - testPath=setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - save_tests testResults/mocha-junit-reporter
            - |
              if [ -d "resultData" ]; then
                # Take action if $DIR exists. #
                rm -r resultData/*
              else
                mkdir resultData
              fi
            - pushd setup_prematrix/tests/mochawesome-report
            - mv mochawesome.json mochawesome-${steplet_id}.json
            - add_run_files mochawesome-${steplet_id}.json ../../resultData/mochawesome-${steplet_id}.json

      - name: test_set_14
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            timeoutSeconds: 7200
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
          nodePool: pipelines_testing
          inputSteps:
            - name: test_set_1
              status:
                - success
                - failure
                - error
                - timeout
            - name: test_set_2
              status:
                - success
                - failure
                - error
                - timeout
            - name: test_set_3
              status:
                - success
                - failure
                - error
                - timeout
            - name: test_set_4
              status:
                - success
                - failure
                - error
                - timeout
            - name: test_set_5
              status:
                - success
                - failure
                - error
                - timeout
            - name: test_set_6
              status:
                - success
                - failure
                - error
                - timeout
            - name: test_set_7
              status:
                - success
                - failure
                - error
                - timeout
            - name: test_set_8
              status:
                - success
                - failure
                - error
                - timeout
            - name: test_set_9
              status:
                - success
                - failure
                - error
                - timeout
            - name: test_set_10
              status:
                - success
                - failure
                - error
                - timeout
            - name: test_set_11
              status:
                - success
                - failure
                - error
                - timeout
            - name: test_set_12
              status:
                - success
                - failure
                - error
                - timeout
            - name: test_set_13
              status:
                - success
                - failure
                - error
                - timeout
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests:  "core/api/pipelineSources.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - echo "Variation listOfTests = ${listOfTests}"
            - testPath=test_set_1/setup_prematrix/tests
            - echo "testPath - $testPath"
            - pushd $testPath
            - ls -al
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export REPOSITORY_BRANCH="master"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - save_tests testResults/mocha-junit-reporter
            - rm -rf setup_PreMatrix
            - pushd test_set_1/setup_prematrix/tests
            - pushd mochawesome-report
            - mv mochawesome.json mochawesome-${steplet_id}.json
            - add_run_files mochawesome-${steplet_id}.json ../../test_set_1/resultData/mochawesome-${steplet_id}.json
            - ls -la
            - add_run_files ../../../resultData resultDataStore

      - name: test_defaultProjectAsPrimaryProject
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            SKIP_SETUP: "true"
            SKIP_GLOBAL_TEARDOWN: "true"
            FIRSTPROJECTNAME: "firstProject"
            FIRSTPROJECTKEY: "first"
            SECONDPROJECTNAME: "secondProject"
            SECONDPROJECTKEY: "second"
          nodePool: pipelines_testing
          runtime:
            type: host
          inputSteps:
            - name: test_set_14
              status:
                - success
                - failure
                - error
                - timeout
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/nodePools.js"
            - listOfTests: "core/api/projectIntegrations.js"
            - listOfTests: "core/api/pipelineSources.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=test_set_14/test_set_1/setup_prematrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - save_tests testResults/mocha-junit-reporter
            - pushd test_set_14/test_set_1/setup_prematrix/tests
            - pushd mochawesome-report
            - mv mochawesome.json mochawesome-${steplet_id}.json
            - add_run_files mochawesome-${steplet_id}.json ../../test_set_14/test_set_1/resultData/mochawesome-${steplet_id}.json
            - ls -la
            - add_run_files ../../../resultData resultDataStore

      - name: test_set_awsNode_nondefault
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            PRIMARYPROJECTNAME: "firstProject"
            PRIMARYPROJECTKEY: "first"
            FIRSTPROJECTNAME: "firstProject"
            FIRSTPROJECTKEY: "first"
            SECONDPROJECTNAME: "secondProject"
            SECONDPROJECTKEY: "second"
          nodePool: pipelines_testing
          runtime:
            type: host
          inputSteps:
            - name: test_set_14
              status:
                - success
                - failure
                - error
                - timeout
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/nodePools/dynamicAWSnode.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=test_set_14/test_set_1/setup_prematrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - save_tests testResults/mocha-junit-reporter
            - pushd test_set_14/test_set_1/setup_prematrix/tests
            - pushd mochawesome-report
            - mv mochawesome.json mochawesome-${steplet_id}.json
            - add_run_files mochawesome-${steplet_id}.json ../../test_set_14/test_set_1/resultData/mochawesome-${steplet_id}.json
            - ls -la
            - add_run_files ../../../resultData resultDataStore

      - name: test_set_1_nondefault
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            PRIMARYPROJECTNAME: "firstProject"
            PRIMARYPROJECTKEY: "first"
            FIRSTPROJECTNAME: "firstProject"
            FIRSTPROJECTKEY: "first"
            SECONDPROJECTNAME: "secondProject"
            SECONDPROJECTKEY: "second"
          nodePool: pipelines_testing
          runtime:
            type: host
          inputSteps:
            - name: test_set_14
              status:
                - success
                - failure
                - error
                - timeout
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/apiHeader.js"
            - listOfTests: "core/api/buildPlaneImages.js"
            - listOfTests: "core/api/buildPlaneMessages.js"
            - listOfTests: "core/api/cancelRun.js"
            - listOfTests: "core/api/events.js"
            - listOfTests: "core/api/extensionSources.js"
            - listOfTests: "core/api/hooks.js"
            - listOfTests: "core/api/identities.js"
            - listOfTests: "core/api/identityFavorites.js"
            - listOfTests: "core/api/identityRoles.js"
            - listOfTests: "core/api/locks.js"
            - listOfTests: "core/api/metrics.js"
            - listOfTests: "core/api/microPipelineEvents.js"
            - listOfTests: "core/api/microPipelines.js"
            - listOfTests: "core/api/nodePools.js"
            - listOfTests: "core/api/nodes.js"
            - listOfTests: "core/api/nodeStats.js"
            - listOfTests: "core/api/passthrough_pipeInfo.js"
            - listOfTests: "core/api/passthrough.js"
            - listOfTests: "core/api/passthroughAssignPermission.js"
            - listOfTests: "core/api/passthroughPermission.js"
            - listOfTests: "core/api/pipelineObjects.js"
            - listOfTests: "core/api/pipelines.js"
            - listOfTests: "core/api/pipelineSourceObjectPermissions.js"
            - listOfTests: "core/api/pipelineStepConnections.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=test_set_14/test_set_1/setup_prematrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - save_tests testResults/mocha-junit-reporter
            - pushd test_set_14/test_set_1/setup_prematrix/tests
            - pushd mochawesome-report
            - mv mochawesome.json mochawesome-${steplet_id}.json
            - add_run_files mochawesome-${steplet_id}.json ../../test_set_14/test_set_1/resultData/mochawesome-${steplet_id}.json
            - ls -la
            - add_run_files ../../../resultData resultDataStore

      - name: test_set_2_nondefault
        type: Matrix
        stepMode: Bash
        configuration:
          multiNode: true
          environmentVariables:
            SKIP_GLOBAL_TEARDOWN: "true"
            SKIP_SETUP: "true"
            PRIMARYPROJECTNAME: "firstProject"
            PRIMARYPROJECTKEY: "first"
            FIRSTPROJECTNAME: "firstProject"
            FIRSTPROJECTKEY: "first"
            SECONDPROJECTNAME: "secondProject"
            SECONDPROJECTKEY: "second"
          nodePool: pipelines_testing
          runtime:
            type: host
          inputSteps:
            - name: test_set_14
              status:
                - success
                - failure
                - error
                - timeout
          integrations:
            - name: entArt
        stepletMultipliers:
          environmentVariables:
            - listOfTests: "core/api/pipelineSteplets.js"
            - listOfTests: "core/api/pipelineSteps.js"
            - listOfTests: "core/api/pipelineSyncStatus.js"
            - listOfTests: "core/api/project.js"
            - listOfTests: "core/api/projectPermissions.js"
            - listOfTests: "core/api/providers.js"
            - listOfTests: "core/api/resources.js"
            - listOfTests: "core/api/resourceVersions.js"
            - listOfTests: "core/api/runResourceVersions.js"
            - listOfTests: "core/api/runs.js"
            - listOfTests: "core/api/runStepConnections.js"
            - listOfTests: "core/api/stepArtifacts.js"
            - listOfTests: "core/api/stepConsoles.js"
            - listOfTests: "core/api/stepletConsoles.js"
            - listOfTests: "core/api/steplets.js"
            - listOfTests: "core/api/stepletTestReports.js"
            - listOfTests: "core/api/steps.js"
            - listOfTests: "core/api/stepTestReports.js"
            - listOfTests: "core/api/stepVariables.js"
            - listOfTests: "core/api/swagger.js"
            - listOfTests: "core/api/systemCodes.js"
            - listOfTests: "core/api/systemConfigs.js"
            - listOfTests: "core/api/systemConfigStatus.js"
            - listOfTests: "core/api/systemHealth.js"
            - listOfTests: "core/api/systemLiveLogs.js"
            - listOfTests: "core/api/systemServiceInstances.js"
            - listOfTests: "core/api/systemServices.js"
            - listOfTests: "core/api/templates.js"
            - listOfTests: "core/api/templates.js"
            - listOfTests: "core/api/templateSources.js"
            - listOfTests: "core/api/testElements.js"
            - listOfTests: "core/api/userViews.js"
            - listOfTests: "core/api/disabledEntities.js"
            - listOfTests: "core/api/webhook.js"
            - listOfTests: "core/api/windowStaticNodePools.js"
        execution:
          onExecute:
            - echo "Executing matrix step on ${steplet_id}"
            - testPath=test_set_14/test_set_1/setup_prematrix/tests
            - pushd $testPath
            - ls -al
            - export REPOSITORY_FULL_NAME=$gitUser"/Org_test_Automation"
            - export REPOSITORY_BRANCH="master"
            - export ORG_TEST_AUTOMATION_DIRECTORY="./Org_test_Automation_BBS"
            - export ORG_TEST_AUTOMATION_BASH_DIRECTORY="./Org_test_Automation_bash_BBS"
            - export ORG_TEST_AUTOMATION_POWERSHELL_DIRECTORY="./Org_test_Automation_PowerShell_BBS"
            - templateFileName="$(ls ./automation_templateFS | grep pipelines-template)"
            - export TEMPLATE_BINARY_PATH="./automation_templateFS/${templateFileName}"
            - export testCases=$listOfTests
            - ./test.sh
          onFailure:
            - sudo chmod +x ./_common/state/pipelines/reports/onFailureTestLogs.sh
            - ./_common/state/pipelines/reports/onFailureTestLogs.sh ${res_cpGit_resourcePath} ${builder_api_token}
          onComplete:
            - cat $confFileName
            - popd
            - add_run_files $testPath/testResults report_${steplet_id}
            - cp -r $testPath/testResults .
            - cp $testPath/token.json .
            - save_tests testResults/mocha-junit-reporter
            - pushd test_set_14/test_set_1/setup_prematrix/tests
            - pushd mochawesome-report
            - mv mochawesome.json mochawesome-${steplet_id}.json
            - add_run_files mochawesome-${steplet_id}.json ../../test_set_14/test_set_1/resultData/mochawesome-${steplet_id}.json
            - ls -la
            - add_run_files ../../../resultData resultDataStore

      - name: teardown_postmatrix
        type: PostMatrix
        configuration:
          nodePool: pipelines_u20
          integrations:
            - name: jfdev_agent
          inputResources:
            - name: auto_gitRepo
              trigger: false
            - name: triggerLightWeightAutomation
              trigger: false
          outputResources:
            - name: apiReleaseApprovalBag
          inputSteps:
            - name: test_defaultProjectAsPrimaryProject
              status:
                - success
                - failure
                - error
                - timeout
            - name: test_set_awsNode_nondefault
              status:
                - success
                - failure
                - error
                - timeout
            - name: test_set_1_nondefault
              status:
                - success
                - failure
                - error
                - timeout
            - name: test_set_2_nondefault
              status:
                - success
                - failure
                - error
                - timeout
          environmentVariables:
            SKIP_NPM_INSTALL: "false"
            listOfTests: "core/api/nodes.js"
          chronological: true
        execution:
          onStart:
            - write_output apiReleaseApprovalBag APPROVAL_STATUS='REQUESTING_APPROVAL_FOR_RELEASE_PIPELINES'
            - pushd $res_auto_gitRepo_resourcePath/automation/tests/
            - restore_pipeline_files jsonfile $confFileName
            - if [[ -f "$confFileName" ]]; then jsonfile=true && cat $confFileName; fi
            - if ( $jsonfile && $removeConfFile ); then echo "removing confFileName" && rm -rf $confFileName; fi
            - export testCases="core/api/systemCodes.js"
            - mkdir -p /tmp/npm_cache
            - restore_pipeline_files npm_cache /tmp/npm_cache/
            - jfrog rt npmc --server-id-resolve entArt --repo-resolve npm-virtual
            - jfrog rt npmci
            - add_pipeline_files /tmp/npm_cache npm_cache
            - ./test.sh
            - restore_run_files resultDataStore resultDataStore
            - ls -la ./resultDataStore
{{ if or (eq "master" "{{gitBranch}}") (hasPrefix "preRelease" "{{gitBranch}}") (hasPrefix "milestone" "{{gitBranch}}") (hasSuffix "full" "{{gitBranch}}") }}
  - name: installer_test
    configuration:
      runtime:
        type: host
    steps:
      - name: installer_test
        type: Matrix
        stepMode: Bash
        configuration:
          environmentVariables:
            RT_VERSION:
              allowCustom: true
              default: 7.58.3
            PIPELINES_OLD_VERSION:
              allowCustom: true
              default: 1.37.3
          integrations:
            - name: installer_keys
            - name: entplus_deployer
          inputResources:
            - name: auto_gitRepo
              trigger: false
            - name: branchSnapshotBag
              trigger: false
            - name: cpGit
              trigger: false
          multiNode: true
        stepletMultipliers:
          nodePools:
            - pipelines_installer_u20_testing
            - pipelines_installer_u18_testing
            - pipelines_installer_c7_testing
          runtimes:
            - type: host
        execution:
          onExecute:
            - export OS_NAME=$(cat /etc/os-release | grep "ID" | cut -d "=" -f2 | head -n 1 | sed 's/"//g')
            - export OS_VERSION=$(cat /etc/os-release | grep "VERSION_ID" | cut -d "=" -f2 | sed 's/"//g')
            - pushd $res_cpGit_resourcePath
            - NORMALIZED_VERSION=$(./normalizeReleaseVersion.sh {{gitBranch}})
            - export PIPELINES_LATEST_VERSION=$NORMALIZED_VERSION
            - pushd $res_auto_gitRepo_resourcePath/automation/tests/installer/"$OS_NAME"_"$OS_VERSION"
            - export IMAGES_VERSION="${res_branchSnapshotBag_snapshotVersion}"
            - export RT_DOCKER_REPO="${res_branchSnapshotBag_registryUrl}"
            - export USERNAME="${int_entplus_deployer_user}"
            - export APIKEY="${int_entplus_deployer_apikey}"
            - ./install.sh $PIPELINES_OLD_VERSION $RT_DOCKER_REPO $RT_VERSION $USERNAME $APIKEY
            - ./install-test.sh $PIPELINES_OLD_VERSION
            - ./upgrade.sh $PIPELINES_LATEST_VERSION $RT_DOCKER_REPO
            - ./upgrade-test.sh $PIPELINES_LATEST_VERSION
{{ end }}
{{ if or (hasPrefix "preRelease" "{{gitBranch}}") (hasSuffix "full" "{{gitBranch}}") }}
  - name: approve_for_release_iTests
    steps:
      - name: approve_for_release_iTests
        type: bash
        configuration:
          requiresApproval:
            approvers:
              - jasmeets
              - ambrishs
          inputResources:
            - name: iTestReleaseApprovalBag
        execution:
          onExecute:
            - echo "Approved!"
{{ end }}
{{ if or (hasPrefix "preRelease" "{{gitBranch}}") (hasSuffix "full" "{{gitBranch}}") }}
  - name: approve_for_release_SCM
    steps:
      - name: approve_for_release_SCM
        type: bash
        configuration:
          requiresApproval:
            approvers:
              - jasmeets
              - ambrishs
          inputResources:
            - name: scmReleaseApprovalBag
        execution:
          onExecute:
            - echo "Approved!"
{{ end }}
{{ if or (hasPrefix "preRelease" "{{gitBranch}}") (hasSuffix "full" "{{gitBranch}}") }}
  - name: approve_for_release_iTestNative
    steps:
      - name: approve_for_release_iTestNative
        type: bash
        configuration:
          requiresApproval:
            approvers:
              - jasmeets
              - ambrishs
          inputResources:
            - name: iTestNativeReleaseApprovalBag
        execution:
          onExecute:
            - echo "Approved!"
{{ end }}
{{ if or (hasPrefix "preRelease" "{{gitBranch}}") (hasSuffix "full" "{{gitBranch}}") }}
  - name: approve_for_release_iTestNonDefault
    steps:
      - name: approve_for_release_iTestNonDefault
        type: bash
        configuration:
          requiresApproval:
            approvers:
              - jasmeets
              - ambrishs
          inputResources:
            - name: iTestNonDefaultReleaseApprovalBag
        execution:
          onExecute:
            - echo "Approved!"
{{ end }}
{{ if or (hasPrefix "preRelease" "{{gitBranch}}") (hasSuffix "full" "{{gitBranch}}") }}
  - name: approve_for_release_AWS
    steps:
      - name: approve_for_release_AWS
        type: bash
        configuration:
          requiresApproval:
            approvers:
              - jasmeets
              - ambrishs
          inputResources:
            - name: awsReleaseApprovalBag
        execution:
          onExecute:
            - echo "Approved!"
{{ end }}
{{ if or (hasPrefix "preRelease" "{{gitBranch}}") (hasSuffix "full" "{{gitBranch}}") }}
  - name: approve_for_release_GCP
    steps:
      - name: approve_for_release_GCP
        type: bash
        configuration:
          requiresApproval:
            approvers:
              - jasmeets
              - ambrishs
          inputResources:
            - name: gcpReleaseApprovalBag
        execution:
          onExecute:
            - echo "Approved!"
{{ end }}

